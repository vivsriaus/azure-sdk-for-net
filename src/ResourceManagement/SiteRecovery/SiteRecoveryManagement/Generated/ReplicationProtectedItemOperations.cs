// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.SiteRecovery;
using Microsoft.Azure.Management.SiteRecovery.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.SiteRecovery
{
    /// <summary>
    /// Definition of Replication protected item operations for the Site
    /// Recovery extension.
    /// </summary>
    internal partial class ReplicationProtectedItemOperations : IServiceOperations<SiteRecoveryManagementClient>, IReplicationProtectedItemOperations
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ReplicationProtectedItemOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ReplicationProtectedItemOperations(SiteRecoveryManagementClient client)
        {
            this._client = client;
        }
        
        private SiteRecoveryManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.SiteRecovery.SiteRecoveryManagementClient.
        /// </summary>
        public SiteRecoveryManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Apply recovery point for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item name.
        /// </param>
        /// <param name='input'>
        /// Required. Apply recovery point input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> ApplyRecoveryPointAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, ApplyRecoveryPointInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ApplyRecoveryPointAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.ReplicationProtectedItem.BeginApplyRecoveryPointAsync(fabricName, protectionContainerName, replicationProtectedItemName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            ReplicationProtectedItemOperationResponse result = await client.ReplicationProtectedItem.GetApplyRecoveryPointStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ReplicationProtectedItem.GetApplyRecoveryPointStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Apply recovery point for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item name.
        /// </param>
        /// <param name='input'>
        /// Required. Apply recovery point input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginApplyRecoveryPointAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, ApplyRecoveryPointInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (replicationProtectedItemName == null)
            {
                throw new ArgumentNullException("replicationProtectedItemName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginApplyRecoveryPointAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/ReplicationProtectedItems/";
            url = url + Uri.EscapeDataString(replicationProtectedItemName);
            url = url + "/applyRecoveryPoint";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject applyRecoveryPointInputValue = new JObject();
                requestDoc = applyRecoveryPointInputValue;
                
                if (input.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    applyRecoveryPointInputValue["properties"] = propertiesValue;
                    
                    if (input.Properties.RecoveryPointId != null)
                    {
                        propertiesValue["recoveryPointId"] = input.Properties.RecoveryPointId;
                    }
                    
                    if (input.Properties.ProviderSpecificDetails != null)
                    {
                        JObject providerSpecificDetailsValue = new JObject();
                        propertiesValue["providerSpecificDetails"] = providerSpecificDetailsValue;
                        if (input.Properties.ProviderSpecificDetails is HyperVReplicaAzureApplyRecoveryPointInput)
                        {
                            providerSpecificDetailsValue["instanceType"] = "HyperVReplicaAzure";
                            HyperVReplicaAzureApplyRecoveryPointInput derived = ((HyperVReplicaAzureApplyRecoveryPointInput)input.Properties.ProviderSpecificDetails);
                            
                            providerSpecificDetailsValue["vaultLocation"] = derived.VaultLocation;
                            
                            if (derived.PrimaryKekCertificatePfx != null)
                            {
                                providerSpecificDetailsValue["primaryKekCertificatePfx"] = derived.PrimaryKekCertificatePfx;
                            }
                            
                            if (derived.SecondaryKekCertificatePfx != null)
                            {
                                providerSpecificDetailsValue["secondaryKekCertificatePfx"] = derived.SecondaryKekCertificatePfx;
                            }
                        }
                        if (input.Properties.ProviderSpecificDetails is VMwareAzureV2ApplyRecoveryPointInput)
                        {
                            providerSpecificDetailsValue["instanceType"] = "VMwareAzureV2";
                            VMwareAzureV2ApplyRecoveryPointInput derived2 = ((VMwareAzureV2ApplyRecoveryPointInput)input.Properties.ProviderSpecificDetails);
                            
                            providerSpecificDetailsValue["vaultLocation"] = derived2.VaultLocation;
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Execute commit failover for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginCommitFailoverAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (replicationProtectedItemName == null)
            {
                throw new ArgumentNullException("replicationProtectedItemName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginCommitFailoverAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/ReplicationProtectedItems/";
            url = url + Uri.EscapeDataString(replicationProtectedItemName);
            url = url + "/failoverCommit";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Disable Protection for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item unique name.
        /// </param>
        /// <param name='input'>
        /// Required. Disable protection input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginDisableProtectionAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, DisableProtectionInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (replicationProtectedItemName == null)
            {
                throw new ArgumentNullException("replicationProtectedItemName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginDisableProtectionAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/ReplicationProtectedItems/";
            url = url + Uri.EscapeDataString(replicationProtectedItemName);
            url = url + "/remove";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject disableProtectionInputValue = new JObject();
                requestDoc = disableProtectionInputValue;
                
                if (input.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    disableProtectionInputValue["properties"] = propertiesValue;
                    
                    JObject replicationProviderInputValue = new JObject();
                    propertiesValue["replicationProviderInput"] = replicationProviderInputValue;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Enable Protection for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item unique name.
        /// </param>
        /// <param name='input'>
        /// Required. Enable protection input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginEnableProtectionAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, EnableProtectionInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (replicationProtectedItemName == null)
            {
                throw new ArgumentNullException("replicationProtectedItemName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginEnableProtectionAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/ReplicationProtectedItems/";
            url = url + Uri.EscapeDataString(replicationProtectedItemName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject enableProtectionInputValue = new JObject();
                requestDoc = enableProtectionInputValue;
                
                if (input.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    enableProtectionInputValue["properties"] = propertiesValue;
                    
                    if (input.Properties.PolicyId != null)
                    {
                        propertiesValue["policyId"] = input.Properties.PolicyId;
                    }
                    
                    if (input.Properties.ProtectableItemId != null)
                    {
                        propertiesValue["protectableItemId"] = input.Properties.ProtectableItemId;
                    }
                    
                    if (input.Properties.ProviderSpecificDetails != null)
                    {
                        JObject providerSpecificDetailsValue = new JObject();
                        propertiesValue["providerSpecificDetails"] = providerSpecificDetailsValue;
                        if (input.Properties.ProviderSpecificDetails is HyperVReplicaAzureEnableProtectionInput)
                        {
                            providerSpecificDetailsValue["instanceType"] = "HyperVReplicaAzure";
                            HyperVReplicaAzureEnableProtectionInput derived = ((HyperVReplicaAzureEnableProtectionInput)input.Properties.ProviderSpecificDetails);
                            
                            if (derived.HvHostVmId != null)
                            {
                                providerSpecificDetailsValue["hvHostVmId"] = derived.HvHostVmId;
                            }
                            
                            if (derived.VmName != null)
                            {
                                providerSpecificDetailsValue["vmName"] = derived.VmName;
                            }
                            
                            if (derived.OSType != null)
                            {
                                providerSpecificDetailsValue["osType"] = derived.OSType;
                            }
                            
                            if (derived.VhdId != null)
                            {
                                providerSpecificDetailsValue["vhdId"] = derived.VhdId;
                            }
                            
                            if (derived.TargetStorageAccountId != null)
                            {
                                providerSpecificDetailsValue["targetStorageAccountId"] = derived.TargetStorageAccountId;
                            }
                        }
                        if (input.Properties.ProviderSpecificDetails is VMwareAzureV2EnableProtectionInput)
                        {
                            providerSpecificDetailsValue["instanceType"] = "VMwareAzureV2";
                            VMwareAzureV2EnableProtectionInput derived2 = ((VMwareAzureV2EnableProtectionInput)input.Properties.ProviderSpecificDetails);
                            
                            if (derived2.MasterTargetId != null)
                            {
                                providerSpecificDetailsValue["masterTargetId"] = derived2.MasterTargetId;
                            }
                            
                            if (derived2.ProcessServerId != null)
                            {
                                providerSpecificDetailsValue["processServerId"] = derived2.ProcessServerId;
                            }
                            
                            if (derived2.StorageAccountId != null)
                            {
                                providerSpecificDetailsValue["storageAccountId"] = derived2.StorageAccountId;
                            }
                            
                            if (derived2.StorageSubscriptionId != null)
                            {
                                providerSpecificDetailsValue["storageSubscriptionId"] = derived2.StorageSubscriptionId;
                            }
                            
                            if (derived2.RunAsAccountId != null)
                            {
                                providerSpecificDetailsValue["runAsAccountId"] = derived2.RunAsAccountId;
                            }
                            
                            if (derived2.MultiVmGroupId != null)
                            {
                                providerSpecificDetailsValue["multiVmGroupId"] = derived2.MultiVmGroupId;
                            }
                            
                            if (derived2.MultiVmGroupName != null)
                            {
                                providerSpecificDetailsValue["multiVmGroupName"] = derived2.MultiVmGroupName;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Execute planned failover for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item name.
        /// </param>
        /// <param name='input'>
        /// Required. Planned failover input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginPlannedFailoverAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, PlannedFailoverInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (replicationProtectedItemName == null)
            {
                throw new ArgumentNullException("replicationProtectedItemName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginPlannedFailoverAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/ReplicationProtectedItems/";
            url = url + Uri.EscapeDataString(replicationProtectedItemName);
            url = url + "/plannedFailover";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject plannedFailoverInputValue = new JObject();
                requestDoc = plannedFailoverInputValue;
                
                if (input.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    plannedFailoverInputValue["properties"] = propertiesValue;
                    
                    if (input.Properties.FailoverDirection != null)
                    {
                        propertiesValue["failoverDirection"] = input.Properties.FailoverDirection;
                    }
                    
                    if (input.Properties.ProviderSpecificDetails != null)
                    {
                        JObject providerSpecificDetailsValue = new JObject();
                        propertiesValue["providerSpecificDetails"] = providerSpecificDetailsValue;
                        if (input.Properties.ProviderSpecificDetails is HyperVReplicaAzureFailoverProviderInput)
                        {
                            providerSpecificDetailsValue["instanceType"] = "HyperVReplicaAzure";
                            HyperVReplicaAzureFailoverProviderInput derived = ((HyperVReplicaAzureFailoverProviderInput)input.Properties.ProviderSpecificDetails);
                            
                            if (derived.VaultLocation != null)
                            {
                                providerSpecificDetailsValue["vaultLocation"] = derived.VaultLocation;
                            }
                            
                            if (derived.PrimaryKekCertificatePfx != null)
                            {
                                providerSpecificDetailsValue["primaryKekCertificatePfx"] = derived.PrimaryKekCertificatePfx;
                            }
                            
                            if (derived.SecondaryKekCertificatePfx != null)
                            {
                                providerSpecificDetailsValue["secondaryKekCertificatePfx"] = derived.SecondaryKekCertificatePfx;
                            }
                        }
                        if (input.Properties.ProviderSpecificDetails is HyperVReplicaAzureFailbackProviderInput)
                        {
                            providerSpecificDetailsValue["instanceType"] = "HyperVReplicaAzureFailback";
                            HyperVReplicaAzureFailbackProviderInput derived2 = ((HyperVReplicaAzureFailbackProviderInput)input.Properties.ProviderSpecificDetails);
                            
                            if (derived2.DataSyncOption != null)
                            {
                                providerSpecificDetailsValue["dataSyncOption"] = derived2.DataSyncOption;
                            }
                            
                            if (derived2.RecoveryVmCreationOption != null)
                            {
                                providerSpecificDetailsValue["recoveryVmCreationOption"] = derived2.RecoveryVmCreationOption;
                            }
                            
                            if (derived2.ProviderIdForAlternateRecovery != null)
                            {
                                providerSpecificDetailsValue["providerIdForAlternateRecovery"] = derived2.ProviderIdForAlternateRecovery;
                            }
                        }
                        if (input.Properties.ProviderSpecificDetails is VMWareAzureV2FailoverProviderInput)
                        {
                            providerSpecificDetailsValue["instanceType"] = "VMWareAzureV2";
                            VMWareAzureV2FailoverProviderInput derived3 = ((VMWareAzureV2FailoverProviderInput)input.Properties.ProviderSpecificDetails);
                            
                            if (derived3.VaultLocation != null)
                            {
                                providerSpecificDetailsValue["vaultLocation"] = derived3.VaultLocation;
                            }
                            
                            if (derived3.RecoveryPointId != null)
                            {
                                providerSpecificDetailsValue["recoveryPointId"] = derived3.RecoveryPointId;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Purges Protection for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item unique name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginPurgeProtectionAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (replicationProtectedItemName == null)
            {
                throw new ArgumentNullException("replicationProtectedItemName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginPurgeProtectionAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/ReplicationProtectedItems/";
            url = url + Uri.EscapeDataString(replicationProtectedItemName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Executes repair VM replication for the given Replication protected
        /// item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginRepairVMReplicationAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (replicationProtectedItemName == null)
            {
                throw new ArgumentNullException("replicationProtectedItemName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginRepairVMReplicationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/ReplicationProtectedItems/";
            url = url + Uri.EscapeDataString(replicationProtectedItemName);
            url = url + "/resyncVm";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Execute reprotect for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item name.
        /// </param>
        /// <param name='input'>
        /// Required. Reprotect input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginReprotectAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, ReverseReplicationInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (replicationProtectedItemName == null)
            {
                throw new ArgumentNullException("replicationProtectedItemName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginReprotectAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/ReplicationProtectedItems/";
            url = url + Uri.EscapeDataString(replicationProtectedItemName);
            url = url + "/reProtect";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject reverseReplicationInputValue = new JObject();
                requestDoc = reverseReplicationInputValue;
                
                if (input.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    reverseReplicationInputValue["properties"] = propertiesValue;
                    
                    if (input.Properties.FailoverDirection != null)
                    {
                        propertiesValue["failoverDirection"] = input.Properties.FailoverDirection;
                    }
                    
                    if (input.Properties.ProviderSpecificDetails != null)
                    {
                        JObject providerSpecificDetailsValue = new JObject();
                        propertiesValue["providerSpecificDetails"] = providerSpecificDetailsValue;
                        if (input.Properties.ProviderSpecificDetails is HyperVReplicaAzureReprotectInput)
                        {
                            providerSpecificDetailsValue["instanceType"] = "HyperVReplicaAzure";
                            HyperVReplicaAzureReprotectInput derived = ((HyperVReplicaAzureReprotectInput)input.Properties.ProviderSpecificDetails);
                            
                            if (derived.HvHostVmId != null)
                            {
                                providerSpecificDetailsValue["hvHostVmId"] = derived.HvHostVmId;
                            }
                            
                            if (derived.VmName != null)
                            {
                                providerSpecificDetailsValue["vmName"] = derived.VmName;
                            }
                            
                            if (derived.OSType != null)
                            {
                                providerSpecificDetailsValue["osType"] = derived.OSType;
                            }
                            
                            if (derived.VHDId != null)
                            {
                                providerSpecificDetailsValue["vHDId"] = derived.VHDId;
                            }
                            
                            if (derived.StorageAccountId != null)
                            {
                                providerSpecificDetailsValue["storageAccountId"] = derived.StorageAccountId;
                            }
                        }
                        if (input.Properties.ProviderSpecificDetails is VMwareAzureV2ReprotectInput)
                        {
                            providerSpecificDetailsValue["instanceType"] = "VMwareAzureV2";
                            VMwareAzureV2ReprotectInput derived2 = ((VMwareAzureV2ReprotectInput)input.Properties.ProviderSpecificDetails);
                            
                            if (derived2.AgentGeneratedVmId != null)
                            {
                                providerSpecificDetailsValue["agentGeneratedVmId"] = derived2.AgentGeneratedVmId;
                            }
                            
                            if (derived2.PlanName != null)
                            {
                                providerSpecificDetailsValue["planName"] = derived2.PlanName;
                            }
                            
                            if (derived2.ProcessServerId != null)
                            {
                                providerSpecificDetailsValue["processServerId"] = derived2.ProcessServerId;
                            }
                            
                            if (derived2.MasterTargetId != null)
                            {
                                providerSpecificDetailsValue["masterTargetId"] = derived2.MasterTargetId;
                            }
                            
                            if (derived2.RetentionDrive != null)
                            {
                                providerSpecificDetailsValue["retentionDrive"] = derived2.RetentionDrive;
                            }
                            
                            if (derived2.PSIpAddress != null)
                            {
                                providerSpecificDetailsValue["psIpAddress"] = derived2.PSIpAddress;
                            }
                            
                            if (derived2.UseNatIPFor != null)
                            {
                                providerSpecificDetailsValue["useNatIPFor"] = derived2.UseNatIPFor;
                            }
                            
                            if (derived2.DiskMap != null)
                            {
                                providerSpecificDetailsValue["diskMap"] = derived2.DiskMap.ToString();
                            }
                            
                            providerSpecificDetailsValue["recoveryPointThreshold"] = derived2.RecoveryPointThreshold;
                            
                            providerSpecificDetailsValue["recoveryPointHistory"] = derived2.RecoveryPointHistory;
                            
                            providerSpecificDetailsValue["appConsistentFrequency"] = derived2.AppConsistentFrequency;
                            
                            if (derived2.MultiVmSyncStatus != null)
                            {
                                providerSpecificDetailsValue["multiVmSyncStatus"] = derived2.MultiVmSyncStatus;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Execute Test failover for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item name.
        /// </param>
        /// <param name='input'>
        /// Required. Test failover input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginTestFailoverAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, TestFailoverInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (replicationProtectedItemName == null)
            {
                throw new ArgumentNullException("replicationProtectedItemName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginTestFailoverAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/ReplicationProtectedItems/";
            url = url + Uri.EscapeDataString(replicationProtectedItemName);
            url = url + "/testFailover";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject testFailoverInputValue = new JObject();
                requestDoc = testFailoverInputValue;
                
                if (input.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    testFailoverInputValue["properties"] = propertiesValue;
                    
                    if (input.Properties.FailoverDirection != null)
                    {
                        propertiesValue["failoverDirection"] = input.Properties.FailoverDirection;
                    }
                    
                    if (input.Properties.NetworkType != null)
                    {
                        propertiesValue["networkType"] = input.Properties.NetworkType;
                    }
                    
                    if (input.Properties.NetworkId != null)
                    {
                        propertiesValue["networkId"] = input.Properties.NetworkId;
                    }
                    
                    if (input.Properties.ProviderSpecificDetails != null)
                    {
                        JObject providerSpecificDetailsValue = new JObject();
                        propertiesValue["providerSpecificDetails"] = providerSpecificDetailsValue;
                        if (input.Properties.ProviderSpecificDetails is HyperVReplicaAzureFailoverProviderInput)
                        {
                            providerSpecificDetailsValue["instanceType"] = "HyperVReplicaAzure";
                            HyperVReplicaAzureFailoverProviderInput derived = ((HyperVReplicaAzureFailoverProviderInput)input.Properties.ProviderSpecificDetails);
                            
                            if (derived.VaultLocation != null)
                            {
                                providerSpecificDetailsValue["vaultLocation"] = derived.VaultLocation;
                            }
                            
                            if (derived.PrimaryKekCertificatePfx != null)
                            {
                                providerSpecificDetailsValue["primaryKekCertificatePfx"] = derived.PrimaryKekCertificatePfx;
                            }
                            
                            if (derived.SecondaryKekCertificatePfx != null)
                            {
                                providerSpecificDetailsValue["secondaryKekCertificatePfx"] = derived.SecondaryKekCertificatePfx;
                            }
                        }
                        if (input.Properties.ProviderSpecificDetails is HyperVReplicaAzureFailbackProviderInput)
                        {
                            providerSpecificDetailsValue["instanceType"] = "HyperVReplicaAzureFailback";
                            HyperVReplicaAzureFailbackProviderInput derived2 = ((HyperVReplicaAzureFailbackProviderInput)input.Properties.ProviderSpecificDetails);
                            
                            if (derived2.DataSyncOption != null)
                            {
                                providerSpecificDetailsValue["dataSyncOption"] = derived2.DataSyncOption;
                            }
                            
                            if (derived2.RecoveryVmCreationOption != null)
                            {
                                providerSpecificDetailsValue["recoveryVmCreationOption"] = derived2.RecoveryVmCreationOption;
                            }
                            
                            if (derived2.ProviderIdForAlternateRecovery != null)
                            {
                                providerSpecificDetailsValue["providerIdForAlternateRecovery"] = derived2.ProviderIdForAlternateRecovery;
                            }
                        }
                        if (input.Properties.ProviderSpecificDetails is VMWareAzureV2FailoverProviderInput)
                        {
                            providerSpecificDetailsValue["instanceType"] = "VMWareAzureV2";
                            VMWareAzureV2FailoverProviderInput derived3 = ((VMWareAzureV2FailoverProviderInput)input.Properties.ProviderSpecificDetails);
                            
                            if (derived3.VaultLocation != null)
                            {
                                providerSpecificDetailsValue["vaultLocation"] = derived3.VaultLocation;
                            }
                            
                            if (derived3.RecoveryPointId != null)
                            {
                                providerSpecificDetailsValue["recoveryPointId"] = derived3.RecoveryPointId;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Execute unplanned failover for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item name.
        /// </param>
        /// <param name='input'>
        /// Required. Unplanned failover input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginUnplannedFailoverAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, UnplannedFailoverInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (replicationProtectedItemName == null)
            {
                throw new ArgumentNullException("replicationProtectedItemName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginUnplannedFailoverAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/ReplicationProtectedItems/";
            url = url + Uri.EscapeDataString(replicationProtectedItemName);
            url = url + "/unplannedFailover";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject unplannedFailoverInputValue = new JObject();
                requestDoc = unplannedFailoverInputValue;
                
                if (input.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    unplannedFailoverInputValue["properties"] = propertiesValue;
                    
                    if (input.Properties.FailoverDirection != null)
                    {
                        propertiesValue["failoverDirection"] = input.Properties.FailoverDirection;
                    }
                    
                    if (input.Properties.SourceSiteOperations != null)
                    {
                        propertiesValue["sourceSiteOperations"] = input.Properties.SourceSiteOperations;
                    }
                    
                    if (input.Properties.ProviderSpecificDetails != null)
                    {
                        JObject providerSpecificDetailsValue = new JObject();
                        propertiesValue["ProviderSpecificDetails"] = providerSpecificDetailsValue;
                        if (input.Properties.ProviderSpecificDetails is HyperVReplicaAzureFailoverProviderInput)
                        {
                            providerSpecificDetailsValue["instanceType"] = "HyperVReplicaAzure";
                            HyperVReplicaAzureFailoverProviderInput derived = ((HyperVReplicaAzureFailoverProviderInput)input.Properties.ProviderSpecificDetails);
                            
                            if (derived.VaultLocation != null)
                            {
                                providerSpecificDetailsValue["vaultLocation"] = derived.VaultLocation;
                            }
                            
                            if (derived.PrimaryKekCertificatePfx != null)
                            {
                                providerSpecificDetailsValue["primaryKekCertificatePfx"] = derived.PrimaryKekCertificatePfx;
                            }
                            
                            if (derived.SecondaryKekCertificatePfx != null)
                            {
                                providerSpecificDetailsValue["secondaryKekCertificatePfx"] = derived.SecondaryKekCertificatePfx;
                            }
                        }
                        if (input.Properties.ProviderSpecificDetails is HyperVReplicaAzureFailbackProviderInput)
                        {
                            providerSpecificDetailsValue["instanceType"] = "HyperVReplicaAzureFailback";
                            HyperVReplicaAzureFailbackProviderInput derived2 = ((HyperVReplicaAzureFailbackProviderInput)input.Properties.ProviderSpecificDetails);
                            
                            if (derived2.DataSyncOption != null)
                            {
                                providerSpecificDetailsValue["dataSyncOption"] = derived2.DataSyncOption;
                            }
                            
                            if (derived2.RecoveryVmCreationOption != null)
                            {
                                providerSpecificDetailsValue["recoveryVmCreationOption"] = derived2.RecoveryVmCreationOption;
                            }
                            
                            if (derived2.ProviderIdForAlternateRecovery != null)
                            {
                                providerSpecificDetailsValue["providerIdForAlternateRecovery"] = derived2.ProviderIdForAlternateRecovery;
                            }
                        }
                        if (input.Properties.ProviderSpecificDetails is VMWareAzureV2FailoverProviderInput)
                        {
                            providerSpecificDetailsValue["instanceType"] = "VMWareAzureV2";
                            VMWareAzureV2FailoverProviderInput derived3 = ((VMWareAzureV2FailoverProviderInput)input.Properties.ProviderSpecificDetails);
                            
                            if (derived3.VaultLocation != null)
                            {
                                providerSpecificDetailsValue["vaultLocation"] = derived3.VaultLocation;
                            }
                            
                            if (derived3.RecoveryPointId != null)
                            {
                                providerSpecificDetailsValue["recoveryPointId"] = derived3.RecoveryPointId;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Update mobility service for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item name.
        /// </param>
        /// <param name='input'>
        /// Required. Update mobility service input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginUpdateMobilityServiceAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, UpdateMobilityServiceRequest input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (replicationProtectedItemName == null)
            {
                throw new ArgumentNullException("replicationProtectedItemName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginUpdateMobilityServiceAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/ReplicationProtectedItems/";
            url = url + Uri.EscapeDataString(replicationProtectedItemName);
            url = url + "/updateMobilityService";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject updateMobilityServiceRequestValue = new JObject();
                requestDoc = updateMobilityServiceRequestValue;
                
                if (input.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    updateMobilityServiceRequestValue["properties"] = propertiesValue;
                    
                    if (input.Properties.RunAsAccountId != null)
                    {
                        propertiesValue["runAsAccountId"] = input.Properties.RunAsAccountId;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Updates the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item name.
        /// </param>
        /// <param name='input'>
        /// Required. Updation input
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginUpdateProtectionAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, UpdateReplicationProtectedItemInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (replicationProtectedItemName == null)
            {
                throw new ArgumentNullException("replicationProtectedItemName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            if (input.Properties != null)
            {
                if (input.Properties.VmNics == null)
                {
                    throw new ArgumentNullException("input.Properties.VmNics");
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginUpdateProtectionAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/ReplicationProtectedItems/";
            url = url + Uri.EscapeDataString(replicationProtectedItemName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject updateReplicationProtectedItemInputValue = new JObject();
                requestDoc = updateReplicationProtectedItemInputValue;
                
                if (input.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    updateReplicationProtectedItemInputValue["properties"] = propertiesValue;
                    
                    if (input.Properties.RecoveryAzureVMName != null)
                    {
                        propertiesValue["recoveryAzureVMName"] = input.Properties.RecoveryAzureVMName;
                    }
                    
                    if (input.Properties.RecoveryAzureVMSize != null)
                    {
                        propertiesValue["recoveryAzureVMSize"] = input.Properties.RecoveryAzureVMSize;
                    }
                    
                    if (input.Properties.SelectedRecoveryAzureNetworkId != null)
                    {
                        propertiesValue["selectedRecoveryAzureNetworkId"] = input.Properties.SelectedRecoveryAzureNetworkId;
                    }
                    
                    if (input.Properties.VmNics != null)
                    {
                        if (input.Properties.VmNics is ILazyCollection == false || ((ILazyCollection)input.Properties.VmNics).IsInitialized)
                        {
                            JArray vmNicsArray = new JArray();
                            foreach (VMNicInputDetails vmNicsItem in input.Properties.VmNics)
                            {
                                JObject vMNicInputDetailsValue = new JObject();
                                vmNicsArray.Add(vMNicInputDetailsValue);
                                
                                if (vmNicsItem.NicId != null)
                                {
                                    vMNicInputDetailsValue["nicId"] = vmNicsItem.NicId;
                                }
                                
                                if (vmNicsItem.RecoveryVMSubnetName != null)
                                {
                                    vMNicInputDetailsValue["recoveryVMSubnetName"] = vmNicsItem.RecoveryVMSubnetName;
                                }
                                
                                if (vmNicsItem.ReplicaNicStaticIPAddress != null)
                                {
                                    vMNicInputDetailsValue["replicaNicStaticIPAddress"] = vmNicsItem.ReplicaNicStaticIPAddress;
                                }
                                
                                if (vmNicsItem.SelectionType != null)
                                {
                                    vMNicInputDetailsValue["selectionType"] = vmNicsItem.SelectionType;
                                }
                            }
                            propertiesValue["vmNics"] = vmNicsArray;
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Execute commit failover for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> CommitFailoverAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "CommitFailoverAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.ReplicationProtectedItem.BeginCommitFailoverAsync(fabricName, protectionContainerName, replicationProtectedItemName, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            ReplicationProtectedItemOperationResponse result = await client.ReplicationProtectedItem.GetCommitFailoverStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ReplicationProtectedItem.GetCommitFailoverStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Disable Protection for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item unique name.
        /// </param>
        /// <param name='input'>
        /// Required. Disable protection input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> DisableProtectionAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, DisableProtectionInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "DisableProtectionAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.ReplicationProtectedItem.BeginDisableProtectionAsync(fabricName, protectionContainerName, replicationProtectedItemName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse result = await client.ReplicationProtectedItem.GetDisableStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ReplicationProtectedItem.GetDisableStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Enable Protection for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item unique name.
        /// </param>
        /// <param name='input'>
        /// Required. Enable protection input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> EnableProtectionAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, EnableProtectionInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "EnableProtectionAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.ReplicationProtectedItem.BeginEnableProtectionAsync(fabricName, protectionContainerName, replicationProtectedItemName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            ReplicationProtectedItemOperationResponse result = await client.ReplicationProtectedItem.GetEnableStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ReplicationProtectedItem.GetEnableStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Get the replication protected object by Id.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric unique name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container unique name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item unique name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the fabric object
        /// </returns>
        public async Task<ReplicationProtectedItemResponse> GetAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (replicationProtectedItemName == null)
            {
                throw new ArgumentNullException("replicationProtectedItemName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/replicationProtectedItems/";
            url = url + Uri.EscapeDataString(replicationProtectedItemName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ReplicationProtectedItemResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ReplicationProtectedItemResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ReplicationProtectedItem replicationProtectedItemInstance = new ReplicationProtectedItem();
                            result.ReplicationProtectedItem = replicationProtectedItemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ReplicationProtectedItemProperties propertiesInstance = new ReplicationProtectedItemProperties();
                                replicationProtectedItemInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken protectedItemTypeValue = propertiesValue["protectedItemType"];
                                if (protectedItemTypeValue != null && protectedItemTypeValue.Type != JTokenType.Null)
                                {
                                    string protectedItemTypeInstance = ((string)protectedItemTypeValue);
                                    propertiesInstance.ProtectedItemType = protectedItemTypeInstance;
                                }
                                
                                JToken protectableItemIdValue = propertiesValue["protectableItemId"];
                                if (protectableItemIdValue != null && protectableItemIdValue.Type != JTokenType.Null)
                                {
                                    string protectableItemIdInstance = ((string)protectableItemIdValue);
                                    propertiesInstance.ProtectableItemId = protectableItemIdInstance;
                                }
                                
                                JToken recoveryServicesProviderIdValue = propertiesValue["recoveryServicesProviderId"];
                                if (recoveryServicesProviderIdValue != null && recoveryServicesProviderIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryServicesProviderIdInstance = ((string)recoveryServicesProviderIdValue);
                                    propertiesInstance.RecoveryServicesProviderId = recoveryServicesProviderIdInstance;
                                }
                                
                                JToken primaryFabricFriendlyNameValue = propertiesValue["primaryFabricFriendlyName"];
                                if (primaryFabricFriendlyNameValue != null && primaryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricFriendlyNameInstance = ((string)primaryFabricFriendlyNameValue);
                                    propertiesInstance.PrimaryFabricFriendlyName = primaryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricFriendlyNameValue = propertiesValue["recoveryFabricFriendlyName"];
                                if (recoveryFabricFriendlyNameValue != null && recoveryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricFriendlyNameInstance = ((string)recoveryFabricFriendlyNameValue);
                                    propertiesInstance.RecoveryFabricFriendlyName = recoveryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricIdValue = propertiesValue["recoveryFabricId"];
                                if (recoveryFabricIdValue != null && recoveryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricIdInstance = ((string)recoveryFabricIdValue);
                                    propertiesInstance.RecoveryFabricId = recoveryFabricIdInstance;
                                }
                                
                                JToken primaryProtectionContainerFriendlyNameValue = propertiesValue["primaryProtectionContainerFriendlyName"];
                                if (primaryProtectionContainerFriendlyNameValue != null && primaryProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryProtectionContainerFriendlyNameInstance = ((string)primaryProtectionContainerFriendlyNameValue);
                                    propertiesInstance.PrimaryProtectionContainerFriendlyName = primaryProtectionContainerFriendlyNameInstance;
                                }
                                
                                JToken recoveryProtectionContainerFriendlyNameValue = propertiesValue["recoveryProtectionContainerFriendlyName"];
                                if (recoveryProtectionContainerFriendlyNameValue != null && recoveryProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryProtectionContainerFriendlyNameInstance = ((string)recoveryProtectionContainerFriendlyNameValue);
                                    propertiesInstance.RecoveryProtectionContainerFriendlyName = recoveryProtectionContainerFriendlyNameInstance;
                                }
                                
                                JToken protectionStateValue = propertiesValue["protectionState"];
                                if (protectionStateValue != null && protectionStateValue.Type != JTokenType.Null)
                                {
                                    string protectionStateInstance = ((string)protectionStateValue);
                                    propertiesInstance.ProtectionState = protectionStateInstance;
                                }
                                
                                JToken protectionStateDescriptionValue = propertiesValue["protectionStateDescription"];
                                if (protectionStateDescriptionValue != null && protectionStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string protectionStateDescriptionInstance = ((string)protectionStateDescriptionValue);
                                    propertiesInstance.ProtectionStateDescription = protectionStateDescriptionInstance;
                                }
                                
                                JToken activeLocationValue = propertiesValue["activeLocation"];
                                if (activeLocationValue != null && activeLocationValue.Type != JTokenType.Null)
                                {
                                    string activeLocationInstance = ((string)activeLocationValue);
                                    propertiesInstance.ActiveLocation = activeLocationInstance;
                                }
                                
                                JToken testFailoverStateValue = propertiesValue["testFailoverState"];
                                if (testFailoverStateValue != null && testFailoverStateValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateInstance = ((string)testFailoverStateValue);
                                    propertiesInstance.TestFailoverState = testFailoverStateInstance;
                                }
                                
                                JToken testFailoverStateDescriptionValue = propertiesValue["testFailoverStateDescription"];
                                if (testFailoverStateDescriptionValue != null && testFailoverStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateDescriptionInstance = ((string)testFailoverStateDescriptionValue);
                                    propertiesInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                    }
                                }
                                
                                JToken replicationHealthValue = propertiesValue["replicationHealth"];
                                if (replicationHealthValue != null && replicationHealthValue.Type != JTokenType.Null)
                                {
                                    string replicationHealthInstance = ((string)replicationHealthValue);
                                    propertiesInstance.ReplicationHealth = replicationHealthInstance;
                                }
                                
                                JToken replicationHealthErrorsArray = propertiesValue["replicationHealthErrors"];
                                if (replicationHealthErrorsArray != null && replicationHealthErrorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken replicationHealthErrorsValue in ((JArray)replicationHealthErrorsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.ReplicationHealthErrors.Add(healthErrorInstance);
                                        
                                        JToken errorLevelValue = replicationHealthErrorsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCodeValue = replicationHealthErrorsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = replicationHealthErrorsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = replicationHealthErrorsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = replicationHealthErrorsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = replicationHealthErrorsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            string creationTimeUtcInstance = ((string)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = replicationHealthErrorsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = replicationHealthErrorsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                    }
                                }
                                
                                JToken policyIdValue = propertiesValue["policyId"];
                                if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                {
                                    string policyIdInstance = ((string)policyIdValue);
                                    propertiesInstance.PolicyID = policyIdInstance;
                                }
                                
                                JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                    propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                }
                                
                                JToken lastSuccessfulFailoverTimeValue = propertiesValue["lastSuccessfulFailoverTime"];
                                if (lastSuccessfulFailoverTimeValue != null && lastSuccessfulFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSuccessfulFailoverTimeInstance = ((DateTime)lastSuccessfulFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulFailoverTime = lastSuccessfulFailoverTimeInstance;
                                }
                                
                                JToken lastSuccessfulTestFailoverTimeValue = propertiesValue["lastSuccessfulTestFailoverTime"];
                                if (lastSuccessfulTestFailoverTimeValue != null && lastSuccessfulTestFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSuccessfulTestFailoverTimeInstance = ((DateTime)lastSuccessfulTestFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulTestFailoverTime = lastSuccessfulTestFailoverTimeInstance;
                                }
                                
                                JToken currentScenarioValue = propertiesValue["currentScenario"];
                                if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                {
                                    CurrentScenarioDetails currentScenarioInstance = new CurrentScenarioDetails();
                                    propertiesInstance.CurrentScenario = currentScenarioInstance;
                                    
                                    JToken scenarioNameValue = currentScenarioValue["scenarioName"];
                                    if (scenarioNameValue != null && scenarioNameValue.Type != JTokenType.Null)
                                    {
                                        string scenarioNameInstance = ((string)scenarioNameValue);
                                        currentScenarioInstance.ScenarioName = scenarioNameInstance;
                                    }
                                    
                                    JToken jobIdValue = currentScenarioValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        currentScenarioInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken startTimeValue = currentScenarioValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        currentScenarioInstance.StartTime = startTimeInstance;
                                    }
                                }
                                
                                JToken failoverRecoveryPointIdValue = propertiesValue["failoverRecoveryPointId"];
                                if (failoverRecoveryPointIdValue != null && failoverRecoveryPointIdValue.Type != JTokenType.Null)
                                {
                                    string failoverRecoveryPointIdInstance = ((string)failoverRecoveryPointIdValue);
                                    propertiesInstance.FailoverRecoveryPointId = failoverRecoveryPointIdInstance;
                                }
                                
                                JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                    if (typeName == "HyperVReplica2012")
                                    {
                                        HyperVReplica2012ReplicationDetails hyperVReplica2012ReplicationDetailsInstance = new HyperVReplica2012ReplicationDetails();
                                        
                                        JToken lastReplicatedTimeValue = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue != null && lastReplicatedTimeValue.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance = ((string)lastReplicatedTimeValue);
                                            hyperVReplica2012ReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance;
                                        }
                                        
                                        JToken vmNicsArray = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray != null && vmNicsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue in ((JArray)vmNicsArray))
                                            {
                                                VMNicDetails vMNicDetailsInstance = new VMNicDetails();
                                                hyperVReplica2012ReplicationDetailsInstance.VmNics.Add(vMNicDetailsInstance);
                                                
                                                JToken nicIdValue = vmNicsValue["nicId"];
                                                if (nicIdValue != null && nicIdValue.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance = ((string)nicIdValue);
                                                    vMNicDetailsInstance.NicId = nicIdInstance;
                                                }
                                                
                                                JToken vMSubnetNameValue = vmNicsValue["vMSubnetName"];
                                                if (vMSubnetNameValue != null && vMSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance = ((string)vMSubnetNameValue);
                                                    vMNicDetailsInstance.VMSubnetName = vMSubnetNameInstance;
                                                }
                                                
                                                JToken vMNetworkNameValue = vmNicsValue["vMNetworkName"];
                                                if (vMNetworkNameValue != null && vMNetworkNameValue.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance = ((string)vMNetworkNameValue);
                                                    vMNicDetailsInstance.VMNetworkName = vMNetworkNameInstance;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue = vmNicsValue["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue != null && recoveryVMNetworkIdValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance = ((string)recoveryVMNetworkIdValue);
                                                    vMNicDetailsInstance.RecoveryVMNetworkId = recoveryVMNetworkIdInstance;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue = vmNicsValue["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue != null && recoveryVMSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance = ((string)recoveryVMSubnetNameValue);
                                                    vMNicDetailsInstance.RecoveryVMSubnetName = recoveryVMSubnetNameInstance;
                                                }
                                                
                                                JToken ipAddressTypeValue = vmNicsValue["ipAddressType"];
                                                if (ipAddressTypeValue != null && ipAddressTypeValue.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance = ((string)ipAddressTypeValue);
                                                    vMNicDetailsInstance.IpAddressType = ipAddressTypeInstance;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue = vmNicsValue["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue != null && replicaNicStaticIPAddressValue.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance = ((string)replicaNicStaticIPAddressValue);
                                                    vMNicDetailsInstance.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance;
                                                }
                                                
                                                JToken selectionTypeValue = vmNicsValue["selectionType"];
                                                if (selectionTypeValue != null && selectionTypeValue.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance = ((string)selectionTypeValue);
                                                    vMNicDetailsInstance.SelectionType = selectionTypeInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken initialReplicationDetailsValue = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue != null && initialReplicationDetailsValue.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance = new InitialReplicationDetails();
                                            hyperVReplica2012ReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance;
                                            
                                            JToken initialReplicationTypeValue = initialReplicationDetailsValue["initialReplicationType"];
                                            if (initialReplicationTypeValue != null && initialReplicationTypeValue.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance = ((string)initialReplicationTypeValue);
                                                initialReplicationDetailsInstance.InitialReplicationType = initialReplicationTypeInstance;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue = initialReplicationDetailsValue["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue != null && initialReplicationProgressPercentageValue.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance = ((string)initialReplicationProgressPercentageValue);
                                                initialReplicationDetailsInstance.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance;
                                            }
                                        }
                                        
                                        JToken vMDiskDetailsArray = providerSpecificDetailsValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray != null && vMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue in ((JArray)vMDiskDetailsArray))
                                            {
                                                DiskDetails diskDetailsInstance = new DiskDetails();
                                                hyperVReplica2012ReplicationDetailsInstance.VMDiskDetails.Add(diskDetailsInstance);
                                                
                                                JToken maxSizeMBValue = vMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue != null && maxSizeMBValue.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance = ((ulong)maxSizeMBValue);
                                                    diskDetailsInstance.MaxSizeMB = maxSizeMBInstance;
                                                }
                                                
                                                JToken vhdTypeValue = vMDiskDetailsValue["vhdType"];
                                                if (vhdTypeValue != null && vhdTypeValue.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance = ((string)vhdTypeValue);
                                                    diskDetailsInstance.VhdType = vhdTypeInstance;
                                                }
                                                
                                                JToken vhdIdValue = vMDiskDetailsValue["vhdId"];
                                                if (vhdIdValue != null && vhdIdValue.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance = ((string)vhdIdValue);
                                                    diskDetailsInstance.VhdId = vhdIdInstance;
                                                }
                                                
                                                JToken vhdNameValue = vMDiskDetailsValue["vhdName"];
                                                if (vhdNameValue != null && vhdNameValue.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance = ((string)vhdNameValue);
                                                    diskDetailsInstance.VhdName = vhdNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            hyperVReplica2012ReplicationDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplica2012ReplicationDetailsInstance;
                                    }
                                    if (typeName == "HyperVReplica2012R2")
                                    {
                                        HyperVReplica2012R2ReplicationDetails hyperVReplica2012R2ReplicationDetailsInstance = new HyperVReplica2012R2ReplicationDetails();
                                        
                                        JToken lastReplicatedTimeValue2 = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue2 != null && lastReplicatedTimeValue2.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance2 = ((string)lastReplicatedTimeValue2);
                                            hyperVReplica2012R2ReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance2;
                                        }
                                        
                                        JToken vmNicsArray2 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray2 != null && vmNicsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue2 in ((JArray)vmNicsArray2))
                                            {
                                                VMNicDetails vMNicDetailsInstance2 = new VMNicDetails();
                                                hyperVReplica2012R2ReplicationDetailsInstance.VmNics.Add(vMNicDetailsInstance2);
                                                
                                                JToken nicIdValue2 = vmNicsValue2["nicId"];
                                                if (nicIdValue2 != null && nicIdValue2.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance2 = ((string)nicIdValue2);
                                                    vMNicDetailsInstance2.NicId = nicIdInstance2;
                                                }
                                                
                                                JToken vMSubnetNameValue2 = vmNicsValue2["vMSubnetName"];
                                                if (vMSubnetNameValue2 != null && vMSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance2 = ((string)vMSubnetNameValue2);
                                                    vMNicDetailsInstance2.VMSubnetName = vMSubnetNameInstance2;
                                                }
                                                
                                                JToken vMNetworkNameValue2 = vmNicsValue2["vMNetworkName"];
                                                if (vMNetworkNameValue2 != null && vMNetworkNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance2 = ((string)vMNetworkNameValue2);
                                                    vMNicDetailsInstance2.VMNetworkName = vMNetworkNameInstance2;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue2 = vmNicsValue2["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue2 != null && recoveryVMNetworkIdValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance2 = ((string)recoveryVMNetworkIdValue2);
                                                    vMNicDetailsInstance2.RecoveryVMNetworkId = recoveryVMNetworkIdInstance2;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue2 = vmNicsValue2["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue2 != null && recoveryVMSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance2 = ((string)recoveryVMSubnetNameValue2);
                                                    vMNicDetailsInstance2.RecoveryVMSubnetName = recoveryVMSubnetNameInstance2;
                                                }
                                                
                                                JToken ipAddressTypeValue2 = vmNicsValue2["ipAddressType"];
                                                if (ipAddressTypeValue2 != null && ipAddressTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance2 = ((string)ipAddressTypeValue2);
                                                    vMNicDetailsInstance2.IpAddressType = ipAddressTypeInstance2;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue2 = vmNicsValue2["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue2 != null && replicaNicStaticIPAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance2 = ((string)replicaNicStaticIPAddressValue2);
                                                    vMNicDetailsInstance2.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance2;
                                                }
                                                
                                                JToken selectionTypeValue2 = vmNicsValue2["selectionType"];
                                                if (selectionTypeValue2 != null && selectionTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance2 = ((string)selectionTypeValue2);
                                                    vMNicDetailsInstance2.SelectionType = selectionTypeInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken initialReplicationDetailsValue2 = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue2 != null && initialReplicationDetailsValue2.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance2 = new InitialReplicationDetails();
                                            hyperVReplica2012R2ReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance2;
                                            
                                            JToken initialReplicationTypeValue2 = initialReplicationDetailsValue2["initialReplicationType"];
                                            if (initialReplicationTypeValue2 != null && initialReplicationTypeValue2.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance2 = ((string)initialReplicationTypeValue2);
                                                initialReplicationDetailsInstance2.InitialReplicationType = initialReplicationTypeInstance2;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue2 = initialReplicationDetailsValue2["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue2 != null && initialReplicationProgressPercentageValue2.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance2 = ((string)initialReplicationProgressPercentageValue2);
                                                initialReplicationDetailsInstance2.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance2;
                                            }
                                        }
                                        
                                        JToken vMDiskDetailsArray2 = providerSpecificDetailsValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray2 != null && vMDiskDetailsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue2 in ((JArray)vMDiskDetailsArray2))
                                            {
                                                DiskDetails diskDetailsInstance2 = new DiskDetails();
                                                hyperVReplica2012R2ReplicationDetailsInstance.VMDiskDetails.Add(diskDetailsInstance2);
                                                
                                                JToken maxSizeMBValue2 = vMDiskDetailsValue2["maxSizeMB"];
                                                if (maxSizeMBValue2 != null && maxSizeMBValue2.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance2 = ((ulong)maxSizeMBValue2);
                                                    diskDetailsInstance2.MaxSizeMB = maxSizeMBInstance2;
                                                }
                                                
                                                JToken vhdTypeValue2 = vMDiskDetailsValue2["vhdType"];
                                                if (vhdTypeValue2 != null && vhdTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance2 = ((string)vhdTypeValue2);
                                                    diskDetailsInstance2.VhdType = vhdTypeInstance2;
                                                }
                                                
                                                JToken vhdIdValue2 = vMDiskDetailsValue2["vhdId"];
                                                if (vhdIdValue2 != null && vhdIdValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance2 = ((string)vhdIdValue2);
                                                    diskDetailsInstance2.VhdId = vhdIdInstance2;
                                                }
                                                
                                                JToken vhdNameValue2 = vMDiskDetailsValue2["vhdName"];
                                                if (vhdNameValue2 != null && vhdNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance2 = ((string)vhdNameValue2);
                                                    diskDetailsInstance2.VhdName = vhdNameInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue2 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                            hyperVReplica2012R2ReplicationDetailsInstance.InstanceType = instanceTypeInstance2;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplica2012R2ReplicationDetailsInstance;
                                    }
                                    if (typeName == "VMwareAzureV2")
                                    {
                                        VMwareAzureV2ProviderSpecificSettings vMwareAzureV2ProviderSpecificSettingsInstance = new VMwareAzureV2ProviderSpecificSettings();
                                        
                                        JToken infrastructureVmIdValue = providerSpecificDetailsValue["infrastructureVmId"];
                                        if (infrastructureVmIdValue != null && infrastructureVmIdValue.Type != JTokenType.Null)
                                        {
                                            string infrastructureVmIdInstance = ((string)infrastructureVmIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.InfrastructureVmId = infrastructureVmIdInstance;
                                        }
                                        
                                        JToken vCenterInfrastructureIdValue = providerSpecificDetailsValue["vCenterInfrastructureId"];
                                        if (vCenterInfrastructureIdValue != null && vCenterInfrastructureIdValue.Type != JTokenType.Null)
                                        {
                                            string vCenterInfrastructureIdInstance = ((string)vCenterInfrastructureIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VCenterInfrastructureId = vCenterInfrastructureIdInstance;
                                        }
                                        
                                        JToken protectionStageValue = providerSpecificDetailsValue["protectionStage"];
                                        if (protectionStageValue != null && protectionStageValue.Type != JTokenType.Null)
                                        {
                                            string protectionStageInstance = ((string)protectionStageValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ProtectionStage = protectionStageInstance;
                                        }
                                        
                                        JToken healthErrorCodeValue = providerSpecificDetailsValue["healthErrorCode"];
                                        if (healthErrorCodeValue != null && healthErrorCodeValue.Type != JTokenType.Null)
                                        {
                                            string healthErrorCodeInstance = ((string)healthErrorCodeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.HealthErrorCode = healthErrorCodeInstance;
                                        }
                                        
                                        JToken resyncRequiredValue = providerSpecificDetailsValue["resyncRequired"];
                                        if (resyncRequiredValue != null && resyncRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool resyncRequiredInstance = ((bool)resyncRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ResyncRequired = resyncRequiredInstance;
                                        }
                                        
                                        JToken resyncProgressPercentageValue = providerSpecificDetailsValue["resyncProgressPercentage"];
                                        if (resyncProgressPercentageValue != null && resyncProgressPercentageValue.Type != JTokenType.Null)
                                        {
                                            int resyncProgressPercentageInstance = ((int)resyncProgressPercentageValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ResyncProgressPercentage = resyncProgressPercentageInstance;
                                        }
                                        
                                        JToken rpoInSecondsValue = providerSpecificDetailsValue["rpoInSeconds"];
                                        if (rpoInSecondsValue != null && rpoInSecondsValue.Type != JTokenType.Null)
                                        {
                                            long rpoInSecondsInstance = ((long)rpoInSecondsValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RpoInSeconds = rpoInSecondsInstance;
                                        }
                                        
                                        JToken compressedDataRateInMBValue = providerSpecificDetailsValue["compressedDataRateInMB"];
                                        if (compressedDataRateInMBValue != null && compressedDataRateInMBValue.Type != JTokenType.Null)
                                        {
                                            double compressedDataRateInMBInstance = ((double)compressedDataRateInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.CompressedDataRateInMB = compressedDataRateInMBInstance;
                                        }
                                        
                                        JToken uncompressedDataRateInMBValue = providerSpecificDetailsValue["uncompressedDataRateInMB"];
                                        if (uncompressedDataRateInMBValue != null && uncompressedDataRateInMBValue.Type != JTokenType.Null)
                                        {
                                            double uncompressedDataRateInMBInstance = ((double)uncompressedDataRateInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.UncompressedDataRateInMB = uncompressedDataRateInMBInstance;
                                        }
                                        
                                        JToken ipAddressValue = providerSpecificDetailsValue["ipAddress"];
                                        if (ipAddressValue != null && ipAddressValue.Type != JTokenType.Null)
                                        {
                                            string ipAddressInstance = ((string)ipAddressValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IpAddress = ipAddressInstance;
                                        }
                                        
                                        JToken agentVersionValue = providerSpecificDetailsValue["agentVersion"];
                                        if (agentVersionValue != null && agentVersionValue.Type != JTokenType.Null)
                                        {
                                            string agentVersionInstance = ((string)agentVersionValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.AgentVersion = agentVersionInstance;
                                        }
                                        
                                        JToken latestUpdateVersionValue = providerSpecificDetailsValue["latestUpdateVersion"];
                                        if (latestUpdateVersionValue != null && latestUpdateVersionValue.Type != JTokenType.Null)
                                        {
                                            string latestUpdateVersionInstance = ((string)latestUpdateVersionValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.LatestUpdateVersion = latestUpdateVersionInstance;
                                        }
                                        
                                        JToken isAgentUpdateRequiredValue = providerSpecificDetailsValue["isAgentUpdateRequired"];
                                        if (isAgentUpdateRequiredValue != null && isAgentUpdateRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool isAgentUpdateRequiredInstance = ((bool)isAgentUpdateRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IsAgentUpdateRequired = isAgentUpdateRequiredInstance;
                                        }
                                        
                                        JToken isRebootAfterUpdateRequiredValue = providerSpecificDetailsValue["isRebootAfterUpdateRequired"];
                                        if (isRebootAfterUpdateRequiredValue != null && isRebootAfterUpdateRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool isRebootAfterUpdateRequiredInstance = ((bool)isRebootAfterUpdateRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IsRebootAfterUpdateRequired = isRebootAfterUpdateRequiredInstance;
                                        }
                                        
                                        JToken lastHeartbeatValue = providerSpecificDetailsValue["lastHeartbeat"];
                                        if (lastHeartbeatValue != null && lastHeartbeatValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastHeartbeatInstance = ((DateTime)lastHeartbeatValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.LastHeartbeat = lastHeartbeatInstance;
                                        }
                                        
                                        JToken processServerIdValue = providerSpecificDetailsValue["processServerId"];
                                        if (processServerIdValue != null && processServerIdValue.Type != JTokenType.Null)
                                        {
                                            string processServerIdInstance = ((string)processServerIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ProcessServerId = processServerIdInstance;
                                        }
                                        
                                        JToken multiVmGroupIdValue = providerSpecificDetailsValue["multiVmGroupId"];
                                        if (multiVmGroupIdValue != null && multiVmGroupIdValue.Type != JTokenType.Null)
                                        {
                                            string multiVmGroupIdInstance = ((string)multiVmGroupIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MultiVmGroupId = multiVmGroupIdInstance;
                                        }
                                        
                                        JToken multiVmGroupNameValue = providerSpecificDetailsValue["multiVmGroupName"];
                                        if (multiVmGroupNameValue != null && multiVmGroupNameValue.Type != JTokenType.Null)
                                        {
                                            string multiVmGroupNameInstance = ((string)multiVmGroupNameValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MultiVmGroupName = multiVmGroupNameInstance;
                                        }
                                        
                                        JToken protectedVolumesArray = providerSpecificDetailsValue["protectedVolumes"];
                                        if (protectedVolumesArray != null && protectedVolumesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken protectedVolumesValue in ((JArray)protectedVolumesArray))
                                            {
                                                VMwareAzureV2ProtectedVolumeDetails vMwareAzureV2ProtectedVolumeDetailsInstance = new VMwareAzureV2ProtectedVolumeDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.ProtectedVolumes.Add(vMwareAzureV2ProtectedVolumeDetailsInstance);
                                                
                                                JToken nameValue = protectedVolumesValue["name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.Name = nameInstance;
                                                }
                                                
                                                JToken protectionStageValue2 = protectedVolumesValue["protectionStage"];
                                                if (protectionStageValue2 != null && protectionStageValue2.Type != JTokenType.Null)
                                                {
                                                    string protectionStageInstance2 = ((string)protectionStageValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ProtectionStage = protectionStageInstance2;
                                                }
                                                
                                                JToken healthErrorCodeValue2 = protectedVolumesValue["healthErrorCode"];
                                                if (healthErrorCodeValue2 != null && healthErrorCodeValue2.Type != JTokenType.Null)
                                                {
                                                    string healthErrorCodeInstance2 = ((string)healthErrorCodeValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.HealthErrorCode = healthErrorCodeInstance2;
                                                }
                                                
                                                JToken rpoInSecondsValue2 = protectedVolumesValue["rpoInSeconds"];
                                                if (rpoInSecondsValue2 != null && rpoInSecondsValue2.Type != JTokenType.Null)
                                                {
                                                    long rpoInSecondsInstance2 = ((long)rpoInSecondsValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.RpoInSeconds = rpoInSecondsInstance2;
                                                }
                                                
                                                JToken resyncRequiredValue2 = protectedVolumesValue["resyncRequired"];
                                                if (resyncRequiredValue2 != null && resyncRequiredValue2.Type != JTokenType.Null)
                                                {
                                                    bool resyncRequiredInstance2 = ((bool)resyncRequiredValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncRequired = resyncRequiredInstance2;
                                                }
                                                
                                                JToken resyncProgressPercentageValue2 = protectedVolumesValue["resyncProgressPercentage"];
                                                if (resyncProgressPercentageValue2 != null && resyncProgressPercentageValue2.Type != JTokenType.Null)
                                                {
                                                    int resyncProgressPercentageInstance2 = ((int)resyncProgressPercentageValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncProgressPercentage = resyncProgressPercentageInstance2;
                                                }
                                                
                                                JToken resyncDurationInSecondsValue = protectedVolumesValue["resyncDurationInSeconds"];
                                                if (resyncDurationInSecondsValue != null && resyncDurationInSecondsValue.Type != JTokenType.Null)
                                                {
                                                    long resyncDurationInSecondsInstance = ((long)resyncDurationInSecondsValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncDurationInSeconds = resyncDurationInSecondsInstance;
                                                }
                                                
                                                JToken volumeCapacityInBytesValue = protectedVolumesValue["volumeCapacityInBytes"];
                                                if (volumeCapacityInBytesValue != null && volumeCapacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long volumeCapacityInBytesInstance = ((long)volumeCapacityInBytesValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.VolumeCapacityInBytes = volumeCapacityInBytesInstance;
                                                }
                                                
                                                JToken fileSystemCapacityInBytesValue = protectedVolumesValue["fileSystemCapacityInBytes"];
                                                if (fileSystemCapacityInBytesValue != null && fileSystemCapacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long fileSystemCapacityInBytesInstance = ((long)fileSystemCapacityInBytesValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.FileSystemCapacityInBytes = fileSystemCapacityInBytesInstance;
                                                }
                                                
                                                JToken sourceDataInMBValue = protectedVolumesValue["sourceDataInMB"];
                                                if (sourceDataInMBValue != null && sourceDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double sourceDataInMBInstance = ((double)sourceDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.SourceDataInMB = sourceDataInMBInstance;
                                                }
                                                
                                                JToken psDataInMBValue = protectedVolumesValue["psDataInMB"];
                                                if (psDataInMBValue != null && psDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double psDataInMBInstance = ((double)psDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.PSDataInMB = psDataInMBInstance;
                                                }
                                                
                                                JToken targetDataInMBValue = protectedVolumesValue["targetDataInMB"];
                                                if (targetDataInMBValue != null && targetDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double targetDataInMBInstance = ((double)targetDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.TargetDataInMB = targetDataInMBInstance;
                                                }
                                                
                                                JToken volumeResizedValue = protectedVolumesValue["volumeResized"];
                                                if (volumeResizedValue != null && volumeResizedValue.Type != JTokenType.Null)
                                                {
                                                    bool volumeResizedInstance = ((bool)volumeResizedValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.VolumeResized = volumeResizedInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken volumeResizedValue2 = providerSpecificDetailsValue["volumeResized"];
                                        if (volumeResizedValue2 != null && volumeResizedValue2.Type != JTokenType.Null)
                                        {
                                            bool volumeResizedInstance2 = ((bool)volumeResizedValue2);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VolumeResized = volumeResizedInstance2;
                                        }
                                        
                                        JToken masterTargetIdValue = providerSpecificDetailsValue["masterTargetId"];
                                        if (masterTargetIdValue != null && masterTargetIdValue.Type != JTokenType.Null)
                                        {
                                            string masterTargetIdInstance = ((string)masterTargetIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MasterTargetId = masterTargetIdInstance;
                                        }
                                        
                                        JToken sourceVmCPUCountValue = providerSpecificDetailsValue["sourceVmCPUCount"];
                                        if (sourceVmCPUCountValue != null && sourceVmCPUCountValue.Type != JTokenType.Null)
                                        {
                                            int sourceVmCPUCountInstance = ((int)sourceVmCPUCountValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SourceVmCPUCount = sourceVmCPUCountInstance;
                                        }
                                        
                                        JToken sourceVmRAMSizeInMBValue = providerSpecificDetailsValue["sourceVmRAMSizeInMB"];
                                        if (sourceVmRAMSizeInMBValue != null && sourceVmRAMSizeInMBValue.Type != JTokenType.Null)
                                        {
                                            int sourceVmRAMSizeInMBInstance = ((int)sourceVmRAMSizeInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SourceVmRAMSizeInMB = sourceVmRAMSizeInMBInstance;
                                        }
                                        
                                        JToken osTypeValue = providerSpecificDetailsValue["osType"];
                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance = ((string)osTypeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.OSType = osTypeInstance;
                                        }
                                        
                                        JToken vhdNameValue3 = providerSpecificDetailsValue["vhdName"];
                                        if (vhdNameValue3 != null && vhdNameValue3.Type != JTokenType.Null)
                                        {
                                            string vhdNameInstance3 = ((string)vhdNameValue3);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VHDName = vhdNameInstance3;
                                        }
                                        
                                        JToken osDiskIdValue = providerSpecificDetailsValue["osDiskId"];
                                        if (osDiskIdValue != null && osDiskIdValue.Type != JTokenType.Null)
                                        {
                                            string osDiskIdInstance = ((string)osDiskIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.OSDiskId = osDiskIdInstance;
                                        }
                                        
                                        JToken azureVMDiskDetailsArray = providerSpecificDetailsValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsArray != null && azureVMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken azureVMDiskDetailsValue in ((JArray)azureVMDiskDetailsArray))
                                            {
                                                AzureVmDiskDetails azureVmDiskDetailsInstance = new AzureVmDiskDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.AzureVMDiskDetails.Add(azureVmDiskDetailsInstance);
                                                
                                                JToken vhdTypeValue3 = azureVMDiskDetailsValue["vhdType"];
                                                if (vhdTypeValue3 != null && vhdTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance3 = ((string)vhdTypeValue3);
                                                    azureVmDiskDetailsInstance.VhdType = vhdTypeInstance3;
                                                }
                                                
                                                JToken vhdIdValue3 = azureVMDiskDetailsValue["vhdId"];
                                                if (vhdIdValue3 != null && vhdIdValue3.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance3 = ((string)vhdIdValue3);
                                                    azureVmDiskDetailsInstance.VhdId = vhdIdInstance3;
                                                }
                                                
                                                JToken vhdNameValue4 = azureVMDiskDetailsValue["vhdName"];
                                                if (vhdNameValue4 != null && vhdNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance4 = ((string)vhdNameValue4);
                                                    azureVmDiskDetailsInstance.VhdName = vhdNameInstance4;
                                                }
                                                
                                                JToken maxSizeMBValue3 = azureVMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue3 != null && maxSizeMBValue3.Type != JTokenType.Null)
                                                {
                                                    string maxSizeMBInstance3 = ((string)maxSizeMBValue3);
                                                    azureVmDiskDetailsInstance.MaxSizeMB = maxSizeMBInstance3;
                                                }
                                                
                                                JToken targetDiskLocationValue = azureVMDiskDetailsValue["targetDiskLocation"];
                                                if (targetDiskLocationValue != null && targetDiskLocationValue.Type != JTokenType.Null)
                                                {
                                                    string targetDiskLocationInstance = ((string)targetDiskLocationValue);
                                                    azureVmDiskDetailsInstance.TargetDiskLocation = targetDiskLocationInstance;
                                                }
                                                
                                                JToken lunIdValue = azureVMDiskDetailsValue["lunId"];
                                                if (lunIdValue != null && lunIdValue.Type != JTokenType.Null)
                                                {
                                                    string lunIdInstance = ((string)lunIdValue);
                                                    azureVmDiskDetailsInstance.LunId = lunIdInstance;
                                                }
                                                
                                                JToken targetDiskNameValue = azureVMDiskDetailsValue["targetDiskName"];
                                                if (targetDiskNameValue != null && targetDiskNameValue.Type != JTokenType.Null)
                                                {
                                                    string targetDiskNameInstance = ((string)targetDiskNameValue);
                                                    azureVmDiskDetailsInstance.TargetDiskName = targetDiskNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue = providerSpecificDetailsValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue != null && recoveryAzureVMNameValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance = ((string)recoveryAzureVMNameValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue = providerSpecificDetailsValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue != null && recoveryAzureVMSizeValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance = ((string)recoveryAzureVMSizeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance;
                                        }
                                        
                                        JToken recoveryAzureStorageAccountValue = providerSpecificDetailsValue["recoveryAzureStorageAccount"];
                                        if (recoveryAzureStorageAccountValue != null && recoveryAzureStorageAccountValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureStorageAccountInstance = ((string)recoveryAzureStorageAccountValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureStorageAccount = recoveryAzureStorageAccountInstance;
                                        }
                                        
                                        JToken vmNicsArray3 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray3 != null && vmNicsArray3.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue3 in ((JArray)vmNicsArray3))
                                            {
                                                VMNicDetails vMNicDetailsInstance3 = new VMNicDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.VMNics.Add(vMNicDetailsInstance3);
                                                
                                                JToken nicIdValue3 = vmNicsValue3["nicId"];
                                                if (nicIdValue3 != null && nicIdValue3.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance3 = ((string)nicIdValue3);
                                                    vMNicDetailsInstance3.NicId = nicIdInstance3;
                                                }
                                                
                                                JToken vMSubnetNameValue3 = vmNicsValue3["vMSubnetName"];
                                                if (vMSubnetNameValue3 != null && vMSubnetNameValue3.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance3 = ((string)vMSubnetNameValue3);
                                                    vMNicDetailsInstance3.VMSubnetName = vMSubnetNameInstance3;
                                                }
                                                
                                                JToken vMNetworkNameValue3 = vmNicsValue3["vMNetworkName"];
                                                if (vMNetworkNameValue3 != null && vMNetworkNameValue3.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance3 = ((string)vMNetworkNameValue3);
                                                    vMNicDetailsInstance3.VMNetworkName = vMNetworkNameInstance3;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue3 = vmNicsValue3["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue3 != null && recoveryVMNetworkIdValue3.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance3 = ((string)recoveryVMNetworkIdValue3);
                                                    vMNicDetailsInstance3.RecoveryVMNetworkId = recoveryVMNetworkIdInstance3;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue3 = vmNicsValue3["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue3 != null && recoveryVMSubnetNameValue3.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance3 = ((string)recoveryVMSubnetNameValue3);
                                                    vMNicDetailsInstance3.RecoveryVMSubnetName = recoveryVMSubnetNameInstance3;
                                                }
                                                
                                                JToken ipAddressTypeValue3 = vmNicsValue3["ipAddressType"];
                                                if (ipAddressTypeValue3 != null && ipAddressTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance3 = ((string)ipAddressTypeValue3);
                                                    vMNicDetailsInstance3.IpAddressType = ipAddressTypeInstance3;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue3 = vmNicsValue3["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue3 != null && replicaNicStaticIPAddressValue3.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance3 = ((string)replicaNicStaticIPAddressValue3);
                                                    vMNicDetailsInstance3.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance3;
                                                }
                                                
                                                JToken selectionTypeValue3 = vmNicsValue3["selectionType"];
                                                if (selectionTypeValue3 != null && selectionTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance3 = ((string)selectionTypeValue3);
                                                    vMNicDetailsInstance3.SelectionType = selectionTypeInstance3;
                                                }
                                            }
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue = providerSpecificDetailsValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue != null && selectedRecoveryAzureNetworkIdValue.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance = ((string)selectedRecoveryAzureNetworkIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance;
                                        }
                                        
                                        JToken discoveryTypeValue = providerSpecificDetailsValue["discoveryType"];
                                        if (discoveryTypeValue != null && discoveryTypeValue.Type != JTokenType.Null)
                                        {
                                            string discoveryTypeInstance = ((string)discoveryTypeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.DiscoveryType = discoveryTypeInstance;
                                        }
                                        
                                        JToken instanceTypeValue3 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.InstanceType = instanceTypeInstance3;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = vMwareAzureV2ProviderSpecificSettingsInstance;
                                    }
                                    if (typeName == "HyperVReplicaAzure")
                                    {
                                        HyperVReplicaAzureReplicationDetails hyperVReplicaAzureReplicationDetailsInstance = new HyperVReplicaAzureReplicationDetails();
                                        
                                        JToken azureVMDiskDetailsArray2 = providerSpecificDetailsValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsArray2 != null && azureVMDiskDetailsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken azureVMDiskDetailsValue2 in ((JArray)azureVMDiskDetailsArray2))
                                            {
                                                AzureVmDiskDetails azureVmDiskDetailsInstance2 = new AzureVmDiskDetails();
                                                hyperVReplicaAzureReplicationDetailsInstance.AzureVMDiskDetails.Add(azureVmDiskDetailsInstance2);
                                                
                                                JToken vhdTypeValue4 = azureVMDiskDetailsValue2["vhdType"];
                                                if (vhdTypeValue4 != null && vhdTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance4 = ((string)vhdTypeValue4);
                                                    azureVmDiskDetailsInstance2.VhdType = vhdTypeInstance4;
                                                }
                                                
                                                JToken vhdIdValue4 = azureVMDiskDetailsValue2["vhdId"];
                                                if (vhdIdValue4 != null && vhdIdValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance4 = ((string)vhdIdValue4);
                                                    azureVmDiskDetailsInstance2.VhdId = vhdIdInstance4;
                                                }
                                                
                                                JToken vhdNameValue5 = azureVMDiskDetailsValue2["vhdName"];
                                                if (vhdNameValue5 != null && vhdNameValue5.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance5 = ((string)vhdNameValue5);
                                                    azureVmDiskDetailsInstance2.VhdName = vhdNameInstance5;
                                                }
                                                
                                                JToken maxSizeMBValue4 = azureVMDiskDetailsValue2["maxSizeMB"];
                                                if (maxSizeMBValue4 != null && maxSizeMBValue4.Type != JTokenType.Null)
                                                {
                                                    string maxSizeMBInstance4 = ((string)maxSizeMBValue4);
                                                    azureVmDiskDetailsInstance2.MaxSizeMB = maxSizeMBInstance4;
                                                }
                                                
                                                JToken targetDiskLocationValue2 = azureVMDiskDetailsValue2["targetDiskLocation"];
                                                if (targetDiskLocationValue2 != null && targetDiskLocationValue2.Type != JTokenType.Null)
                                                {
                                                    string targetDiskLocationInstance2 = ((string)targetDiskLocationValue2);
                                                    azureVmDiskDetailsInstance2.TargetDiskLocation = targetDiskLocationInstance2;
                                                }
                                                
                                                JToken lunIdValue2 = azureVMDiskDetailsValue2["lunId"];
                                                if (lunIdValue2 != null && lunIdValue2.Type != JTokenType.Null)
                                                {
                                                    string lunIdInstance2 = ((string)lunIdValue2);
                                                    azureVmDiskDetailsInstance2.LunId = lunIdInstance2;
                                                }
                                                
                                                JToken targetDiskNameValue2 = azureVMDiskDetailsValue2["targetDiskName"];
                                                if (targetDiskNameValue2 != null && targetDiskNameValue2.Type != JTokenType.Null)
                                                {
                                                    string targetDiskNameInstance2 = ((string)targetDiskNameValue2);
                                                    azureVmDiskDetailsInstance2.TargetDiskName = targetDiskNameInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue2 = providerSpecificDetailsValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue2 != null && recoveryAzureVMNameValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance2 = ((string)recoveryAzureVMNameValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance2;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue2 = providerSpecificDetailsValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue2 != null && recoveryAzureVMSizeValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance2 = ((string)recoveryAzureVMSizeValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance2;
                                        }
                                        
                                        JToken recoveryAzureStorageAccountValue2 = providerSpecificDetailsValue["recoveryAzureStorageAccount"];
                                        if (recoveryAzureStorageAccountValue2 != null && recoveryAzureStorageAccountValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureStorageAccountInstance2 = ((string)recoveryAzureStorageAccountValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureStorageAccount = recoveryAzureStorageAccountInstance2;
                                        }
                                        
                                        JToken lastReplicatedTimeValue3 = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue3 != null && lastReplicatedTimeValue3.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance3 = ((string)lastReplicatedTimeValue3);
                                            hyperVReplicaAzureReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance3;
                                        }
                                        
                                        JToken initialReplicationDetailsValue3 = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue3 != null && initialReplicationDetailsValue3.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance3 = new InitialReplicationDetails();
                                            hyperVReplicaAzureReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance3;
                                            
                                            JToken initialReplicationTypeValue3 = initialReplicationDetailsValue3["initialReplicationType"];
                                            if (initialReplicationTypeValue3 != null && initialReplicationTypeValue3.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance3 = ((string)initialReplicationTypeValue3);
                                                initialReplicationDetailsInstance3.InitialReplicationType = initialReplicationTypeInstance3;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue3 = initialReplicationDetailsValue3["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue3 != null && initialReplicationProgressPercentageValue3.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance3 = ((string)initialReplicationProgressPercentageValue3);
                                                initialReplicationDetailsInstance3.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance3;
                                            }
                                        }
                                        
                                        JToken vmNicsArray4 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray4 != null && vmNicsArray4.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue4 in ((JArray)vmNicsArray4))
                                            {
                                                VMNicDetails vMNicDetailsInstance4 = new VMNicDetails();
                                                hyperVReplicaAzureReplicationDetailsInstance.VMNics.Add(vMNicDetailsInstance4);
                                                
                                                JToken nicIdValue4 = vmNicsValue4["nicId"];
                                                if (nicIdValue4 != null && nicIdValue4.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance4 = ((string)nicIdValue4);
                                                    vMNicDetailsInstance4.NicId = nicIdInstance4;
                                                }
                                                
                                                JToken vMSubnetNameValue4 = vmNicsValue4["vMSubnetName"];
                                                if (vMSubnetNameValue4 != null && vMSubnetNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance4 = ((string)vMSubnetNameValue4);
                                                    vMNicDetailsInstance4.VMSubnetName = vMSubnetNameInstance4;
                                                }
                                                
                                                JToken vMNetworkNameValue4 = vmNicsValue4["vMNetworkName"];
                                                if (vMNetworkNameValue4 != null && vMNetworkNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance4 = ((string)vMNetworkNameValue4);
                                                    vMNicDetailsInstance4.VMNetworkName = vMNetworkNameInstance4;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue4 = vmNicsValue4["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue4 != null && recoveryVMNetworkIdValue4.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance4 = ((string)recoveryVMNetworkIdValue4);
                                                    vMNicDetailsInstance4.RecoveryVMNetworkId = recoveryVMNetworkIdInstance4;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue4 = vmNicsValue4["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue4 != null && recoveryVMSubnetNameValue4.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance4 = ((string)recoveryVMSubnetNameValue4);
                                                    vMNicDetailsInstance4.RecoveryVMSubnetName = recoveryVMSubnetNameInstance4;
                                                }
                                                
                                                JToken ipAddressTypeValue4 = vmNicsValue4["ipAddressType"];
                                                if (ipAddressTypeValue4 != null && ipAddressTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance4 = ((string)ipAddressTypeValue4);
                                                    vMNicDetailsInstance4.IpAddressType = ipAddressTypeInstance4;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue4 = vmNicsValue4["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue4 != null && replicaNicStaticIPAddressValue4.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance4 = ((string)replicaNicStaticIPAddressValue4);
                                                    vMNicDetailsInstance4.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance4;
                                                }
                                                
                                                JToken selectionTypeValue4 = vmNicsValue4["selectionType"];
                                                if (selectionTypeValue4 != null && selectionTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance4 = ((string)selectionTypeValue4);
                                                    vMNicDetailsInstance4.SelectionType = selectionTypeInstance4;
                                                }
                                            }
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue2 = providerSpecificDetailsValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue2 != null && selectedRecoveryAzureNetworkIdValue2.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance2 = ((string)selectedRecoveryAzureNetworkIdValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance2;
                                        }
                                        
                                        JToken encryptionValue = providerSpecificDetailsValue["encryption"];
                                        if (encryptionValue != null && encryptionValue.Type != JTokenType.Null)
                                        {
                                            string encryptionInstance = ((string)encryptionValue);
                                            hyperVReplicaAzureReplicationDetailsInstance.Encryption = encryptionInstance;
                                        }
                                        
                                        JToken oSDetailsValue = providerSpecificDetailsValue["oSDetails"];
                                        if (oSDetailsValue != null && oSDetailsValue.Type != JTokenType.Null)
                                        {
                                            OSDetails oSDetailsInstance = new OSDetails();
                                            hyperVReplicaAzureReplicationDetailsInstance.OSDetails = oSDetailsInstance;
                                            
                                            JToken osTypeValue2 = oSDetailsValue["osType"];
                                            if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                            {
                                                string osTypeInstance2 = ((string)osTypeValue2);
                                                oSDetailsInstance.OsType = osTypeInstance2;
                                            }
                                            
                                            JToken productTypeValue = oSDetailsValue["productType"];
                                            if (productTypeValue != null && productTypeValue.Type != JTokenType.Null)
                                            {
                                                string productTypeInstance = ((string)productTypeValue);
                                                oSDetailsInstance.ProductType = productTypeInstance;
                                            }
                                            
                                            JToken osEditionValue = oSDetailsValue["osEdition"];
                                            if (osEditionValue != null && osEditionValue.Type != JTokenType.Null)
                                            {
                                                string osEditionInstance = ((string)osEditionValue);
                                                oSDetailsInstance.OSEdition = osEditionInstance;
                                            }
                                            
                                            JToken oSVersionValue = oSDetailsValue["oSVersion"];
                                            if (oSVersionValue != null && oSVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSVersionInstance = ((string)oSVersionValue);
                                                oSDetailsInstance.OSVersion = oSVersionInstance;
                                            }
                                            
                                            JToken oSMajorVersionValue = oSDetailsValue["oSMajorVersion"];
                                            if (oSMajorVersionValue != null && oSMajorVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSMajorVersionInstance = ((string)oSMajorVersionValue);
                                                oSDetailsInstance.OSMajorVersion = oSMajorVersionInstance;
                                            }
                                            
                                            JToken oSMinorVersionValue = oSDetailsValue["oSMinorVersion"];
                                            if (oSMinorVersionValue != null && oSMinorVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSMinorVersionInstance = ((string)oSMinorVersionValue);
                                                oSDetailsInstance.OSMinorVersion = oSMinorVersionInstance;
                                            }
                                        }
                                        
                                        JToken sourceVmRAMSizeInMBValue2 = providerSpecificDetailsValue["sourceVmRAMSizeInMB"];
                                        if (sourceVmRAMSizeInMBValue2 != null && sourceVmRAMSizeInMBValue2.Type != JTokenType.Null)
                                        {
                                            int sourceVmRAMSizeInMBInstance2 = ((int)sourceVmRAMSizeInMBValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SourceVmRAMSizeInMB = sourceVmRAMSizeInMBInstance2;
                                        }
                                        
                                        JToken sourceVmCPUCountValue2 = providerSpecificDetailsValue["sourceVmCPUCount"];
                                        if (sourceVmCPUCountValue2 != null && sourceVmCPUCountValue2.Type != JTokenType.Null)
                                        {
                                            int sourceVmCPUCountInstance2 = ((int)sourceVmCPUCountValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SourceVmCPUCount = sourceVmCPUCountInstance2;
                                        }
                                        
                                        JToken instanceTypeValue4 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue4 != null && instanceTypeValue4.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance4 = ((string)instanceTypeValue4);
                                            hyperVReplicaAzureReplicationDetailsInstance.InstanceType = instanceTypeInstance4;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplicaAzureReplicationDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                replicationProtectedItemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                replicationProtectedItemInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                replicationProtectedItemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                replicationProtectedItemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    replicationProtectedItemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Service response for replication protected items operation.
        /// </returns>
        public async Task<ReplicationProtectedItemOperationResponse> GetApplyRecoveryPointStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetApplyRecoveryPointStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ReplicationProtectedItemOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ReplicationProtectedItemOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ReplicationProtectedItem replicationProtectedItemInstance = new ReplicationProtectedItem();
                            result.ReplicationProtectedItem = replicationProtectedItemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ReplicationProtectedItemProperties propertiesInstance = new ReplicationProtectedItemProperties();
                                replicationProtectedItemInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken protectedItemTypeValue = propertiesValue["protectedItemType"];
                                if (protectedItemTypeValue != null && protectedItemTypeValue.Type != JTokenType.Null)
                                {
                                    string protectedItemTypeInstance = ((string)protectedItemTypeValue);
                                    propertiesInstance.ProtectedItemType = protectedItemTypeInstance;
                                }
                                
                                JToken protectableItemIdValue = propertiesValue["protectableItemId"];
                                if (protectableItemIdValue != null && protectableItemIdValue.Type != JTokenType.Null)
                                {
                                    string protectableItemIdInstance = ((string)protectableItemIdValue);
                                    propertiesInstance.ProtectableItemId = protectableItemIdInstance;
                                }
                                
                                JToken recoveryServicesProviderIdValue = propertiesValue["recoveryServicesProviderId"];
                                if (recoveryServicesProviderIdValue != null && recoveryServicesProviderIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryServicesProviderIdInstance = ((string)recoveryServicesProviderIdValue);
                                    propertiesInstance.RecoveryServicesProviderId = recoveryServicesProviderIdInstance;
                                }
                                
                                JToken primaryFabricFriendlyNameValue = propertiesValue["primaryFabricFriendlyName"];
                                if (primaryFabricFriendlyNameValue != null && primaryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricFriendlyNameInstance = ((string)primaryFabricFriendlyNameValue);
                                    propertiesInstance.PrimaryFabricFriendlyName = primaryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricFriendlyNameValue = propertiesValue["recoveryFabricFriendlyName"];
                                if (recoveryFabricFriendlyNameValue != null && recoveryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricFriendlyNameInstance = ((string)recoveryFabricFriendlyNameValue);
                                    propertiesInstance.RecoveryFabricFriendlyName = recoveryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricIdValue = propertiesValue["recoveryFabricId"];
                                if (recoveryFabricIdValue != null && recoveryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricIdInstance = ((string)recoveryFabricIdValue);
                                    propertiesInstance.RecoveryFabricId = recoveryFabricIdInstance;
                                }
                                
                                JToken primaryProtectionContainerFriendlyNameValue = propertiesValue["primaryProtectionContainerFriendlyName"];
                                if (primaryProtectionContainerFriendlyNameValue != null && primaryProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryProtectionContainerFriendlyNameInstance = ((string)primaryProtectionContainerFriendlyNameValue);
                                    propertiesInstance.PrimaryProtectionContainerFriendlyName = primaryProtectionContainerFriendlyNameInstance;
                                }
                                
                                JToken recoveryProtectionContainerFriendlyNameValue = propertiesValue["recoveryProtectionContainerFriendlyName"];
                                if (recoveryProtectionContainerFriendlyNameValue != null && recoveryProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryProtectionContainerFriendlyNameInstance = ((string)recoveryProtectionContainerFriendlyNameValue);
                                    propertiesInstance.RecoveryProtectionContainerFriendlyName = recoveryProtectionContainerFriendlyNameInstance;
                                }
                                
                                JToken protectionStateValue = propertiesValue["protectionState"];
                                if (protectionStateValue != null && protectionStateValue.Type != JTokenType.Null)
                                {
                                    string protectionStateInstance = ((string)protectionStateValue);
                                    propertiesInstance.ProtectionState = protectionStateInstance;
                                }
                                
                                JToken protectionStateDescriptionValue = propertiesValue["protectionStateDescription"];
                                if (protectionStateDescriptionValue != null && protectionStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string protectionStateDescriptionInstance = ((string)protectionStateDescriptionValue);
                                    propertiesInstance.ProtectionStateDescription = protectionStateDescriptionInstance;
                                }
                                
                                JToken activeLocationValue = propertiesValue["activeLocation"];
                                if (activeLocationValue != null && activeLocationValue.Type != JTokenType.Null)
                                {
                                    string activeLocationInstance = ((string)activeLocationValue);
                                    propertiesInstance.ActiveLocation = activeLocationInstance;
                                }
                                
                                JToken testFailoverStateValue = propertiesValue["testFailoverState"];
                                if (testFailoverStateValue != null && testFailoverStateValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateInstance = ((string)testFailoverStateValue);
                                    propertiesInstance.TestFailoverState = testFailoverStateInstance;
                                }
                                
                                JToken testFailoverStateDescriptionValue = propertiesValue["testFailoverStateDescription"];
                                if (testFailoverStateDescriptionValue != null && testFailoverStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateDescriptionInstance = ((string)testFailoverStateDescriptionValue);
                                    propertiesInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                    }
                                }
                                
                                JToken replicationHealthValue = propertiesValue["replicationHealth"];
                                if (replicationHealthValue != null && replicationHealthValue.Type != JTokenType.Null)
                                {
                                    string replicationHealthInstance = ((string)replicationHealthValue);
                                    propertiesInstance.ReplicationHealth = replicationHealthInstance;
                                }
                                
                                JToken replicationHealthErrorsArray = propertiesValue["replicationHealthErrors"];
                                if (replicationHealthErrorsArray != null && replicationHealthErrorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken replicationHealthErrorsValue in ((JArray)replicationHealthErrorsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.ReplicationHealthErrors.Add(healthErrorInstance);
                                        
                                        JToken errorLevelValue = replicationHealthErrorsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCodeValue = replicationHealthErrorsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = replicationHealthErrorsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = replicationHealthErrorsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = replicationHealthErrorsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = replicationHealthErrorsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            string creationTimeUtcInstance = ((string)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = replicationHealthErrorsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = replicationHealthErrorsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                    }
                                }
                                
                                JToken policyIdValue = propertiesValue["policyId"];
                                if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                {
                                    string policyIdInstance = ((string)policyIdValue);
                                    propertiesInstance.PolicyID = policyIdInstance;
                                }
                                
                                JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                    propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                }
                                
                                JToken lastSuccessfulFailoverTimeValue = propertiesValue["lastSuccessfulFailoverTime"];
                                if (lastSuccessfulFailoverTimeValue != null && lastSuccessfulFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSuccessfulFailoverTimeInstance = ((DateTime)lastSuccessfulFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulFailoverTime = lastSuccessfulFailoverTimeInstance;
                                }
                                
                                JToken lastSuccessfulTestFailoverTimeValue = propertiesValue["lastSuccessfulTestFailoverTime"];
                                if (lastSuccessfulTestFailoverTimeValue != null && lastSuccessfulTestFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSuccessfulTestFailoverTimeInstance = ((DateTime)lastSuccessfulTestFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulTestFailoverTime = lastSuccessfulTestFailoverTimeInstance;
                                }
                                
                                JToken currentScenarioValue = propertiesValue["currentScenario"];
                                if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                {
                                    CurrentScenarioDetails currentScenarioInstance = new CurrentScenarioDetails();
                                    propertiesInstance.CurrentScenario = currentScenarioInstance;
                                    
                                    JToken scenarioNameValue = currentScenarioValue["scenarioName"];
                                    if (scenarioNameValue != null && scenarioNameValue.Type != JTokenType.Null)
                                    {
                                        string scenarioNameInstance = ((string)scenarioNameValue);
                                        currentScenarioInstance.ScenarioName = scenarioNameInstance;
                                    }
                                    
                                    JToken jobIdValue = currentScenarioValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        currentScenarioInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken startTimeValue = currentScenarioValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        currentScenarioInstance.StartTime = startTimeInstance;
                                    }
                                }
                                
                                JToken failoverRecoveryPointIdValue = propertiesValue["failoverRecoveryPointId"];
                                if (failoverRecoveryPointIdValue != null && failoverRecoveryPointIdValue.Type != JTokenType.Null)
                                {
                                    string failoverRecoveryPointIdInstance = ((string)failoverRecoveryPointIdValue);
                                    propertiesInstance.FailoverRecoveryPointId = failoverRecoveryPointIdInstance;
                                }
                                
                                JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                    if (typeName == "HyperVReplica2012")
                                    {
                                        HyperVReplica2012ReplicationDetails hyperVReplica2012ReplicationDetailsInstance = new HyperVReplica2012ReplicationDetails();
                                        
                                        JToken lastReplicatedTimeValue = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue != null && lastReplicatedTimeValue.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance = ((string)lastReplicatedTimeValue);
                                            hyperVReplica2012ReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance;
                                        }
                                        
                                        JToken vmNicsArray = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray != null && vmNicsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue in ((JArray)vmNicsArray))
                                            {
                                                VMNicDetails vMNicDetailsInstance = new VMNicDetails();
                                                hyperVReplica2012ReplicationDetailsInstance.VmNics.Add(vMNicDetailsInstance);
                                                
                                                JToken nicIdValue = vmNicsValue["nicId"];
                                                if (nicIdValue != null && nicIdValue.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance = ((string)nicIdValue);
                                                    vMNicDetailsInstance.NicId = nicIdInstance;
                                                }
                                                
                                                JToken vMSubnetNameValue = vmNicsValue["vMSubnetName"];
                                                if (vMSubnetNameValue != null && vMSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance = ((string)vMSubnetNameValue);
                                                    vMNicDetailsInstance.VMSubnetName = vMSubnetNameInstance;
                                                }
                                                
                                                JToken vMNetworkNameValue = vmNicsValue["vMNetworkName"];
                                                if (vMNetworkNameValue != null && vMNetworkNameValue.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance = ((string)vMNetworkNameValue);
                                                    vMNicDetailsInstance.VMNetworkName = vMNetworkNameInstance;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue = vmNicsValue["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue != null && recoveryVMNetworkIdValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance = ((string)recoveryVMNetworkIdValue);
                                                    vMNicDetailsInstance.RecoveryVMNetworkId = recoveryVMNetworkIdInstance;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue = vmNicsValue["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue != null && recoveryVMSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance = ((string)recoveryVMSubnetNameValue);
                                                    vMNicDetailsInstance.RecoveryVMSubnetName = recoveryVMSubnetNameInstance;
                                                }
                                                
                                                JToken ipAddressTypeValue = vmNicsValue["ipAddressType"];
                                                if (ipAddressTypeValue != null && ipAddressTypeValue.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance = ((string)ipAddressTypeValue);
                                                    vMNicDetailsInstance.IpAddressType = ipAddressTypeInstance;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue = vmNicsValue["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue != null && replicaNicStaticIPAddressValue.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance = ((string)replicaNicStaticIPAddressValue);
                                                    vMNicDetailsInstance.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance;
                                                }
                                                
                                                JToken selectionTypeValue = vmNicsValue["selectionType"];
                                                if (selectionTypeValue != null && selectionTypeValue.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance = ((string)selectionTypeValue);
                                                    vMNicDetailsInstance.SelectionType = selectionTypeInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken initialReplicationDetailsValue = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue != null && initialReplicationDetailsValue.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance = new InitialReplicationDetails();
                                            hyperVReplica2012ReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance;
                                            
                                            JToken initialReplicationTypeValue = initialReplicationDetailsValue["initialReplicationType"];
                                            if (initialReplicationTypeValue != null && initialReplicationTypeValue.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance = ((string)initialReplicationTypeValue);
                                                initialReplicationDetailsInstance.InitialReplicationType = initialReplicationTypeInstance;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue = initialReplicationDetailsValue["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue != null && initialReplicationProgressPercentageValue.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance = ((string)initialReplicationProgressPercentageValue);
                                                initialReplicationDetailsInstance.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance;
                                            }
                                        }
                                        
                                        JToken vMDiskDetailsArray = providerSpecificDetailsValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray != null && vMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue in ((JArray)vMDiskDetailsArray))
                                            {
                                                DiskDetails diskDetailsInstance = new DiskDetails();
                                                hyperVReplica2012ReplicationDetailsInstance.VMDiskDetails.Add(diskDetailsInstance);
                                                
                                                JToken maxSizeMBValue = vMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue != null && maxSizeMBValue.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance = ((ulong)maxSizeMBValue);
                                                    diskDetailsInstance.MaxSizeMB = maxSizeMBInstance;
                                                }
                                                
                                                JToken vhdTypeValue = vMDiskDetailsValue["vhdType"];
                                                if (vhdTypeValue != null && vhdTypeValue.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance = ((string)vhdTypeValue);
                                                    diskDetailsInstance.VhdType = vhdTypeInstance;
                                                }
                                                
                                                JToken vhdIdValue = vMDiskDetailsValue["vhdId"];
                                                if (vhdIdValue != null && vhdIdValue.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance = ((string)vhdIdValue);
                                                    diskDetailsInstance.VhdId = vhdIdInstance;
                                                }
                                                
                                                JToken vhdNameValue = vMDiskDetailsValue["vhdName"];
                                                if (vhdNameValue != null && vhdNameValue.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance = ((string)vhdNameValue);
                                                    diskDetailsInstance.VhdName = vhdNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            hyperVReplica2012ReplicationDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplica2012ReplicationDetailsInstance;
                                    }
                                    if (typeName == "HyperVReplica2012R2")
                                    {
                                        HyperVReplica2012R2ReplicationDetails hyperVReplica2012R2ReplicationDetailsInstance = new HyperVReplica2012R2ReplicationDetails();
                                        
                                        JToken lastReplicatedTimeValue2 = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue2 != null && lastReplicatedTimeValue2.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance2 = ((string)lastReplicatedTimeValue2);
                                            hyperVReplica2012R2ReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance2;
                                        }
                                        
                                        JToken vmNicsArray2 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray2 != null && vmNicsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue2 in ((JArray)vmNicsArray2))
                                            {
                                                VMNicDetails vMNicDetailsInstance2 = new VMNicDetails();
                                                hyperVReplica2012R2ReplicationDetailsInstance.VmNics.Add(vMNicDetailsInstance2);
                                                
                                                JToken nicIdValue2 = vmNicsValue2["nicId"];
                                                if (nicIdValue2 != null && nicIdValue2.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance2 = ((string)nicIdValue2);
                                                    vMNicDetailsInstance2.NicId = nicIdInstance2;
                                                }
                                                
                                                JToken vMSubnetNameValue2 = vmNicsValue2["vMSubnetName"];
                                                if (vMSubnetNameValue2 != null && vMSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance2 = ((string)vMSubnetNameValue2);
                                                    vMNicDetailsInstance2.VMSubnetName = vMSubnetNameInstance2;
                                                }
                                                
                                                JToken vMNetworkNameValue2 = vmNicsValue2["vMNetworkName"];
                                                if (vMNetworkNameValue2 != null && vMNetworkNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance2 = ((string)vMNetworkNameValue2);
                                                    vMNicDetailsInstance2.VMNetworkName = vMNetworkNameInstance2;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue2 = vmNicsValue2["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue2 != null && recoveryVMNetworkIdValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance2 = ((string)recoveryVMNetworkIdValue2);
                                                    vMNicDetailsInstance2.RecoveryVMNetworkId = recoveryVMNetworkIdInstance2;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue2 = vmNicsValue2["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue2 != null && recoveryVMSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance2 = ((string)recoveryVMSubnetNameValue2);
                                                    vMNicDetailsInstance2.RecoveryVMSubnetName = recoveryVMSubnetNameInstance2;
                                                }
                                                
                                                JToken ipAddressTypeValue2 = vmNicsValue2["ipAddressType"];
                                                if (ipAddressTypeValue2 != null && ipAddressTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance2 = ((string)ipAddressTypeValue2);
                                                    vMNicDetailsInstance2.IpAddressType = ipAddressTypeInstance2;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue2 = vmNicsValue2["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue2 != null && replicaNicStaticIPAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance2 = ((string)replicaNicStaticIPAddressValue2);
                                                    vMNicDetailsInstance2.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance2;
                                                }
                                                
                                                JToken selectionTypeValue2 = vmNicsValue2["selectionType"];
                                                if (selectionTypeValue2 != null && selectionTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance2 = ((string)selectionTypeValue2);
                                                    vMNicDetailsInstance2.SelectionType = selectionTypeInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken initialReplicationDetailsValue2 = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue2 != null && initialReplicationDetailsValue2.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance2 = new InitialReplicationDetails();
                                            hyperVReplica2012R2ReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance2;
                                            
                                            JToken initialReplicationTypeValue2 = initialReplicationDetailsValue2["initialReplicationType"];
                                            if (initialReplicationTypeValue2 != null && initialReplicationTypeValue2.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance2 = ((string)initialReplicationTypeValue2);
                                                initialReplicationDetailsInstance2.InitialReplicationType = initialReplicationTypeInstance2;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue2 = initialReplicationDetailsValue2["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue2 != null && initialReplicationProgressPercentageValue2.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance2 = ((string)initialReplicationProgressPercentageValue2);
                                                initialReplicationDetailsInstance2.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance2;
                                            }
                                        }
                                        
                                        JToken vMDiskDetailsArray2 = providerSpecificDetailsValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray2 != null && vMDiskDetailsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue2 in ((JArray)vMDiskDetailsArray2))
                                            {
                                                DiskDetails diskDetailsInstance2 = new DiskDetails();
                                                hyperVReplica2012R2ReplicationDetailsInstance.VMDiskDetails.Add(diskDetailsInstance2);
                                                
                                                JToken maxSizeMBValue2 = vMDiskDetailsValue2["maxSizeMB"];
                                                if (maxSizeMBValue2 != null && maxSizeMBValue2.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance2 = ((ulong)maxSizeMBValue2);
                                                    diskDetailsInstance2.MaxSizeMB = maxSizeMBInstance2;
                                                }
                                                
                                                JToken vhdTypeValue2 = vMDiskDetailsValue2["vhdType"];
                                                if (vhdTypeValue2 != null && vhdTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance2 = ((string)vhdTypeValue2);
                                                    diskDetailsInstance2.VhdType = vhdTypeInstance2;
                                                }
                                                
                                                JToken vhdIdValue2 = vMDiskDetailsValue2["vhdId"];
                                                if (vhdIdValue2 != null && vhdIdValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance2 = ((string)vhdIdValue2);
                                                    diskDetailsInstance2.VhdId = vhdIdInstance2;
                                                }
                                                
                                                JToken vhdNameValue2 = vMDiskDetailsValue2["vhdName"];
                                                if (vhdNameValue2 != null && vhdNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance2 = ((string)vhdNameValue2);
                                                    diskDetailsInstance2.VhdName = vhdNameInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue2 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                            hyperVReplica2012R2ReplicationDetailsInstance.InstanceType = instanceTypeInstance2;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplica2012R2ReplicationDetailsInstance;
                                    }
                                    if (typeName == "VMwareAzureV2")
                                    {
                                        VMwareAzureV2ProviderSpecificSettings vMwareAzureV2ProviderSpecificSettingsInstance = new VMwareAzureV2ProviderSpecificSettings();
                                        
                                        JToken infrastructureVmIdValue = providerSpecificDetailsValue["infrastructureVmId"];
                                        if (infrastructureVmIdValue != null && infrastructureVmIdValue.Type != JTokenType.Null)
                                        {
                                            string infrastructureVmIdInstance = ((string)infrastructureVmIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.InfrastructureVmId = infrastructureVmIdInstance;
                                        }
                                        
                                        JToken vCenterInfrastructureIdValue = providerSpecificDetailsValue["vCenterInfrastructureId"];
                                        if (vCenterInfrastructureIdValue != null && vCenterInfrastructureIdValue.Type != JTokenType.Null)
                                        {
                                            string vCenterInfrastructureIdInstance = ((string)vCenterInfrastructureIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VCenterInfrastructureId = vCenterInfrastructureIdInstance;
                                        }
                                        
                                        JToken protectionStageValue = providerSpecificDetailsValue["protectionStage"];
                                        if (protectionStageValue != null && protectionStageValue.Type != JTokenType.Null)
                                        {
                                            string protectionStageInstance = ((string)protectionStageValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ProtectionStage = protectionStageInstance;
                                        }
                                        
                                        JToken healthErrorCodeValue = providerSpecificDetailsValue["healthErrorCode"];
                                        if (healthErrorCodeValue != null && healthErrorCodeValue.Type != JTokenType.Null)
                                        {
                                            string healthErrorCodeInstance = ((string)healthErrorCodeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.HealthErrorCode = healthErrorCodeInstance;
                                        }
                                        
                                        JToken resyncRequiredValue = providerSpecificDetailsValue["resyncRequired"];
                                        if (resyncRequiredValue != null && resyncRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool resyncRequiredInstance = ((bool)resyncRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ResyncRequired = resyncRequiredInstance;
                                        }
                                        
                                        JToken resyncProgressPercentageValue = providerSpecificDetailsValue["resyncProgressPercentage"];
                                        if (resyncProgressPercentageValue != null && resyncProgressPercentageValue.Type != JTokenType.Null)
                                        {
                                            int resyncProgressPercentageInstance = ((int)resyncProgressPercentageValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ResyncProgressPercentage = resyncProgressPercentageInstance;
                                        }
                                        
                                        JToken rpoInSecondsValue = providerSpecificDetailsValue["rpoInSeconds"];
                                        if (rpoInSecondsValue != null && rpoInSecondsValue.Type != JTokenType.Null)
                                        {
                                            long rpoInSecondsInstance = ((long)rpoInSecondsValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RpoInSeconds = rpoInSecondsInstance;
                                        }
                                        
                                        JToken compressedDataRateInMBValue = providerSpecificDetailsValue["compressedDataRateInMB"];
                                        if (compressedDataRateInMBValue != null && compressedDataRateInMBValue.Type != JTokenType.Null)
                                        {
                                            double compressedDataRateInMBInstance = ((double)compressedDataRateInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.CompressedDataRateInMB = compressedDataRateInMBInstance;
                                        }
                                        
                                        JToken uncompressedDataRateInMBValue = providerSpecificDetailsValue["uncompressedDataRateInMB"];
                                        if (uncompressedDataRateInMBValue != null && uncompressedDataRateInMBValue.Type != JTokenType.Null)
                                        {
                                            double uncompressedDataRateInMBInstance = ((double)uncompressedDataRateInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.UncompressedDataRateInMB = uncompressedDataRateInMBInstance;
                                        }
                                        
                                        JToken ipAddressValue = providerSpecificDetailsValue["ipAddress"];
                                        if (ipAddressValue != null && ipAddressValue.Type != JTokenType.Null)
                                        {
                                            string ipAddressInstance = ((string)ipAddressValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IpAddress = ipAddressInstance;
                                        }
                                        
                                        JToken agentVersionValue = providerSpecificDetailsValue["agentVersion"];
                                        if (agentVersionValue != null && agentVersionValue.Type != JTokenType.Null)
                                        {
                                            string agentVersionInstance = ((string)agentVersionValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.AgentVersion = agentVersionInstance;
                                        }
                                        
                                        JToken latestUpdateVersionValue = providerSpecificDetailsValue["latestUpdateVersion"];
                                        if (latestUpdateVersionValue != null && latestUpdateVersionValue.Type != JTokenType.Null)
                                        {
                                            string latestUpdateVersionInstance = ((string)latestUpdateVersionValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.LatestUpdateVersion = latestUpdateVersionInstance;
                                        }
                                        
                                        JToken isAgentUpdateRequiredValue = providerSpecificDetailsValue["isAgentUpdateRequired"];
                                        if (isAgentUpdateRequiredValue != null && isAgentUpdateRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool isAgentUpdateRequiredInstance = ((bool)isAgentUpdateRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IsAgentUpdateRequired = isAgentUpdateRequiredInstance;
                                        }
                                        
                                        JToken isRebootAfterUpdateRequiredValue = providerSpecificDetailsValue["isRebootAfterUpdateRequired"];
                                        if (isRebootAfterUpdateRequiredValue != null && isRebootAfterUpdateRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool isRebootAfterUpdateRequiredInstance = ((bool)isRebootAfterUpdateRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IsRebootAfterUpdateRequired = isRebootAfterUpdateRequiredInstance;
                                        }
                                        
                                        JToken lastHeartbeatValue = providerSpecificDetailsValue["lastHeartbeat"];
                                        if (lastHeartbeatValue != null && lastHeartbeatValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastHeartbeatInstance = ((DateTime)lastHeartbeatValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.LastHeartbeat = lastHeartbeatInstance;
                                        }
                                        
                                        JToken processServerIdValue = providerSpecificDetailsValue["processServerId"];
                                        if (processServerIdValue != null && processServerIdValue.Type != JTokenType.Null)
                                        {
                                            string processServerIdInstance = ((string)processServerIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ProcessServerId = processServerIdInstance;
                                        }
                                        
                                        JToken multiVmGroupIdValue = providerSpecificDetailsValue["multiVmGroupId"];
                                        if (multiVmGroupIdValue != null && multiVmGroupIdValue.Type != JTokenType.Null)
                                        {
                                            string multiVmGroupIdInstance = ((string)multiVmGroupIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MultiVmGroupId = multiVmGroupIdInstance;
                                        }
                                        
                                        JToken multiVmGroupNameValue = providerSpecificDetailsValue["multiVmGroupName"];
                                        if (multiVmGroupNameValue != null && multiVmGroupNameValue.Type != JTokenType.Null)
                                        {
                                            string multiVmGroupNameInstance = ((string)multiVmGroupNameValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MultiVmGroupName = multiVmGroupNameInstance;
                                        }
                                        
                                        JToken protectedVolumesArray = providerSpecificDetailsValue["protectedVolumes"];
                                        if (protectedVolumesArray != null && protectedVolumesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken protectedVolumesValue in ((JArray)protectedVolumesArray))
                                            {
                                                VMwareAzureV2ProtectedVolumeDetails vMwareAzureV2ProtectedVolumeDetailsInstance = new VMwareAzureV2ProtectedVolumeDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.ProtectedVolumes.Add(vMwareAzureV2ProtectedVolumeDetailsInstance);
                                                
                                                JToken nameValue = protectedVolumesValue["name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.Name = nameInstance;
                                                }
                                                
                                                JToken protectionStageValue2 = protectedVolumesValue["protectionStage"];
                                                if (protectionStageValue2 != null && protectionStageValue2.Type != JTokenType.Null)
                                                {
                                                    string protectionStageInstance2 = ((string)protectionStageValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ProtectionStage = protectionStageInstance2;
                                                }
                                                
                                                JToken healthErrorCodeValue2 = protectedVolumesValue["healthErrorCode"];
                                                if (healthErrorCodeValue2 != null && healthErrorCodeValue2.Type != JTokenType.Null)
                                                {
                                                    string healthErrorCodeInstance2 = ((string)healthErrorCodeValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.HealthErrorCode = healthErrorCodeInstance2;
                                                }
                                                
                                                JToken rpoInSecondsValue2 = protectedVolumesValue["rpoInSeconds"];
                                                if (rpoInSecondsValue2 != null && rpoInSecondsValue2.Type != JTokenType.Null)
                                                {
                                                    long rpoInSecondsInstance2 = ((long)rpoInSecondsValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.RpoInSeconds = rpoInSecondsInstance2;
                                                }
                                                
                                                JToken resyncRequiredValue2 = protectedVolumesValue["resyncRequired"];
                                                if (resyncRequiredValue2 != null && resyncRequiredValue2.Type != JTokenType.Null)
                                                {
                                                    bool resyncRequiredInstance2 = ((bool)resyncRequiredValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncRequired = resyncRequiredInstance2;
                                                }
                                                
                                                JToken resyncProgressPercentageValue2 = protectedVolumesValue["resyncProgressPercentage"];
                                                if (resyncProgressPercentageValue2 != null && resyncProgressPercentageValue2.Type != JTokenType.Null)
                                                {
                                                    int resyncProgressPercentageInstance2 = ((int)resyncProgressPercentageValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncProgressPercentage = resyncProgressPercentageInstance2;
                                                }
                                                
                                                JToken resyncDurationInSecondsValue = protectedVolumesValue["resyncDurationInSeconds"];
                                                if (resyncDurationInSecondsValue != null && resyncDurationInSecondsValue.Type != JTokenType.Null)
                                                {
                                                    long resyncDurationInSecondsInstance = ((long)resyncDurationInSecondsValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncDurationInSeconds = resyncDurationInSecondsInstance;
                                                }
                                                
                                                JToken volumeCapacityInBytesValue = protectedVolumesValue["volumeCapacityInBytes"];
                                                if (volumeCapacityInBytesValue != null && volumeCapacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long volumeCapacityInBytesInstance = ((long)volumeCapacityInBytesValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.VolumeCapacityInBytes = volumeCapacityInBytesInstance;
                                                }
                                                
                                                JToken fileSystemCapacityInBytesValue = protectedVolumesValue["fileSystemCapacityInBytes"];
                                                if (fileSystemCapacityInBytesValue != null && fileSystemCapacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long fileSystemCapacityInBytesInstance = ((long)fileSystemCapacityInBytesValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.FileSystemCapacityInBytes = fileSystemCapacityInBytesInstance;
                                                }
                                                
                                                JToken sourceDataInMBValue = protectedVolumesValue["sourceDataInMB"];
                                                if (sourceDataInMBValue != null && sourceDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double sourceDataInMBInstance = ((double)sourceDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.SourceDataInMB = sourceDataInMBInstance;
                                                }
                                                
                                                JToken psDataInMBValue = protectedVolumesValue["psDataInMB"];
                                                if (psDataInMBValue != null && psDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double psDataInMBInstance = ((double)psDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.PSDataInMB = psDataInMBInstance;
                                                }
                                                
                                                JToken targetDataInMBValue = protectedVolumesValue["targetDataInMB"];
                                                if (targetDataInMBValue != null && targetDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double targetDataInMBInstance = ((double)targetDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.TargetDataInMB = targetDataInMBInstance;
                                                }
                                                
                                                JToken volumeResizedValue = protectedVolumesValue["volumeResized"];
                                                if (volumeResizedValue != null && volumeResizedValue.Type != JTokenType.Null)
                                                {
                                                    bool volumeResizedInstance = ((bool)volumeResizedValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.VolumeResized = volumeResizedInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken volumeResizedValue2 = providerSpecificDetailsValue["volumeResized"];
                                        if (volumeResizedValue2 != null && volumeResizedValue2.Type != JTokenType.Null)
                                        {
                                            bool volumeResizedInstance2 = ((bool)volumeResizedValue2);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VolumeResized = volumeResizedInstance2;
                                        }
                                        
                                        JToken masterTargetIdValue = providerSpecificDetailsValue["masterTargetId"];
                                        if (masterTargetIdValue != null && masterTargetIdValue.Type != JTokenType.Null)
                                        {
                                            string masterTargetIdInstance = ((string)masterTargetIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MasterTargetId = masterTargetIdInstance;
                                        }
                                        
                                        JToken sourceVmCPUCountValue = providerSpecificDetailsValue["sourceVmCPUCount"];
                                        if (sourceVmCPUCountValue != null && sourceVmCPUCountValue.Type != JTokenType.Null)
                                        {
                                            int sourceVmCPUCountInstance = ((int)sourceVmCPUCountValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SourceVmCPUCount = sourceVmCPUCountInstance;
                                        }
                                        
                                        JToken sourceVmRAMSizeInMBValue = providerSpecificDetailsValue["sourceVmRAMSizeInMB"];
                                        if (sourceVmRAMSizeInMBValue != null && sourceVmRAMSizeInMBValue.Type != JTokenType.Null)
                                        {
                                            int sourceVmRAMSizeInMBInstance = ((int)sourceVmRAMSizeInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SourceVmRAMSizeInMB = sourceVmRAMSizeInMBInstance;
                                        }
                                        
                                        JToken osTypeValue = providerSpecificDetailsValue["osType"];
                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance = ((string)osTypeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.OSType = osTypeInstance;
                                        }
                                        
                                        JToken vhdNameValue3 = providerSpecificDetailsValue["vhdName"];
                                        if (vhdNameValue3 != null && vhdNameValue3.Type != JTokenType.Null)
                                        {
                                            string vhdNameInstance3 = ((string)vhdNameValue3);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VHDName = vhdNameInstance3;
                                        }
                                        
                                        JToken osDiskIdValue = providerSpecificDetailsValue["osDiskId"];
                                        if (osDiskIdValue != null && osDiskIdValue.Type != JTokenType.Null)
                                        {
                                            string osDiskIdInstance = ((string)osDiskIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.OSDiskId = osDiskIdInstance;
                                        }
                                        
                                        JToken azureVMDiskDetailsArray = providerSpecificDetailsValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsArray != null && azureVMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken azureVMDiskDetailsValue in ((JArray)azureVMDiskDetailsArray))
                                            {
                                                AzureVmDiskDetails azureVmDiskDetailsInstance = new AzureVmDiskDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.AzureVMDiskDetails.Add(azureVmDiskDetailsInstance);
                                                
                                                JToken vhdTypeValue3 = azureVMDiskDetailsValue["vhdType"];
                                                if (vhdTypeValue3 != null && vhdTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance3 = ((string)vhdTypeValue3);
                                                    azureVmDiskDetailsInstance.VhdType = vhdTypeInstance3;
                                                }
                                                
                                                JToken vhdIdValue3 = azureVMDiskDetailsValue["vhdId"];
                                                if (vhdIdValue3 != null && vhdIdValue3.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance3 = ((string)vhdIdValue3);
                                                    azureVmDiskDetailsInstance.VhdId = vhdIdInstance3;
                                                }
                                                
                                                JToken vhdNameValue4 = azureVMDiskDetailsValue["vhdName"];
                                                if (vhdNameValue4 != null && vhdNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance4 = ((string)vhdNameValue4);
                                                    azureVmDiskDetailsInstance.VhdName = vhdNameInstance4;
                                                }
                                                
                                                JToken maxSizeMBValue3 = azureVMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue3 != null && maxSizeMBValue3.Type != JTokenType.Null)
                                                {
                                                    string maxSizeMBInstance3 = ((string)maxSizeMBValue3);
                                                    azureVmDiskDetailsInstance.MaxSizeMB = maxSizeMBInstance3;
                                                }
                                                
                                                JToken targetDiskLocationValue = azureVMDiskDetailsValue["targetDiskLocation"];
                                                if (targetDiskLocationValue != null && targetDiskLocationValue.Type != JTokenType.Null)
                                                {
                                                    string targetDiskLocationInstance = ((string)targetDiskLocationValue);
                                                    azureVmDiskDetailsInstance.TargetDiskLocation = targetDiskLocationInstance;
                                                }
                                                
                                                JToken lunIdValue = azureVMDiskDetailsValue["lunId"];
                                                if (lunIdValue != null && lunIdValue.Type != JTokenType.Null)
                                                {
                                                    string lunIdInstance = ((string)lunIdValue);
                                                    azureVmDiskDetailsInstance.LunId = lunIdInstance;
                                                }
                                                
                                                JToken targetDiskNameValue = azureVMDiskDetailsValue["targetDiskName"];
                                                if (targetDiskNameValue != null && targetDiskNameValue.Type != JTokenType.Null)
                                                {
                                                    string targetDiskNameInstance = ((string)targetDiskNameValue);
                                                    azureVmDiskDetailsInstance.TargetDiskName = targetDiskNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue = providerSpecificDetailsValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue != null && recoveryAzureVMNameValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance = ((string)recoveryAzureVMNameValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue = providerSpecificDetailsValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue != null && recoveryAzureVMSizeValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance = ((string)recoveryAzureVMSizeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance;
                                        }
                                        
                                        JToken recoveryAzureStorageAccountValue = providerSpecificDetailsValue["recoveryAzureStorageAccount"];
                                        if (recoveryAzureStorageAccountValue != null && recoveryAzureStorageAccountValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureStorageAccountInstance = ((string)recoveryAzureStorageAccountValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureStorageAccount = recoveryAzureStorageAccountInstance;
                                        }
                                        
                                        JToken vmNicsArray3 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray3 != null && vmNicsArray3.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue3 in ((JArray)vmNicsArray3))
                                            {
                                                VMNicDetails vMNicDetailsInstance3 = new VMNicDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.VMNics.Add(vMNicDetailsInstance3);
                                                
                                                JToken nicIdValue3 = vmNicsValue3["nicId"];
                                                if (nicIdValue3 != null && nicIdValue3.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance3 = ((string)nicIdValue3);
                                                    vMNicDetailsInstance3.NicId = nicIdInstance3;
                                                }
                                                
                                                JToken vMSubnetNameValue3 = vmNicsValue3["vMSubnetName"];
                                                if (vMSubnetNameValue3 != null && vMSubnetNameValue3.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance3 = ((string)vMSubnetNameValue3);
                                                    vMNicDetailsInstance3.VMSubnetName = vMSubnetNameInstance3;
                                                }
                                                
                                                JToken vMNetworkNameValue3 = vmNicsValue3["vMNetworkName"];
                                                if (vMNetworkNameValue3 != null && vMNetworkNameValue3.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance3 = ((string)vMNetworkNameValue3);
                                                    vMNicDetailsInstance3.VMNetworkName = vMNetworkNameInstance3;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue3 = vmNicsValue3["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue3 != null && recoveryVMNetworkIdValue3.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance3 = ((string)recoveryVMNetworkIdValue3);
                                                    vMNicDetailsInstance3.RecoveryVMNetworkId = recoveryVMNetworkIdInstance3;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue3 = vmNicsValue3["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue3 != null && recoveryVMSubnetNameValue3.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance3 = ((string)recoveryVMSubnetNameValue3);
                                                    vMNicDetailsInstance3.RecoveryVMSubnetName = recoveryVMSubnetNameInstance3;
                                                }
                                                
                                                JToken ipAddressTypeValue3 = vmNicsValue3["ipAddressType"];
                                                if (ipAddressTypeValue3 != null && ipAddressTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance3 = ((string)ipAddressTypeValue3);
                                                    vMNicDetailsInstance3.IpAddressType = ipAddressTypeInstance3;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue3 = vmNicsValue3["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue3 != null && replicaNicStaticIPAddressValue3.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance3 = ((string)replicaNicStaticIPAddressValue3);
                                                    vMNicDetailsInstance3.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance3;
                                                }
                                                
                                                JToken selectionTypeValue3 = vmNicsValue3["selectionType"];
                                                if (selectionTypeValue3 != null && selectionTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance3 = ((string)selectionTypeValue3);
                                                    vMNicDetailsInstance3.SelectionType = selectionTypeInstance3;
                                                }
                                            }
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue = providerSpecificDetailsValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue != null && selectedRecoveryAzureNetworkIdValue.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance = ((string)selectedRecoveryAzureNetworkIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance;
                                        }
                                        
                                        JToken discoveryTypeValue = providerSpecificDetailsValue["discoveryType"];
                                        if (discoveryTypeValue != null && discoveryTypeValue.Type != JTokenType.Null)
                                        {
                                            string discoveryTypeInstance = ((string)discoveryTypeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.DiscoveryType = discoveryTypeInstance;
                                        }
                                        
                                        JToken instanceTypeValue3 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.InstanceType = instanceTypeInstance3;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = vMwareAzureV2ProviderSpecificSettingsInstance;
                                    }
                                    if (typeName == "HyperVReplicaAzure")
                                    {
                                        HyperVReplicaAzureReplicationDetails hyperVReplicaAzureReplicationDetailsInstance = new HyperVReplicaAzureReplicationDetails();
                                        
                                        JToken azureVMDiskDetailsArray2 = providerSpecificDetailsValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsArray2 != null && azureVMDiskDetailsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken azureVMDiskDetailsValue2 in ((JArray)azureVMDiskDetailsArray2))
                                            {
                                                AzureVmDiskDetails azureVmDiskDetailsInstance2 = new AzureVmDiskDetails();
                                                hyperVReplicaAzureReplicationDetailsInstance.AzureVMDiskDetails.Add(azureVmDiskDetailsInstance2);
                                                
                                                JToken vhdTypeValue4 = azureVMDiskDetailsValue2["vhdType"];
                                                if (vhdTypeValue4 != null && vhdTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance4 = ((string)vhdTypeValue4);
                                                    azureVmDiskDetailsInstance2.VhdType = vhdTypeInstance4;
                                                }
                                                
                                                JToken vhdIdValue4 = azureVMDiskDetailsValue2["vhdId"];
                                                if (vhdIdValue4 != null && vhdIdValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance4 = ((string)vhdIdValue4);
                                                    azureVmDiskDetailsInstance2.VhdId = vhdIdInstance4;
                                                }
                                                
                                                JToken vhdNameValue5 = azureVMDiskDetailsValue2["vhdName"];
                                                if (vhdNameValue5 != null && vhdNameValue5.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance5 = ((string)vhdNameValue5);
                                                    azureVmDiskDetailsInstance2.VhdName = vhdNameInstance5;
                                                }
                                                
                                                JToken maxSizeMBValue4 = azureVMDiskDetailsValue2["maxSizeMB"];
                                                if (maxSizeMBValue4 != null && maxSizeMBValue4.Type != JTokenType.Null)
                                                {
                                                    string maxSizeMBInstance4 = ((string)maxSizeMBValue4);
                                                    azureVmDiskDetailsInstance2.MaxSizeMB = maxSizeMBInstance4;
                                                }
                                                
                                                JToken targetDiskLocationValue2 = azureVMDiskDetailsValue2["targetDiskLocation"];
                                                if (targetDiskLocationValue2 != null && targetDiskLocationValue2.Type != JTokenType.Null)
                                                {
                                                    string targetDiskLocationInstance2 = ((string)targetDiskLocationValue2);
                                                    azureVmDiskDetailsInstance2.TargetDiskLocation = targetDiskLocationInstance2;
                                                }
                                                
                                                JToken lunIdValue2 = azureVMDiskDetailsValue2["lunId"];
                                                if (lunIdValue2 != null && lunIdValue2.Type != JTokenType.Null)
                                                {
                                                    string lunIdInstance2 = ((string)lunIdValue2);
                                                    azureVmDiskDetailsInstance2.LunId = lunIdInstance2;
                                                }
                                                
                                                JToken targetDiskNameValue2 = azureVMDiskDetailsValue2["targetDiskName"];
                                                if (targetDiskNameValue2 != null && targetDiskNameValue2.Type != JTokenType.Null)
                                                {
                                                    string targetDiskNameInstance2 = ((string)targetDiskNameValue2);
                                                    azureVmDiskDetailsInstance2.TargetDiskName = targetDiskNameInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue2 = providerSpecificDetailsValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue2 != null && recoveryAzureVMNameValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance2 = ((string)recoveryAzureVMNameValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance2;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue2 = providerSpecificDetailsValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue2 != null && recoveryAzureVMSizeValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance2 = ((string)recoveryAzureVMSizeValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance2;
                                        }
                                        
                                        JToken recoveryAzureStorageAccountValue2 = providerSpecificDetailsValue["recoveryAzureStorageAccount"];
                                        if (recoveryAzureStorageAccountValue2 != null && recoveryAzureStorageAccountValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureStorageAccountInstance2 = ((string)recoveryAzureStorageAccountValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureStorageAccount = recoveryAzureStorageAccountInstance2;
                                        }
                                        
                                        JToken lastReplicatedTimeValue3 = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue3 != null && lastReplicatedTimeValue3.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance3 = ((string)lastReplicatedTimeValue3);
                                            hyperVReplicaAzureReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance3;
                                        }
                                        
                                        JToken initialReplicationDetailsValue3 = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue3 != null && initialReplicationDetailsValue3.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance3 = new InitialReplicationDetails();
                                            hyperVReplicaAzureReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance3;
                                            
                                            JToken initialReplicationTypeValue3 = initialReplicationDetailsValue3["initialReplicationType"];
                                            if (initialReplicationTypeValue3 != null && initialReplicationTypeValue3.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance3 = ((string)initialReplicationTypeValue3);
                                                initialReplicationDetailsInstance3.InitialReplicationType = initialReplicationTypeInstance3;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue3 = initialReplicationDetailsValue3["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue3 != null && initialReplicationProgressPercentageValue3.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance3 = ((string)initialReplicationProgressPercentageValue3);
                                                initialReplicationDetailsInstance3.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance3;
                                            }
                                        }
                                        
                                        JToken vmNicsArray4 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray4 != null && vmNicsArray4.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue4 in ((JArray)vmNicsArray4))
                                            {
                                                VMNicDetails vMNicDetailsInstance4 = new VMNicDetails();
                                                hyperVReplicaAzureReplicationDetailsInstance.VMNics.Add(vMNicDetailsInstance4);
                                                
                                                JToken nicIdValue4 = vmNicsValue4["nicId"];
                                                if (nicIdValue4 != null && nicIdValue4.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance4 = ((string)nicIdValue4);
                                                    vMNicDetailsInstance4.NicId = nicIdInstance4;
                                                }
                                                
                                                JToken vMSubnetNameValue4 = vmNicsValue4["vMSubnetName"];
                                                if (vMSubnetNameValue4 != null && vMSubnetNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance4 = ((string)vMSubnetNameValue4);
                                                    vMNicDetailsInstance4.VMSubnetName = vMSubnetNameInstance4;
                                                }
                                                
                                                JToken vMNetworkNameValue4 = vmNicsValue4["vMNetworkName"];
                                                if (vMNetworkNameValue4 != null && vMNetworkNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance4 = ((string)vMNetworkNameValue4);
                                                    vMNicDetailsInstance4.VMNetworkName = vMNetworkNameInstance4;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue4 = vmNicsValue4["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue4 != null && recoveryVMNetworkIdValue4.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance4 = ((string)recoveryVMNetworkIdValue4);
                                                    vMNicDetailsInstance4.RecoveryVMNetworkId = recoveryVMNetworkIdInstance4;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue4 = vmNicsValue4["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue4 != null && recoveryVMSubnetNameValue4.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance4 = ((string)recoveryVMSubnetNameValue4);
                                                    vMNicDetailsInstance4.RecoveryVMSubnetName = recoveryVMSubnetNameInstance4;
                                                }
                                                
                                                JToken ipAddressTypeValue4 = vmNicsValue4["ipAddressType"];
                                                if (ipAddressTypeValue4 != null && ipAddressTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance4 = ((string)ipAddressTypeValue4);
                                                    vMNicDetailsInstance4.IpAddressType = ipAddressTypeInstance4;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue4 = vmNicsValue4["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue4 != null && replicaNicStaticIPAddressValue4.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance4 = ((string)replicaNicStaticIPAddressValue4);
                                                    vMNicDetailsInstance4.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance4;
                                                }
                                                
                                                JToken selectionTypeValue4 = vmNicsValue4["selectionType"];
                                                if (selectionTypeValue4 != null && selectionTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance4 = ((string)selectionTypeValue4);
                                                    vMNicDetailsInstance4.SelectionType = selectionTypeInstance4;
                                                }
                                            }
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue2 = providerSpecificDetailsValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue2 != null && selectedRecoveryAzureNetworkIdValue2.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance2 = ((string)selectedRecoveryAzureNetworkIdValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance2;
                                        }
                                        
                                        JToken encryptionValue = providerSpecificDetailsValue["encryption"];
                                        if (encryptionValue != null && encryptionValue.Type != JTokenType.Null)
                                        {
                                            string encryptionInstance = ((string)encryptionValue);
                                            hyperVReplicaAzureReplicationDetailsInstance.Encryption = encryptionInstance;
                                        }
                                        
                                        JToken oSDetailsValue = providerSpecificDetailsValue["oSDetails"];
                                        if (oSDetailsValue != null && oSDetailsValue.Type != JTokenType.Null)
                                        {
                                            OSDetails oSDetailsInstance = new OSDetails();
                                            hyperVReplicaAzureReplicationDetailsInstance.OSDetails = oSDetailsInstance;
                                            
                                            JToken osTypeValue2 = oSDetailsValue["osType"];
                                            if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                            {
                                                string osTypeInstance2 = ((string)osTypeValue2);
                                                oSDetailsInstance.OsType = osTypeInstance2;
                                            }
                                            
                                            JToken productTypeValue = oSDetailsValue["productType"];
                                            if (productTypeValue != null && productTypeValue.Type != JTokenType.Null)
                                            {
                                                string productTypeInstance = ((string)productTypeValue);
                                                oSDetailsInstance.ProductType = productTypeInstance;
                                            }
                                            
                                            JToken osEditionValue = oSDetailsValue["osEdition"];
                                            if (osEditionValue != null && osEditionValue.Type != JTokenType.Null)
                                            {
                                                string osEditionInstance = ((string)osEditionValue);
                                                oSDetailsInstance.OSEdition = osEditionInstance;
                                            }
                                            
                                            JToken oSVersionValue = oSDetailsValue["oSVersion"];
                                            if (oSVersionValue != null && oSVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSVersionInstance = ((string)oSVersionValue);
                                                oSDetailsInstance.OSVersion = oSVersionInstance;
                                            }
                                            
                                            JToken oSMajorVersionValue = oSDetailsValue["oSMajorVersion"];
                                            if (oSMajorVersionValue != null && oSMajorVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSMajorVersionInstance = ((string)oSMajorVersionValue);
                                                oSDetailsInstance.OSMajorVersion = oSMajorVersionInstance;
                                            }
                                            
                                            JToken oSMinorVersionValue = oSDetailsValue["oSMinorVersion"];
                                            if (oSMinorVersionValue != null && oSMinorVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSMinorVersionInstance = ((string)oSMinorVersionValue);
                                                oSDetailsInstance.OSMinorVersion = oSMinorVersionInstance;
                                            }
                                        }
                                        
                                        JToken sourceVmRAMSizeInMBValue2 = providerSpecificDetailsValue["sourceVmRAMSizeInMB"];
                                        if (sourceVmRAMSizeInMBValue2 != null && sourceVmRAMSizeInMBValue2.Type != JTokenType.Null)
                                        {
                                            int sourceVmRAMSizeInMBInstance2 = ((int)sourceVmRAMSizeInMBValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SourceVmRAMSizeInMB = sourceVmRAMSizeInMBInstance2;
                                        }
                                        
                                        JToken sourceVmCPUCountValue2 = providerSpecificDetailsValue["sourceVmCPUCount"];
                                        if (sourceVmCPUCountValue2 != null && sourceVmCPUCountValue2.Type != JTokenType.Null)
                                        {
                                            int sourceVmCPUCountInstance2 = ((int)sourceVmCPUCountValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SourceVmCPUCount = sourceVmCPUCountInstance2;
                                        }
                                        
                                        JToken instanceTypeValue4 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue4 != null && instanceTypeValue4.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance4 = ((string)instanceTypeValue4);
                                            hyperVReplicaAzureReplicationDetailsInstance.InstanceType = instanceTypeInstance4;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplicaAzureReplicationDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                replicationProtectedItemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                replicationProtectedItemInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                replicationProtectedItemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                replicationProtectedItemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    replicationProtectedItemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Service response for replication protected items operation.
        /// </returns>
        public async Task<ReplicationProtectedItemOperationResponse> GetCommitFailoverStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetCommitFailoverStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ReplicationProtectedItemOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ReplicationProtectedItemOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ReplicationProtectedItem replicationProtectedItemInstance = new ReplicationProtectedItem();
                            result.ReplicationProtectedItem = replicationProtectedItemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ReplicationProtectedItemProperties propertiesInstance = new ReplicationProtectedItemProperties();
                                replicationProtectedItemInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken protectedItemTypeValue = propertiesValue["protectedItemType"];
                                if (protectedItemTypeValue != null && protectedItemTypeValue.Type != JTokenType.Null)
                                {
                                    string protectedItemTypeInstance = ((string)protectedItemTypeValue);
                                    propertiesInstance.ProtectedItemType = protectedItemTypeInstance;
                                }
                                
                                JToken protectableItemIdValue = propertiesValue["protectableItemId"];
                                if (protectableItemIdValue != null && protectableItemIdValue.Type != JTokenType.Null)
                                {
                                    string protectableItemIdInstance = ((string)protectableItemIdValue);
                                    propertiesInstance.ProtectableItemId = protectableItemIdInstance;
                                }
                                
                                JToken recoveryServicesProviderIdValue = propertiesValue["recoveryServicesProviderId"];
                                if (recoveryServicesProviderIdValue != null && recoveryServicesProviderIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryServicesProviderIdInstance = ((string)recoveryServicesProviderIdValue);
                                    propertiesInstance.RecoveryServicesProviderId = recoveryServicesProviderIdInstance;
                                }
                                
                                JToken primaryFabricFriendlyNameValue = propertiesValue["primaryFabricFriendlyName"];
                                if (primaryFabricFriendlyNameValue != null && primaryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricFriendlyNameInstance = ((string)primaryFabricFriendlyNameValue);
                                    propertiesInstance.PrimaryFabricFriendlyName = primaryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricFriendlyNameValue = propertiesValue["recoveryFabricFriendlyName"];
                                if (recoveryFabricFriendlyNameValue != null && recoveryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricFriendlyNameInstance = ((string)recoveryFabricFriendlyNameValue);
                                    propertiesInstance.RecoveryFabricFriendlyName = recoveryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricIdValue = propertiesValue["recoveryFabricId"];
                                if (recoveryFabricIdValue != null && recoveryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricIdInstance = ((string)recoveryFabricIdValue);
                                    propertiesInstance.RecoveryFabricId = recoveryFabricIdInstance;
                                }
                                
                                JToken primaryProtectionContainerFriendlyNameValue = propertiesValue["primaryProtectionContainerFriendlyName"];
                                if (primaryProtectionContainerFriendlyNameValue != null && primaryProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryProtectionContainerFriendlyNameInstance = ((string)primaryProtectionContainerFriendlyNameValue);
                                    propertiesInstance.PrimaryProtectionContainerFriendlyName = primaryProtectionContainerFriendlyNameInstance;
                                }
                                
                                JToken recoveryProtectionContainerFriendlyNameValue = propertiesValue["recoveryProtectionContainerFriendlyName"];
                                if (recoveryProtectionContainerFriendlyNameValue != null && recoveryProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryProtectionContainerFriendlyNameInstance = ((string)recoveryProtectionContainerFriendlyNameValue);
                                    propertiesInstance.RecoveryProtectionContainerFriendlyName = recoveryProtectionContainerFriendlyNameInstance;
                                }
                                
                                JToken protectionStateValue = propertiesValue["protectionState"];
                                if (protectionStateValue != null && protectionStateValue.Type != JTokenType.Null)
                                {
                                    string protectionStateInstance = ((string)protectionStateValue);
                                    propertiesInstance.ProtectionState = protectionStateInstance;
                                }
                                
                                JToken protectionStateDescriptionValue = propertiesValue["protectionStateDescription"];
                                if (protectionStateDescriptionValue != null && protectionStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string protectionStateDescriptionInstance = ((string)protectionStateDescriptionValue);
                                    propertiesInstance.ProtectionStateDescription = protectionStateDescriptionInstance;
                                }
                                
                                JToken activeLocationValue = propertiesValue["activeLocation"];
                                if (activeLocationValue != null && activeLocationValue.Type != JTokenType.Null)
                                {
                                    string activeLocationInstance = ((string)activeLocationValue);
                                    propertiesInstance.ActiveLocation = activeLocationInstance;
                                }
                                
                                JToken testFailoverStateValue = propertiesValue["testFailoverState"];
                                if (testFailoverStateValue != null && testFailoverStateValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateInstance = ((string)testFailoverStateValue);
                                    propertiesInstance.TestFailoverState = testFailoverStateInstance;
                                }
                                
                                JToken testFailoverStateDescriptionValue = propertiesValue["testFailoverStateDescription"];
                                if (testFailoverStateDescriptionValue != null && testFailoverStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateDescriptionInstance = ((string)testFailoverStateDescriptionValue);
                                    propertiesInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                    }
                                }
                                
                                JToken replicationHealthValue = propertiesValue["replicationHealth"];
                                if (replicationHealthValue != null && replicationHealthValue.Type != JTokenType.Null)
                                {
                                    string replicationHealthInstance = ((string)replicationHealthValue);
                                    propertiesInstance.ReplicationHealth = replicationHealthInstance;
                                }
                                
                                JToken replicationHealthErrorsArray = propertiesValue["replicationHealthErrors"];
                                if (replicationHealthErrorsArray != null && replicationHealthErrorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken replicationHealthErrorsValue in ((JArray)replicationHealthErrorsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.ReplicationHealthErrors.Add(healthErrorInstance);
                                        
                                        JToken errorLevelValue = replicationHealthErrorsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCodeValue = replicationHealthErrorsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = replicationHealthErrorsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = replicationHealthErrorsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = replicationHealthErrorsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = replicationHealthErrorsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            string creationTimeUtcInstance = ((string)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = replicationHealthErrorsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = replicationHealthErrorsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                    }
                                }
                                
                                JToken policyIdValue = propertiesValue["policyId"];
                                if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                {
                                    string policyIdInstance = ((string)policyIdValue);
                                    propertiesInstance.PolicyID = policyIdInstance;
                                }
                                
                                JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                    propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                }
                                
                                JToken lastSuccessfulFailoverTimeValue = propertiesValue["lastSuccessfulFailoverTime"];
                                if (lastSuccessfulFailoverTimeValue != null && lastSuccessfulFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSuccessfulFailoverTimeInstance = ((DateTime)lastSuccessfulFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulFailoverTime = lastSuccessfulFailoverTimeInstance;
                                }
                                
                                JToken lastSuccessfulTestFailoverTimeValue = propertiesValue["lastSuccessfulTestFailoverTime"];
                                if (lastSuccessfulTestFailoverTimeValue != null && lastSuccessfulTestFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSuccessfulTestFailoverTimeInstance = ((DateTime)lastSuccessfulTestFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulTestFailoverTime = lastSuccessfulTestFailoverTimeInstance;
                                }
                                
                                JToken currentScenarioValue = propertiesValue["currentScenario"];
                                if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                {
                                    CurrentScenarioDetails currentScenarioInstance = new CurrentScenarioDetails();
                                    propertiesInstance.CurrentScenario = currentScenarioInstance;
                                    
                                    JToken scenarioNameValue = currentScenarioValue["scenarioName"];
                                    if (scenarioNameValue != null && scenarioNameValue.Type != JTokenType.Null)
                                    {
                                        string scenarioNameInstance = ((string)scenarioNameValue);
                                        currentScenarioInstance.ScenarioName = scenarioNameInstance;
                                    }
                                    
                                    JToken jobIdValue = currentScenarioValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        currentScenarioInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken startTimeValue = currentScenarioValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        currentScenarioInstance.StartTime = startTimeInstance;
                                    }
                                }
                                
                                JToken failoverRecoveryPointIdValue = propertiesValue["failoverRecoveryPointId"];
                                if (failoverRecoveryPointIdValue != null && failoverRecoveryPointIdValue.Type != JTokenType.Null)
                                {
                                    string failoverRecoveryPointIdInstance = ((string)failoverRecoveryPointIdValue);
                                    propertiesInstance.FailoverRecoveryPointId = failoverRecoveryPointIdInstance;
                                }
                                
                                JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                    if (typeName == "HyperVReplica2012")
                                    {
                                        HyperVReplica2012ReplicationDetails hyperVReplica2012ReplicationDetailsInstance = new HyperVReplica2012ReplicationDetails();
                                        
                                        JToken lastReplicatedTimeValue = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue != null && lastReplicatedTimeValue.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance = ((string)lastReplicatedTimeValue);
                                            hyperVReplica2012ReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance;
                                        }
                                        
                                        JToken vmNicsArray = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray != null && vmNicsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue in ((JArray)vmNicsArray))
                                            {
                                                VMNicDetails vMNicDetailsInstance = new VMNicDetails();
                                                hyperVReplica2012ReplicationDetailsInstance.VmNics.Add(vMNicDetailsInstance);
                                                
                                                JToken nicIdValue = vmNicsValue["nicId"];
                                                if (nicIdValue != null && nicIdValue.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance = ((string)nicIdValue);
                                                    vMNicDetailsInstance.NicId = nicIdInstance;
                                                }
                                                
                                                JToken vMSubnetNameValue = vmNicsValue["vMSubnetName"];
                                                if (vMSubnetNameValue != null && vMSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance = ((string)vMSubnetNameValue);
                                                    vMNicDetailsInstance.VMSubnetName = vMSubnetNameInstance;
                                                }
                                                
                                                JToken vMNetworkNameValue = vmNicsValue["vMNetworkName"];
                                                if (vMNetworkNameValue != null && vMNetworkNameValue.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance = ((string)vMNetworkNameValue);
                                                    vMNicDetailsInstance.VMNetworkName = vMNetworkNameInstance;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue = vmNicsValue["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue != null && recoveryVMNetworkIdValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance = ((string)recoveryVMNetworkIdValue);
                                                    vMNicDetailsInstance.RecoveryVMNetworkId = recoveryVMNetworkIdInstance;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue = vmNicsValue["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue != null && recoveryVMSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance = ((string)recoveryVMSubnetNameValue);
                                                    vMNicDetailsInstance.RecoveryVMSubnetName = recoveryVMSubnetNameInstance;
                                                }
                                                
                                                JToken ipAddressTypeValue = vmNicsValue["ipAddressType"];
                                                if (ipAddressTypeValue != null && ipAddressTypeValue.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance = ((string)ipAddressTypeValue);
                                                    vMNicDetailsInstance.IpAddressType = ipAddressTypeInstance;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue = vmNicsValue["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue != null && replicaNicStaticIPAddressValue.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance = ((string)replicaNicStaticIPAddressValue);
                                                    vMNicDetailsInstance.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance;
                                                }
                                                
                                                JToken selectionTypeValue = vmNicsValue["selectionType"];
                                                if (selectionTypeValue != null && selectionTypeValue.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance = ((string)selectionTypeValue);
                                                    vMNicDetailsInstance.SelectionType = selectionTypeInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken initialReplicationDetailsValue = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue != null && initialReplicationDetailsValue.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance = new InitialReplicationDetails();
                                            hyperVReplica2012ReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance;
                                            
                                            JToken initialReplicationTypeValue = initialReplicationDetailsValue["initialReplicationType"];
                                            if (initialReplicationTypeValue != null && initialReplicationTypeValue.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance = ((string)initialReplicationTypeValue);
                                                initialReplicationDetailsInstance.InitialReplicationType = initialReplicationTypeInstance;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue = initialReplicationDetailsValue["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue != null && initialReplicationProgressPercentageValue.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance = ((string)initialReplicationProgressPercentageValue);
                                                initialReplicationDetailsInstance.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance;
                                            }
                                        }
                                        
                                        JToken vMDiskDetailsArray = providerSpecificDetailsValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray != null && vMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue in ((JArray)vMDiskDetailsArray))
                                            {
                                                DiskDetails diskDetailsInstance = new DiskDetails();
                                                hyperVReplica2012ReplicationDetailsInstance.VMDiskDetails.Add(diskDetailsInstance);
                                                
                                                JToken maxSizeMBValue = vMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue != null && maxSizeMBValue.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance = ((ulong)maxSizeMBValue);
                                                    diskDetailsInstance.MaxSizeMB = maxSizeMBInstance;
                                                }
                                                
                                                JToken vhdTypeValue = vMDiskDetailsValue["vhdType"];
                                                if (vhdTypeValue != null && vhdTypeValue.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance = ((string)vhdTypeValue);
                                                    diskDetailsInstance.VhdType = vhdTypeInstance;
                                                }
                                                
                                                JToken vhdIdValue = vMDiskDetailsValue["vhdId"];
                                                if (vhdIdValue != null && vhdIdValue.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance = ((string)vhdIdValue);
                                                    diskDetailsInstance.VhdId = vhdIdInstance;
                                                }
                                                
                                                JToken vhdNameValue = vMDiskDetailsValue["vhdName"];
                                                if (vhdNameValue != null && vhdNameValue.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance = ((string)vhdNameValue);
                                                    diskDetailsInstance.VhdName = vhdNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            hyperVReplica2012ReplicationDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplica2012ReplicationDetailsInstance;
                                    }
                                    if (typeName == "HyperVReplica2012R2")
                                    {
                                        HyperVReplica2012R2ReplicationDetails hyperVReplica2012R2ReplicationDetailsInstance = new HyperVReplica2012R2ReplicationDetails();
                                        
                                        JToken lastReplicatedTimeValue2 = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue2 != null && lastReplicatedTimeValue2.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance2 = ((string)lastReplicatedTimeValue2);
                                            hyperVReplica2012R2ReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance2;
                                        }
                                        
                                        JToken vmNicsArray2 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray2 != null && vmNicsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue2 in ((JArray)vmNicsArray2))
                                            {
                                                VMNicDetails vMNicDetailsInstance2 = new VMNicDetails();
                                                hyperVReplica2012R2ReplicationDetailsInstance.VmNics.Add(vMNicDetailsInstance2);
                                                
                                                JToken nicIdValue2 = vmNicsValue2["nicId"];
                                                if (nicIdValue2 != null && nicIdValue2.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance2 = ((string)nicIdValue2);
                                                    vMNicDetailsInstance2.NicId = nicIdInstance2;
                                                }
                                                
                                                JToken vMSubnetNameValue2 = vmNicsValue2["vMSubnetName"];
                                                if (vMSubnetNameValue2 != null && vMSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance2 = ((string)vMSubnetNameValue2);
                                                    vMNicDetailsInstance2.VMSubnetName = vMSubnetNameInstance2;
                                                }
                                                
                                                JToken vMNetworkNameValue2 = vmNicsValue2["vMNetworkName"];
                                                if (vMNetworkNameValue2 != null && vMNetworkNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance2 = ((string)vMNetworkNameValue2);
                                                    vMNicDetailsInstance2.VMNetworkName = vMNetworkNameInstance2;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue2 = vmNicsValue2["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue2 != null && recoveryVMNetworkIdValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance2 = ((string)recoveryVMNetworkIdValue2);
                                                    vMNicDetailsInstance2.RecoveryVMNetworkId = recoveryVMNetworkIdInstance2;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue2 = vmNicsValue2["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue2 != null && recoveryVMSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance2 = ((string)recoveryVMSubnetNameValue2);
                                                    vMNicDetailsInstance2.RecoveryVMSubnetName = recoveryVMSubnetNameInstance2;
                                                }
                                                
                                                JToken ipAddressTypeValue2 = vmNicsValue2["ipAddressType"];
                                                if (ipAddressTypeValue2 != null && ipAddressTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance2 = ((string)ipAddressTypeValue2);
                                                    vMNicDetailsInstance2.IpAddressType = ipAddressTypeInstance2;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue2 = vmNicsValue2["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue2 != null && replicaNicStaticIPAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance2 = ((string)replicaNicStaticIPAddressValue2);
                                                    vMNicDetailsInstance2.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance2;
                                                }
                                                
                                                JToken selectionTypeValue2 = vmNicsValue2["selectionType"];
                                                if (selectionTypeValue2 != null && selectionTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance2 = ((string)selectionTypeValue2);
                                                    vMNicDetailsInstance2.SelectionType = selectionTypeInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken initialReplicationDetailsValue2 = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue2 != null && initialReplicationDetailsValue2.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance2 = new InitialReplicationDetails();
                                            hyperVReplica2012R2ReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance2;
                                            
                                            JToken initialReplicationTypeValue2 = initialReplicationDetailsValue2["initialReplicationType"];
                                            if (initialReplicationTypeValue2 != null && initialReplicationTypeValue2.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance2 = ((string)initialReplicationTypeValue2);
                                                initialReplicationDetailsInstance2.InitialReplicationType = initialReplicationTypeInstance2;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue2 = initialReplicationDetailsValue2["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue2 != null && initialReplicationProgressPercentageValue2.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance2 = ((string)initialReplicationProgressPercentageValue2);
                                                initialReplicationDetailsInstance2.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance2;
                                            }
                                        }
                                        
                                        JToken vMDiskDetailsArray2 = providerSpecificDetailsValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray2 != null && vMDiskDetailsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue2 in ((JArray)vMDiskDetailsArray2))
                                            {
                                                DiskDetails diskDetailsInstance2 = new DiskDetails();
                                                hyperVReplica2012R2ReplicationDetailsInstance.VMDiskDetails.Add(diskDetailsInstance2);
                                                
                                                JToken maxSizeMBValue2 = vMDiskDetailsValue2["maxSizeMB"];
                                                if (maxSizeMBValue2 != null && maxSizeMBValue2.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance2 = ((ulong)maxSizeMBValue2);
                                                    diskDetailsInstance2.MaxSizeMB = maxSizeMBInstance2;
                                                }
                                                
                                                JToken vhdTypeValue2 = vMDiskDetailsValue2["vhdType"];
                                                if (vhdTypeValue2 != null && vhdTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance2 = ((string)vhdTypeValue2);
                                                    diskDetailsInstance2.VhdType = vhdTypeInstance2;
                                                }
                                                
                                                JToken vhdIdValue2 = vMDiskDetailsValue2["vhdId"];
                                                if (vhdIdValue2 != null && vhdIdValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance2 = ((string)vhdIdValue2);
                                                    diskDetailsInstance2.VhdId = vhdIdInstance2;
                                                }
                                                
                                                JToken vhdNameValue2 = vMDiskDetailsValue2["vhdName"];
                                                if (vhdNameValue2 != null && vhdNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance2 = ((string)vhdNameValue2);
                                                    diskDetailsInstance2.VhdName = vhdNameInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue2 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                            hyperVReplica2012R2ReplicationDetailsInstance.InstanceType = instanceTypeInstance2;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplica2012R2ReplicationDetailsInstance;
                                    }
                                    if (typeName == "VMwareAzureV2")
                                    {
                                        VMwareAzureV2ProviderSpecificSettings vMwareAzureV2ProviderSpecificSettingsInstance = new VMwareAzureV2ProviderSpecificSettings();
                                        
                                        JToken infrastructureVmIdValue = providerSpecificDetailsValue["infrastructureVmId"];
                                        if (infrastructureVmIdValue != null && infrastructureVmIdValue.Type != JTokenType.Null)
                                        {
                                            string infrastructureVmIdInstance = ((string)infrastructureVmIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.InfrastructureVmId = infrastructureVmIdInstance;
                                        }
                                        
                                        JToken vCenterInfrastructureIdValue = providerSpecificDetailsValue["vCenterInfrastructureId"];
                                        if (vCenterInfrastructureIdValue != null && vCenterInfrastructureIdValue.Type != JTokenType.Null)
                                        {
                                            string vCenterInfrastructureIdInstance = ((string)vCenterInfrastructureIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VCenterInfrastructureId = vCenterInfrastructureIdInstance;
                                        }
                                        
                                        JToken protectionStageValue = providerSpecificDetailsValue["protectionStage"];
                                        if (protectionStageValue != null && protectionStageValue.Type != JTokenType.Null)
                                        {
                                            string protectionStageInstance = ((string)protectionStageValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ProtectionStage = protectionStageInstance;
                                        }
                                        
                                        JToken healthErrorCodeValue = providerSpecificDetailsValue["healthErrorCode"];
                                        if (healthErrorCodeValue != null && healthErrorCodeValue.Type != JTokenType.Null)
                                        {
                                            string healthErrorCodeInstance = ((string)healthErrorCodeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.HealthErrorCode = healthErrorCodeInstance;
                                        }
                                        
                                        JToken resyncRequiredValue = providerSpecificDetailsValue["resyncRequired"];
                                        if (resyncRequiredValue != null && resyncRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool resyncRequiredInstance = ((bool)resyncRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ResyncRequired = resyncRequiredInstance;
                                        }
                                        
                                        JToken resyncProgressPercentageValue = providerSpecificDetailsValue["resyncProgressPercentage"];
                                        if (resyncProgressPercentageValue != null && resyncProgressPercentageValue.Type != JTokenType.Null)
                                        {
                                            int resyncProgressPercentageInstance = ((int)resyncProgressPercentageValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ResyncProgressPercentage = resyncProgressPercentageInstance;
                                        }
                                        
                                        JToken rpoInSecondsValue = providerSpecificDetailsValue["rpoInSeconds"];
                                        if (rpoInSecondsValue != null && rpoInSecondsValue.Type != JTokenType.Null)
                                        {
                                            long rpoInSecondsInstance = ((long)rpoInSecondsValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RpoInSeconds = rpoInSecondsInstance;
                                        }
                                        
                                        JToken compressedDataRateInMBValue = providerSpecificDetailsValue["compressedDataRateInMB"];
                                        if (compressedDataRateInMBValue != null && compressedDataRateInMBValue.Type != JTokenType.Null)
                                        {
                                            double compressedDataRateInMBInstance = ((double)compressedDataRateInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.CompressedDataRateInMB = compressedDataRateInMBInstance;
                                        }
                                        
                                        JToken uncompressedDataRateInMBValue = providerSpecificDetailsValue["uncompressedDataRateInMB"];
                                        if (uncompressedDataRateInMBValue != null && uncompressedDataRateInMBValue.Type != JTokenType.Null)
                                        {
                                            double uncompressedDataRateInMBInstance = ((double)uncompressedDataRateInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.UncompressedDataRateInMB = uncompressedDataRateInMBInstance;
                                        }
                                        
                                        JToken ipAddressValue = providerSpecificDetailsValue["ipAddress"];
                                        if (ipAddressValue != null && ipAddressValue.Type != JTokenType.Null)
                                        {
                                            string ipAddressInstance = ((string)ipAddressValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IpAddress = ipAddressInstance;
                                        }
                                        
                                        JToken agentVersionValue = providerSpecificDetailsValue["agentVersion"];
                                        if (agentVersionValue != null && agentVersionValue.Type != JTokenType.Null)
                                        {
                                            string agentVersionInstance = ((string)agentVersionValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.AgentVersion = agentVersionInstance;
                                        }
                                        
                                        JToken latestUpdateVersionValue = providerSpecificDetailsValue["latestUpdateVersion"];
                                        if (latestUpdateVersionValue != null && latestUpdateVersionValue.Type != JTokenType.Null)
                                        {
                                            string latestUpdateVersionInstance = ((string)latestUpdateVersionValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.LatestUpdateVersion = latestUpdateVersionInstance;
                                        }
                                        
                                        JToken isAgentUpdateRequiredValue = providerSpecificDetailsValue["isAgentUpdateRequired"];
                                        if (isAgentUpdateRequiredValue != null && isAgentUpdateRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool isAgentUpdateRequiredInstance = ((bool)isAgentUpdateRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IsAgentUpdateRequired = isAgentUpdateRequiredInstance;
                                        }
                                        
                                        JToken isRebootAfterUpdateRequiredValue = providerSpecificDetailsValue["isRebootAfterUpdateRequired"];
                                        if (isRebootAfterUpdateRequiredValue != null && isRebootAfterUpdateRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool isRebootAfterUpdateRequiredInstance = ((bool)isRebootAfterUpdateRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IsRebootAfterUpdateRequired = isRebootAfterUpdateRequiredInstance;
                                        }
                                        
                                        JToken lastHeartbeatValue = providerSpecificDetailsValue["lastHeartbeat"];
                                        if (lastHeartbeatValue != null && lastHeartbeatValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastHeartbeatInstance = ((DateTime)lastHeartbeatValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.LastHeartbeat = lastHeartbeatInstance;
                                        }
                                        
                                        JToken processServerIdValue = providerSpecificDetailsValue["processServerId"];
                                        if (processServerIdValue != null && processServerIdValue.Type != JTokenType.Null)
                                        {
                                            string processServerIdInstance = ((string)processServerIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ProcessServerId = processServerIdInstance;
                                        }
                                        
                                        JToken multiVmGroupIdValue = providerSpecificDetailsValue["multiVmGroupId"];
                                        if (multiVmGroupIdValue != null && multiVmGroupIdValue.Type != JTokenType.Null)
                                        {
                                            string multiVmGroupIdInstance = ((string)multiVmGroupIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MultiVmGroupId = multiVmGroupIdInstance;
                                        }
                                        
                                        JToken multiVmGroupNameValue = providerSpecificDetailsValue["multiVmGroupName"];
                                        if (multiVmGroupNameValue != null && multiVmGroupNameValue.Type != JTokenType.Null)
                                        {
                                            string multiVmGroupNameInstance = ((string)multiVmGroupNameValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MultiVmGroupName = multiVmGroupNameInstance;
                                        }
                                        
                                        JToken protectedVolumesArray = providerSpecificDetailsValue["protectedVolumes"];
                                        if (protectedVolumesArray != null && protectedVolumesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken protectedVolumesValue in ((JArray)protectedVolumesArray))
                                            {
                                                VMwareAzureV2ProtectedVolumeDetails vMwareAzureV2ProtectedVolumeDetailsInstance = new VMwareAzureV2ProtectedVolumeDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.ProtectedVolumes.Add(vMwareAzureV2ProtectedVolumeDetailsInstance);
                                                
                                                JToken nameValue = protectedVolumesValue["name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.Name = nameInstance;
                                                }
                                                
                                                JToken protectionStageValue2 = protectedVolumesValue["protectionStage"];
                                                if (protectionStageValue2 != null && protectionStageValue2.Type != JTokenType.Null)
                                                {
                                                    string protectionStageInstance2 = ((string)protectionStageValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ProtectionStage = protectionStageInstance2;
                                                }
                                                
                                                JToken healthErrorCodeValue2 = protectedVolumesValue["healthErrorCode"];
                                                if (healthErrorCodeValue2 != null && healthErrorCodeValue2.Type != JTokenType.Null)
                                                {
                                                    string healthErrorCodeInstance2 = ((string)healthErrorCodeValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.HealthErrorCode = healthErrorCodeInstance2;
                                                }
                                                
                                                JToken rpoInSecondsValue2 = protectedVolumesValue["rpoInSeconds"];
                                                if (rpoInSecondsValue2 != null && rpoInSecondsValue2.Type != JTokenType.Null)
                                                {
                                                    long rpoInSecondsInstance2 = ((long)rpoInSecondsValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.RpoInSeconds = rpoInSecondsInstance2;
                                                }
                                                
                                                JToken resyncRequiredValue2 = protectedVolumesValue["resyncRequired"];
                                                if (resyncRequiredValue2 != null && resyncRequiredValue2.Type != JTokenType.Null)
                                                {
                                                    bool resyncRequiredInstance2 = ((bool)resyncRequiredValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncRequired = resyncRequiredInstance2;
                                                }
                                                
                                                JToken resyncProgressPercentageValue2 = protectedVolumesValue["resyncProgressPercentage"];
                                                if (resyncProgressPercentageValue2 != null && resyncProgressPercentageValue2.Type != JTokenType.Null)
                                                {
                                                    int resyncProgressPercentageInstance2 = ((int)resyncProgressPercentageValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncProgressPercentage = resyncProgressPercentageInstance2;
                                                }
                                                
                                                JToken resyncDurationInSecondsValue = protectedVolumesValue["resyncDurationInSeconds"];
                                                if (resyncDurationInSecondsValue != null && resyncDurationInSecondsValue.Type != JTokenType.Null)
                                                {
                                                    long resyncDurationInSecondsInstance = ((long)resyncDurationInSecondsValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncDurationInSeconds = resyncDurationInSecondsInstance;
                                                }
                                                
                                                JToken volumeCapacityInBytesValue = protectedVolumesValue["volumeCapacityInBytes"];
                                                if (volumeCapacityInBytesValue != null && volumeCapacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long volumeCapacityInBytesInstance = ((long)volumeCapacityInBytesValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.VolumeCapacityInBytes = volumeCapacityInBytesInstance;
                                                }
                                                
                                                JToken fileSystemCapacityInBytesValue = protectedVolumesValue["fileSystemCapacityInBytes"];
                                                if (fileSystemCapacityInBytesValue != null && fileSystemCapacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long fileSystemCapacityInBytesInstance = ((long)fileSystemCapacityInBytesValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.FileSystemCapacityInBytes = fileSystemCapacityInBytesInstance;
                                                }
                                                
                                                JToken sourceDataInMBValue = protectedVolumesValue["sourceDataInMB"];
                                                if (sourceDataInMBValue != null && sourceDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double sourceDataInMBInstance = ((double)sourceDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.SourceDataInMB = sourceDataInMBInstance;
                                                }
                                                
                                                JToken psDataInMBValue = protectedVolumesValue["psDataInMB"];
                                                if (psDataInMBValue != null && psDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double psDataInMBInstance = ((double)psDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.PSDataInMB = psDataInMBInstance;
                                                }
                                                
                                                JToken targetDataInMBValue = protectedVolumesValue["targetDataInMB"];
                                                if (targetDataInMBValue != null && targetDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double targetDataInMBInstance = ((double)targetDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.TargetDataInMB = targetDataInMBInstance;
                                                }
                                                
                                                JToken volumeResizedValue = protectedVolumesValue["volumeResized"];
                                                if (volumeResizedValue != null && volumeResizedValue.Type != JTokenType.Null)
                                                {
                                                    bool volumeResizedInstance = ((bool)volumeResizedValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.VolumeResized = volumeResizedInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken volumeResizedValue2 = providerSpecificDetailsValue["volumeResized"];
                                        if (volumeResizedValue2 != null && volumeResizedValue2.Type != JTokenType.Null)
                                        {
                                            bool volumeResizedInstance2 = ((bool)volumeResizedValue2);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VolumeResized = volumeResizedInstance2;
                                        }
                                        
                                        JToken masterTargetIdValue = providerSpecificDetailsValue["masterTargetId"];
                                        if (masterTargetIdValue != null && masterTargetIdValue.Type != JTokenType.Null)
                                        {
                                            string masterTargetIdInstance = ((string)masterTargetIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MasterTargetId = masterTargetIdInstance;
                                        }
                                        
                                        JToken sourceVmCPUCountValue = providerSpecificDetailsValue["sourceVmCPUCount"];
                                        if (sourceVmCPUCountValue != null && sourceVmCPUCountValue.Type != JTokenType.Null)
                                        {
                                            int sourceVmCPUCountInstance = ((int)sourceVmCPUCountValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SourceVmCPUCount = sourceVmCPUCountInstance;
                                        }
                                        
                                        JToken sourceVmRAMSizeInMBValue = providerSpecificDetailsValue["sourceVmRAMSizeInMB"];
                                        if (sourceVmRAMSizeInMBValue != null && sourceVmRAMSizeInMBValue.Type != JTokenType.Null)
                                        {
                                            int sourceVmRAMSizeInMBInstance = ((int)sourceVmRAMSizeInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SourceVmRAMSizeInMB = sourceVmRAMSizeInMBInstance;
                                        }
                                        
                                        JToken osTypeValue = providerSpecificDetailsValue["osType"];
                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance = ((string)osTypeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.OSType = osTypeInstance;
                                        }
                                        
                                        JToken vhdNameValue3 = providerSpecificDetailsValue["vhdName"];
                                        if (vhdNameValue3 != null && vhdNameValue3.Type != JTokenType.Null)
                                        {
                                            string vhdNameInstance3 = ((string)vhdNameValue3);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VHDName = vhdNameInstance3;
                                        }
                                        
                                        JToken osDiskIdValue = providerSpecificDetailsValue["osDiskId"];
                                        if (osDiskIdValue != null && osDiskIdValue.Type != JTokenType.Null)
                                        {
                                            string osDiskIdInstance = ((string)osDiskIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.OSDiskId = osDiskIdInstance;
                                        }
                                        
                                        JToken azureVMDiskDetailsArray = providerSpecificDetailsValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsArray != null && azureVMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken azureVMDiskDetailsValue in ((JArray)azureVMDiskDetailsArray))
                                            {
                                                AzureVmDiskDetails azureVmDiskDetailsInstance = new AzureVmDiskDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.AzureVMDiskDetails.Add(azureVmDiskDetailsInstance);
                                                
                                                JToken vhdTypeValue3 = azureVMDiskDetailsValue["vhdType"];
                                                if (vhdTypeValue3 != null && vhdTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance3 = ((string)vhdTypeValue3);
                                                    azureVmDiskDetailsInstance.VhdType = vhdTypeInstance3;
                                                }
                                                
                                                JToken vhdIdValue3 = azureVMDiskDetailsValue["vhdId"];
                                                if (vhdIdValue3 != null && vhdIdValue3.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance3 = ((string)vhdIdValue3);
                                                    azureVmDiskDetailsInstance.VhdId = vhdIdInstance3;
                                                }
                                                
                                                JToken vhdNameValue4 = azureVMDiskDetailsValue["vhdName"];
                                                if (vhdNameValue4 != null && vhdNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance4 = ((string)vhdNameValue4);
                                                    azureVmDiskDetailsInstance.VhdName = vhdNameInstance4;
                                                }
                                                
                                                JToken maxSizeMBValue3 = azureVMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue3 != null && maxSizeMBValue3.Type != JTokenType.Null)
                                                {
                                                    string maxSizeMBInstance3 = ((string)maxSizeMBValue3);
                                                    azureVmDiskDetailsInstance.MaxSizeMB = maxSizeMBInstance3;
                                                }
                                                
                                                JToken targetDiskLocationValue = azureVMDiskDetailsValue["targetDiskLocation"];
                                                if (targetDiskLocationValue != null && targetDiskLocationValue.Type != JTokenType.Null)
                                                {
                                                    string targetDiskLocationInstance = ((string)targetDiskLocationValue);
                                                    azureVmDiskDetailsInstance.TargetDiskLocation = targetDiskLocationInstance;
                                                }
                                                
                                                JToken lunIdValue = azureVMDiskDetailsValue["lunId"];
                                                if (lunIdValue != null && lunIdValue.Type != JTokenType.Null)
                                                {
                                                    string lunIdInstance = ((string)lunIdValue);
                                                    azureVmDiskDetailsInstance.LunId = lunIdInstance;
                                                }
                                                
                                                JToken targetDiskNameValue = azureVMDiskDetailsValue["targetDiskName"];
                                                if (targetDiskNameValue != null && targetDiskNameValue.Type != JTokenType.Null)
                                                {
                                                    string targetDiskNameInstance = ((string)targetDiskNameValue);
                                                    azureVmDiskDetailsInstance.TargetDiskName = targetDiskNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue = providerSpecificDetailsValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue != null && recoveryAzureVMNameValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance = ((string)recoveryAzureVMNameValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue = providerSpecificDetailsValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue != null && recoveryAzureVMSizeValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance = ((string)recoveryAzureVMSizeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance;
                                        }
                                        
                                        JToken recoveryAzureStorageAccountValue = providerSpecificDetailsValue["recoveryAzureStorageAccount"];
                                        if (recoveryAzureStorageAccountValue != null && recoveryAzureStorageAccountValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureStorageAccountInstance = ((string)recoveryAzureStorageAccountValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureStorageAccount = recoveryAzureStorageAccountInstance;
                                        }
                                        
                                        JToken vmNicsArray3 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray3 != null && vmNicsArray3.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue3 in ((JArray)vmNicsArray3))
                                            {
                                                VMNicDetails vMNicDetailsInstance3 = new VMNicDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.VMNics.Add(vMNicDetailsInstance3);
                                                
                                                JToken nicIdValue3 = vmNicsValue3["nicId"];
                                                if (nicIdValue3 != null && nicIdValue3.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance3 = ((string)nicIdValue3);
                                                    vMNicDetailsInstance3.NicId = nicIdInstance3;
                                                }
                                                
                                                JToken vMSubnetNameValue3 = vmNicsValue3["vMSubnetName"];
                                                if (vMSubnetNameValue3 != null && vMSubnetNameValue3.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance3 = ((string)vMSubnetNameValue3);
                                                    vMNicDetailsInstance3.VMSubnetName = vMSubnetNameInstance3;
                                                }
                                                
                                                JToken vMNetworkNameValue3 = vmNicsValue3["vMNetworkName"];
                                                if (vMNetworkNameValue3 != null && vMNetworkNameValue3.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance3 = ((string)vMNetworkNameValue3);
                                                    vMNicDetailsInstance3.VMNetworkName = vMNetworkNameInstance3;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue3 = vmNicsValue3["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue3 != null && recoveryVMNetworkIdValue3.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance3 = ((string)recoveryVMNetworkIdValue3);
                                                    vMNicDetailsInstance3.RecoveryVMNetworkId = recoveryVMNetworkIdInstance3;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue3 = vmNicsValue3["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue3 != null && recoveryVMSubnetNameValue3.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance3 = ((string)recoveryVMSubnetNameValue3);
                                                    vMNicDetailsInstance3.RecoveryVMSubnetName = recoveryVMSubnetNameInstance3;
                                                }
                                                
                                                JToken ipAddressTypeValue3 = vmNicsValue3["ipAddressType"];
                                                if (ipAddressTypeValue3 != null && ipAddressTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance3 = ((string)ipAddressTypeValue3);
                                                    vMNicDetailsInstance3.IpAddressType = ipAddressTypeInstance3;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue3 = vmNicsValue3["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue3 != null && replicaNicStaticIPAddressValue3.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance3 = ((string)replicaNicStaticIPAddressValue3);
                                                    vMNicDetailsInstance3.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance3;
                                                }
                                                
                                                JToken selectionTypeValue3 = vmNicsValue3["selectionType"];
                                                if (selectionTypeValue3 != null && selectionTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance3 = ((string)selectionTypeValue3);
                                                    vMNicDetailsInstance3.SelectionType = selectionTypeInstance3;
                                                }
                                            }
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue = providerSpecificDetailsValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue != null && selectedRecoveryAzureNetworkIdValue.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance = ((string)selectedRecoveryAzureNetworkIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance;
                                        }
                                        
                                        JToken discoveryTypeValue = providerSpecificDetailsValue["discoveryType"];
                                        if (discoveryTypeValue != null && discoveryTypeValue.Type != JTokenType.Null)
                                        {
                                            string discoveryTypeInstance = ((string)discoveryTypeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.DiscoveryType = discoveryTypeInstance;
                                        }
                                        
                                        JToken instanceTypeValue3 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.InstanceType = instanceTypeInstance3;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = vMwareAzureV2ProviderSpecificSettingsInstance;
                                    }
                                    if (typeName == "HyperVReplicaAzure")
                                    {
                                        HyperVReplicaAzureReplicationDetails hyperVReplicaAzureReplicationDetailsInstance = new HyperVReplicaAzureReplicationDetails();
                                        
                                        JToken azureVMDiskDetailsArray2 = providerSpecificDetailsValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsArray2 != null && azureVMDiskDetailsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken azureVMDiskDetailsValue2 in ((JArray)azureVMDiskDetailsArray2))
                                            {
                                                AzureVmDiskDetails azureVmDiskDetailsInstance2 = new AzureVmDiskDetails();
                                                hyperVReplicaAzureReplicationDetailsInstance.AzureVMDiskDetails.Add(azureVmDiskDetailsInstance2);
                                                
                                                JToken vhdTypeValue4 = azureVMDiskDetailsValue2["vhdType"];
                                                if (vhdTypeValue4 != null && vhdTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance4 = ((string)vhdTypeValue4);
                                                    azureVmDiskDetailsInstance2.VhdType = vhdTypeInstance4;
                                                }
                                                
                                                JToken vhdIdValue4 = azureVMDiskDetailsValue2["vhdId"];
                                                if (vhdIdValue4 != null && vhdIdValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance4 = ((string)vhdIdValue4);
                                                    azureVmDiskDetailsInstance2.VhdId = vhdIdInstance4;
                                                }
                                                
                                                JToken vhdNameValue5 = azureVMDiskDetailsValue2["vhdName"];
                                                if (vhdNameValue5 != null && vhdNameValue5.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance5 = ((string)vhdNameValue5);
                                                    azureVmDiskDetailsInstance2.VhdName = vhdNameInstance5;
                                                }
                                                
                                                JToken maxSizeMBValue4 = azureVMDiskDetailsValue2["maxSizeMB"];
                                                if (maxSizeMBValue4 != null && maxSizeMBValue4.Type != JTokenType.Null)
                                                {
                                                    string maxSizeMBInstance4 = ((string)maxSizeMBValue4);
                                                    azureVmDiskDetailsInstance2.MaxSizeMB = maxSizeMBInstance4;
                                                }
                                                
                                                JToken targetDiskLocationValue2 = azureVMDiskDetailsValue2["targetDiskLocation"];
                                                if (targetDiskLocationValue2 != null && targetDiskLocationValue2.Type != JTokenType.Null)
                                                {
                                                    string targetDiskLocationInstance2 = ((string)targetDiskLocationValue2);
                                                    azureVmDiskDetailsInstance2.TargetDiskLocation = targetDiskLocationInstance2;
                                                }
                                                
                                                JToken lunIdValue2 = azureVMDiskDetailsValue2["lunId"];
                                                if (lunIdValue2 != null && lunIdValue2.Type != JTokenType.Null)
                                                {
                                                    string lunIdInstance2 = ((string)lunIdValue2);
                                                    azureVmDiskDetailsInstance2.LunId = lunIdInstance2;
                                                }
                                                
                                                JToken targetDiskNameValue2 = azureVMDiskDetailsValue2["targetDiskName"];
                                                if (targetDiskNameValue2 != null && targetDiskNameValue2.Type != JTokenType.Null)
                                                {
                                                    string targetDiskNameInstance2 = ((string)targetDiskNameValue2);
                                                    azureVmDiskDetailsInstance2.TargetDiskName = targetDiskNameInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue2 = providerSpecificDetailsValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue2 != null && recoveryAzureVMNameValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance2 = ((string)recoveryAzureVMNameValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance2;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue2 = providerSpecificDetailsValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue2 != null && recoveryAzureVMSizeValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance2 = ((string)recoveryAzureVMSizeValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance2;
                                        }
                                        
                                        JToken recoveryAzureStorageAccountValue2 = providerSpecificDetailsValue["recoveryAzureStorageAccount"];
                                        if (recoveryAzureStorageAccountValue2 != null && recoveryAzureStorageAccountValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureStorageAccountInstance2 = ((string)recoveryAzureStorageAccountValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureStorageAccount = recoveryAzureStorageAccountInstance2;
                                        }
                                        
                                        JToken lastReplicatedTimeValue3 = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue3 != null && lastReplicatedTimeValue3.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance3 = ((string)lastReplicatedTimeValue3);
                                            hyperVReplicaAzureReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance3;
                                        }
                                        
                                        JToken initialReplicationDetailsValue3 = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue3 != null && initialReplicationDetailsValue3.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance3 = new InitialReplicationDetails();
                                            hyperVReplicaAzureReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance3;
                                            
                                            JToken initialReplicationTypeValue3 = initialReplicationDetailsValue3["initialReplicationType"];
                                            if (initialReplicationTypeValue3 != null && initialReplicationTypeValue3.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance3 = ((string)initialReplicationTypeValue3);
                                                initialReplicationDetailsInstance3.InitialReplicationType = initialReplicationTypeInstance3;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue3 = initialReplicationDetailsValue3["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue3 != null && initialReplicationProgressPercentageValue3.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance3 = ((string)initialReplicationProgressPercentageValue3);
                                                initialReplicationDetailsInstance3.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance3;
                                            }
                                        }
                                        
                                        JToken vmNicsArray4 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray4 != null && vmNicsArray4.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue4 in ((JArray)vmNicsArray4))
                                            {
                                                VMNicDetails vMNicDetailsInstance4 = new VMNicDetails();
                                                hyperVReplicaAzureReplicationDetailsInstance.VMNics.Add(vMNicDetailsInstance4);
                                                
                                                JToken nicIdValue4 = vmNicsValue4["nicId"];
                                                if (nicIdValue4 != null && nicIdValue4.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance4 = ((string)nicIdValue4);
                                                    vMNicDetailsInstance4.NicId = nicIdInstance4;
                                                }
                                                
                                                JToken vMSubnetNameValue4 = vmNicsValue4["vMSubnetName"];
                                                if (vMSubnetNameValue4 != null && vMSubnetNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance4 = ((string)vMSubnetNameValue4);
                                                    vMNicDetailsInstance4.VMSubnetName = vMSubnetNameInstance4;
                                                }
                                                
                                                JToken vMNetworkNameValue4 = vmNicsValue4["vMNetworkName"];
                                                if (vMNetworkNameValue4 != null && vMNetworkNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance4 = ((string)vMNetworkNameValue4);
                                                    vMNicDetailsInstance4.VMNetworkName = vMNetworkNameInstance4;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue4 = vmNicsValue4["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue4 != null && recoveryVMNetworkIdValue4.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance4 = ((string)recoveryVMNetworkIdValue4);
                                                    vMNicDetailsInstance4.RecoveryVMNetworkId = recoveryVMNetworkIdInstance4;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue4 = vmNicsValue4["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue4 != null && recoveryVMSubnetNameValue4.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance4 = ((string)recoveryVMSubnetNameValue4);
                                                    vMNicDetailsInstance4.RecoveryVMSubnetName = recoveryVMSubnetNameInstance4;
                                                }
                                                
                                                JToken ipAddressTypeValue4 = vmNicsValue4["ipAddressType"];
                                                if (ipAddressTypeValue4 != null && ipAddressTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance4 = ((string)ipAddressTypeValue4);
                                                    vMNicDetailsInstance4.IpAddressType = ipAddressTypeInstance4;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue4 = vmNicsValue4["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue4 != null && replicaNicStaticIPAddressValue4.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance4 = ((string)replicaNicStaticIPAddressValue4);
                                                    vMNicDetailsInstance4.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance4;
                                                }
                                                
                                                JToken selectionTypeValue4 = vmNicsValue4["selectionType"];
                                                if (selectionTypeValue4 != null && selectionTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance4 = ((string)selectionTypeValue4);
                                                    vMNicDetailsInstance4.SelectionType = selectionTypeInstance4;
                                                }
                                            }
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue2 = providerSpecificDetailsValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue2 != null && selectedRecoveryAzureNetworkIdValue2.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance2 = ((string)selectedRecoveryAzureNetworkIdValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance2;
                                        }
                                        
                                        JToken encryptionValue = providerSpecificDetailsValue["encryption"];
                                        if (encryptionValue != null && encryptionValue.Type != JTokenType.Null)
                                        {
                                            string encryptionInstance = ((string)encryptionValue);
                                            hyperVReplicaAzureReplicationDetailsInstance.Encryption = encryptionInstance;
                                        }
                                        
                                        JToken oSDetailsValue = providerSpecificDetailsValue["oSDetails"];
                                        if (oSDetailsValue != null && oSDetailsValue.Type != JTokenType.Null)
                                        {
                                            OSDetails oSDetailsInstance = new OSDetails();
                                            hyperVReplicaAzureReplicationDetailsInstance.OSDetails = oSDetailsInstance;
                                            
                                            JToken osTypeValue2 = oSDetailsValue["osType"];
                                            if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                            {
                                                string osTypeInstance2 = ((string)osTypeValue2);
                                                oSDetailsInstance.OsType = osTypeInstance2;
                                            }
                                            
                                            JToken productTypeValue = oSDetailsValue["productType"];
                                            if (productTypeValue != null && productTypeValue.Type != JTokenType.Null)
                                            {
                                                string productTypeInstance = ((string)productTypeValue);
                                                oSDetailsInstance.ProductType = productTypeInstance;
                                            }
                                            
                                            JToken osEditionValue = oSDetailsValue["osEdition"];
                                            if (osEditionValue != null && osEditionValue.Type != JTokenType.Null)
                                            {
                                                string osEditionInstance = ((string)osEditionValue);
                                                oSDetailsInstance.OSEdition = osEditionInstance;
                                            }
                                            
                                            JToken oSVersionValue = oSDetailsValue["oSVersion"];
                                            if (oSVersionValue != null && oSVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSVersionInstance = ((string)oSVersionValue);
                                                oSDetailsInstance.OSVersion = oSVersionInstance;
                                            }
                                            
                                            JToken oSMajorVersionValue = oSDetailsValue["oSMajorVersion"];
                                            if (oSMajorVersionValue != null && oSMajorVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSMajorVersionInstance = ((string)oSMajorVersionValue);
                                                oSDetailsInstance.OSMajorVersion = oSMajorVersionInstance;
                                            }
                                            
                                            JToken oSMinorVersionValue = oSDetailsValue["oSMinorVersion"];
                                            if (oSMinorVersionValue != null && oSMinorVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSMinorVersionInstance = ((string)oSMinorVersionValue);
                                                oSDetailsInstance.OSMinorVersion = oSMinorVersionInstance;
                                            }
                                        }
                                        
                                        JToken sourceVmRAMSizeInMBValue2 = providerSpecificDetailsValue["sourceVmRAMSizeInMB"];
                                        if (sourceVmRAMSizeInMBValue2 != null && sourceVmRAMSizeInMBValue2.Type != JTokenType.Null)
                                        {
                                            int sourceVmRAMSizeInMBInstance2 = ((int)sourceVmRAMSizeInMBValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SourceVmRAMSizeInMB = sourceVmRAMSizeInMBInstance2;
                                        }
                                        
                                        JToken sourceVmCPUCountValue2 = providerSpecificDetailsValue["sourceVmCPUCount"];
                                        if (sourceVmCPUCountValue2 != null && sourceVmCPUCountValue2.Type != JTokenType.Null)
                                        {
                                            int sourceVmCPUCountInstance2 = ((int)sourceVmCPUCountValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SourceVmCPUCount = sourceVmCPUCountInstance2;
                                        }
                                        
                                        JToken instanceTypeValue4 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue4 != null && instanceTypeValue4.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance4 = ((string)instanceTypeValue4);
                                            hyperVReplicaAzureReplicationDetailsInstance.InstanceType = instanceTypeInstance4;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplicaAzureReplicationDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                replicationProtectedItemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                replicationProtectedItemInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                replicationProtectedItemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                replicationProtectedItemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    replicationProtectedItemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> GetDisableStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetDisableStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new LongRunningOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken locationValue = responseDoc["Location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                result.Location = locationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Service response for replication protected items operation.
        /// </returns>
        public async Task<ReplicationProtectedItemOperationResponse> GetEnableStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetEnableStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ReplicationProtectedItemOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ReplicationProtectedItemOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ReplicationProtectedItem replicationProtectedItemInstance = new ReplicationProtectedItem();
                            result.ReplicationProtectedItem = replicationProtectedItemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ReplicationProtectedItemProperties propertiesInstance = new ReplicationProtectedItemProperties();
                                replicationProtectedItemInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken protectedItemTypeValue = propertiesValue["protectedItemType"];
                                if (protectedItemTypeValue != null && protectedItemTypeValue.Type != JTokenType.Null)
                                {
                                    string protectedItemTypeInstance = ((string)protectedItemTypeValue);
                                    propertiesInstance.ProtectedItemType = protectedItemTypeInstance;
                                }
                                
                                JToken protectableItemIdValue = propertiesValue["protectableItemId"];
                                if (protectableItemIdValue != null && protectableItemIdValue.Type != JTokenType.Null)
                                {
                                    string protectableItemIdInstance = ((string)protectableItemIdValue);
                                    propertiesInstance.ProtectableItemId = protectableItemIdInstance;
                                }
                                
                                JToken recoveryServicesProviderIdValue = propertiesValue["recoveryServicesProviderId"];
                                if (recoveryServicesProviderIdValue != null && recoveryServicesProviderIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryServicesProviderIdInstance = ((string)recoveryServicesProviderIdValue);
                                    propertiesInstance.RecoveryServicesProviderId = recoveryServicesProviderIdInstance;
                                }
                                
                                JToken primaryFabricFriendlyNameValue = propertiesValue["primaryFabricFriendlyName"];
                                if (primaryFabricFriendlyNameValue != null && primaryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricFriendlyNameInstance = ((string)primaryFabricFriendlyNameValue);
                                    propertiesInstance.PrimaryFabricFriendlyName = primaryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricFriendlyNameValue = propertiesValue["recoveryFabricFriendlyName"];
                                if (recoveryFabricFriendlyNameValue != null && recoveryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricFriendlyNameInstance = ((string)recoveryFabricFriendlyNameValue);
                                    propertiesInstance.RecoveryFabricFriendlyName = recoveryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricIdValue = propertiesValue["recoveryFabricId"];
                                if (recoveryFabricIdValue != null && recoveryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricIdInstance = ((string)recoveryFabricIdValue);
                                    propertiesInstance.RecoveryFabricId = recoveryFabricIdInstance;
                                }
                                
                                JToken primaryProtectionContainerFriendlyNameValue = propertiesValue["primaryProtectionContainerFriendlyName"];
                                if (primaryProtectionContainerFriendlyNameValue != null && primaryProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryProtectionContainerFriendlyNameInstance = ((string)primaryProtectionContainerFriendlyNameValue);
                                    propertiesInstance.PrimaryProtectionContainerFriendlyName = primaryProtectionContainerFriendlyNameInstance;
                                }
                                
                                JToken recoveryProtectionContainerFriendlyNameValue = propertiesValue["recoveryProtectionContainerFriendlyName"];
                                if (recoveryProtectionContainerFriendlyNameValue != null && recoveryProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryProtectionContainerFriendlyNameInstance = ((string)recoveryProtectionContainerFriendlyNameValue);
                                    propertiesInstance.RecoveryProtectionContainerFriendlyName = recoveryProtectionContainerFriendlyNameInstance;
                                }
                                
                                JToken protectionStateValue = propertiesValue["protectionState"];
                                if (protectionStateValue != null && protectionStateValue.Type != JTokenType.Null)
                                {
                                    string protectionStateInstance = ((string)protectionStateValue);
                                    propertiesInstance.ProtectionState = protectionStateInstance;
                                }
                                
                                JToken protectionStateDescriptionValue = propertiesValue["protectionStateDescription"];
                                if (protectionStateDescriptionValue != null && protectionStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string protectionStateDescriptionInstance = ((string)protectionStateDescriptionValue);
                                    propertiesInstance.ProtectionStateDescription = protectionStateDescriptionInstance;
                                }
                                
                                JToken activeLocationValue = propertiesValue["activeLocation"];
                                if (activeLocationValue != null && activeLocationValue.Type != JTokenType.Null)
                                {
                                    string activeLocationInstance = ((string)activeLocationValue);
                                    propertiesInstance.ActiveLocation = activeLocationInstance;
                                }
                                
                                JToken testFailoverStateValue = propertiesValue["testFailoverState"];
                                if (testFailoverStateValue != null && testFailoverStateValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateInstance = ((string)testFailoverStateValue);
                                    propertiesInstance.TestFailoverState = testFailoverStateInstance;
                                }
                                
                                JToken testFailoverStateDescriptionValue = propertiesValue["testFailoverStateDescription"];
                                if (testFailoverStateDescriptionValue != null && testFailoverStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateDescriptionInstance = ((string)testFailoverStateDescriptionValue);
                                    propertiesInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                    }
                                }
                                
                                JToken replicationHealthValue = propertiesValue["replicationHealth"];
                                if (replicationHealthValue != null && replicationHealthValue.Type != JTokenType.Null)
                                {
                                    string replicationHealthInstance = ((string)replicationHealthValue);
                                    propertiesInstance.ReplicationHealth = replicationHealthInstance;
                                }
                                
                                JToken replicationHealthErrorsArray = propertiesValue["replicationHealthErrors"];
                                if (replicationHealthErrorsArray != null && replicationHealthErrorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken replicationHealthErrorsValue in ((JArray)replicationHealthErrorsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.ReplicationHealthErrors.Add(healthErrorInstance);
                                        
                                        JToken errorLevelValue = replicationHealthErrorsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCodeValue = replicationHealthErrorsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = replicationHealthErrorsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = replicationHealthErrorsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = replicationHealthErrorsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = replicationHealthErrorsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            string creationTimeUtcInstance = ((string)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = replicationHealthErrorsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = replicationHealthErrorsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                    }
                                }
                                
                                JToken policyIdValue = propertiesValue["policyId"];
                                if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                {
                                    string policyIdInstance = ((string)policyIdValue);
                                    propertiesInstance.PolicyID = policyIdInstance;
                                }
                                
                                JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                    propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                }
                                
                                JToken lastSuccessfulFailoverTimeValue = propertiesValue["lastSuccessfulFailoverTime"];
                                if (lastSuccessfulFailoverTimeValue != null && lastSuccessfulFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSuccessfulFailoverTimeInstance = ((DateTime)lastSuccessfulFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulFailoverTime = lastSuccessfulFailoverTimeInstance;
                                }
                                
                                JToken lastSuccessfulTestFailoverTimeValue = propertiesValue["lastSuccessfulTestFailoverTime"];
                                if (lastSuccessfulTestFailoverTimeValue != null && lastSuccessfulTestFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSuccessfulTestFailoverTimeInstance = ((DateTime)lastSuccessfulTestFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulTestFailoverTime = lastSuccessfulTestFailoverTimeInstance;
                                }
                                
                                JToken currentScenarioValue = propertiesValue["currentScenario"];
                                if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                {
                                    CurrentScenarioDetails currentScenarioInstance = new CurrentScenarioDetails();
                                    propertiesInstance.CurrentScenario = currentScenarioInstance;
                                    
                                    JToken scenarioNameValue = currentScenarioValue["scenarioName"];
                                    if (scenarioNameValue != null && scenarioNameValue.Type != JTokenType.Null)
                                    {
                                        string scenarioNameInstance = ((string)scenarioNameValue);
                                        currentScenarioInstance.ScenarioName = scenarioNameInstance;
                                    }
                                    
                                    JToken jobIdValue = currentScenarioValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        currentScenarioInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken startTimeValue = currentScenarioValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        currentScenarioInstance.StartTime = startTimeInstance;
                                    }
                                }
                                
                                JToken failoverRecoveryPointIdValue = propertiesValue["failoverRecoveryPointId"];
                                if (failoverRecoveryPointIdValue != null && failoverRecoveryPointIdValue.Type != JTokenType.Null)
                                {
                                    string failoverRecoveryPointIdInstance = ((string)failoverRecoveryPointIdValue);
                                    propertiesInstance.FailoverRecoveryPointId = failoverRecoveryPointIdInstance;
                                }
                                
                                JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                    if (typeName == "HyperVReplica2012")
                                    {
                                        HyperVReplica2012ReplicationDetails hyperVReplica2012ReplicationDetailsInstance = new HyperVReplica2012ReplicationDetails();
                                        
                                        JToken lastReplicatedTimeValue = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue != null && lastReplicatedTimeValue.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance = ((string)lastReplicatedTimeValue);
                                            hyperVReplica2012ReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance;
                                        }
                                        
                                        JToken vmNicsArray = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray != null && vmNicsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue in ((JArray)vmNicsArray))
                                            {
                                                VMNicDetails vMNicDetailsInstance = new VMNicDetails();
                                                hyperVReplica2012ReplicationDetailsInstance.VmNics.Add(vMNicDetailsInstance);
                                                
                                                JToken nicIdValue = vmNicsValue["nicId"];
                                                if (nicIdValue != null && nicIdValue.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance = ((string)nicIdValue);
                                                    vMNicDetailsInstance.NicId = nicIdInstance;
                                                }
                                                
                                                JToken vMSubnetNameValue = vmNicsValue["vMSubnetName"];
                                                if (vMSubnetNameValue != null && vMSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance = ((string)vMSubnetNameValue);
                                                    vMNicDetailsInstance.VMSubnetName = vMSubnetNameInstance;
                                                }
                                                
                                                JToken vMNetworkNameValue = vmNicsValue["vMNetworkName"];
                                                if (vMNetworkNameValue != null && vMNetworkNameValue.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance = ((string)vMNetworkNameValue);
                                                    vMNicDetailsInstance.VMNetworkName = vMNetworkNameInstance;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue = vmNicsValue["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue != null && recoveryVMNetworkIdValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance = ((string)recoveryVMNetworkIdValue);
                                                    vMNicDetailsInstance.RecoveryVMNetworkId = recoveryVMNetworkIdInstance;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue = vmNicsValue["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue != null && recoveryVMSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance = ((string)recoveryVMSubnetNameValue);
                                                    vMNicDetailsInstance.RecoveryVMSubnetName = recoveryVMSubnetNameInstance;
                                                }
                                                
                                                JToken ipAddressTypeValue = vmNicsValue["ipAddressType"];
                                                if (ipAddressTypeValue != null && ipAddressTypeValue.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance = ((string)ipAddressTypeValue);
                                                    vMNicDetailsInstance.IpAddressType = ipAddressTypeInstance;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue = vmNicsValue["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue != null && replicaNicStaticIPAddressValue.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance = ((string)replicaNicStaticIPAddressValue);
                                                    vMNicDetailsInstance.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance;
                                                }
                                                
                                                JToken selectionTypeValue = vmNicsValue["selectionType"];
                                                if (selectionTypeValue != null && selectionTypeValue.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance = ((string)selectionTypeValue);
                                                    vMNicDetailsInstance.SelectionType = selectionTypeInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken initialReplicationDetailsValue = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue != null && initialReplicationDetailsValue.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance = new InitialReplicationDetails();
                                            hyperVReplica2012ReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance;
                                            
                                            JToken initialReplicationTypeValue = initialReplicationDetailsValue["initialReplicationType"];
                                            if (initialReplicationTypeValue != null && initialReplicationTypeValue.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance = ((string)initialReplicationTypeValue);
                                                initialReplicationDetailsInstance.InitialReplicationType = initialReplicationTypeInstance;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue = initialReplicationDetailsValue["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue != null && initialReplicationProgressPercentageValue.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance = ((string)initialReplicationProgressPercentageValue);
                                                initialReplicationDetailsInstance.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance;
                                            }
                                        }
                                        
                                        JToken vMDiskDetailsArray = providerSpecificDetailsValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray != null && vMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue in ((JArray)vMDiskDetailsArray))
                                            {
                                                DiskDetails diskDetailsInstance = new DiskDetails();
                                                hyperVReplica2012ReplicationDetailsInstance.VMDiskDetails.Add(diskDetailsInstance);
                                                
                                                JToken maxSizeMBValue = vMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue != null && maxSizeMBValue.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance = ((ulong)maxSizeMBValue);
                                                    diskDetailsInstance.MaxSizeMB = maxSizeMBInstance;
                                                }
                                                
                                                JToken vhdTypeValue = vMDiskDetailsValue["vhdType"];
                                                if (vhdTypeValue != null && vhdTypeValue.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance = ((string)vhdTypeValue);
                                                    diskDetailsInstance.VhdType = vhdTypeInstance;
                                                }
                                                
                                                JToken vhdIdValue = vMDiskDetailsValue["vhdId"];
                                                if (vhdIdValue != null && vhdIdValue.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance = ((string)vhdIdValue);
                                                    diskDetailsInstance.VhdId = vhdIdInstance;
                                                }
                                                
                                                JToken vhdNameValue = vMDiskDetailsValue["vhdName"];
                                                if (vhdNameValue != null && vhdNameValue.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance = ((string)vhdNameValue);
                                                    diskDetailsInstance.VhdName = vhdNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            hyperVReplica2012ReplicationDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplica2012ReplicationDetailsInstance;
                                    }
                                    if (typeName == "HyperVReplica2012R2")
                                    {
                                        HyperVReplica2012R2ReplicationDetails hyperVReplica2012R2ReplicationDetailsInstance = new HyperVReplica2012R2ReplicationDetails();
                                        
                                        JToken lastReplicatedTimeValue2 = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue2 != null && lastReplicatedTimeValue2.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance2 = ((string)lastReplicatedTimeValue2);
                                            hyperVReplica2012R2ReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance2;
                                        }
                                        
                                        JToken vmNicsArray2 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray2 != null && vmNicsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue2 in ((JArray)vmNicsArray2))
                                            {
                                                VMNicDetails vMNicDetailsInstance2 = new VMNicDetails();
                                                hyperVReplica2012R2ReplicationDetailsInstance.VmNics.Add(vMNicDetailsInstance2);
                                                
                                                JToken nicIdValue2 = vmNicsValue2["nicId"];
                                                if (nicIdValue2 != null && nicIdValue2.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance2 = ((string)nicIdValue2);
                                                    vMNicDetailsInstance2.NicId = nicIdInstance2;
                                                }
                                                
                                                JToken vMSubnetNameValue2 = vmNicsValue2["vMSubnetName"];
                                                if (vMSubnetNameValue2 != null && vMSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance2 = ((string)vMSubnetNameValue2);
                                                    vMNicDetailsInstance2.VMSubnetName = vMSubnetNameInstance2;
                                                }
                                                
                                                JToken vMNetworkNameValue2 = vmNicsValue2["vMNetworkName"];
                                                if (vMNetworkNameValue2 != null && vMNetworkNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance2 = ((string)vMNetworkNameValue2);
                                                    vMNicDetailsInstance2.VMNetworkName = vMNetworkNameInstance2;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue2 = vmNicsValue2["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue2 != null && recoveryVMNetworkIdValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance2 = ((string)recoveryVMNetworkIdValue2);
                                                    vMNicDetailsInstance2.RecoveryVMNetworkId = recoveryVMNetworkIdInstance2;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue2 = vmNicsValue2["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue2 != null && recoveryVMSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance2 = ((string)recoveryVMSubnetNameValue2);
                                                    vMNicDetailsInstance2.RecoveryVMSubnetName = recoveryVMSubnetNameInstance2;
                                                }
                                                
                                                JToken ipAddressTypeValue2 = vmNicsValue2["ipAddressType"];
                                                if (ipAddressTypeValue2 != null && ipAddressTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance2 = ((string)ipAddressTypeValue2);
                                                    vMNicDetailsInstance2.IpAddressType = ipAddressTypeInstance2;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue2 = vmNicsValue2["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue2 != null && replicaNicStaticIPAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance2 = ((string)replicaNicStaticIPAddressValue2);
                                                    vMNicDetailsInstance2.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance2;
                                                }
                                                
                                                JToken selectionTypeValue2 = vmNicsValue2["selectionType"];
                                                if (selectionTypeValue2 != null && selectionTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance2 = ((string)selectionTypeValue2);
                                                    vMNicDetailsInstance2.SelectionType = selectionTypeInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken initialReplicationDetailsValue2 = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue2 != null && initialReplicationDetailsValue2.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance2 = new InitialReplicationDetails();
                                            hyperVReplica2012R2ReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance2;
                                            
                                            JToken initialReplicationTypeValue2 = initialReplicationDetailsValue2["initialReplicationType"];
                                            if (initialReplicationTypeValue2 != null && initialReplicationTypeValue2.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance2 = ((string)initialReplicationTypeValue2);
                                                initialReplicationDetailsInstance2.InitialReplicationType = initialReplicationTypeInstance2;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue2 = initialReplicationDetailsValue2["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue2 != null && initialReplicationProgressPercentageValue2.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance2 = ((string)initialReplicationProgressPercentageValue2);
                                                initialReplicationDetailsInstance2.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance2;
                                            }
                                        }
                                        
                                        JToken vMDiskDetailsArray2 = providerSpecificDetailsValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray2 != null && vMDiskDetailsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue2 in ((JArray)vMDiskDetailsArray2))
                                            {
                                                DiskDetails diskDetailsInstance2 = new DiskDetails();
                                                hyperVReplica2012R2ReplicationDetailsInstance.VMDiskDetails.Add(diskDetailsInstance2);
                                                
                                                JToken maxSizeMBValue2 = vMDiskDetailsValue2["maxSizeMB"];
                                                if (maxSizeMBValue2 != null && maxSizeMBValue2.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance2 = ((ulong)maxSizeMBValue2);
                                                    diskDetailsInstance2.MaxSizeMB = maxSizeMBInstance2;
                                                }
                                                
                                                JToken vhdTypeValue2 = vMDiskDetailsValue2["vhdType"];
                                                if (vhdTypeValue2 != null && vhdTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance2 = ((string)vhdTypeValue2);
                                                    diskDetailsInstance2.VhdType = vhdTypeInstance2;
                                                }
                                                
                                                JToken vhdIdValue2 = vMDiskDetailsValue2["vhdId"];
                                                if (vhdIdValue2 != null && vhdIdValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance2 = ((string)vhdIdValue2);
                                                    diskDetailsInstance2.VhdId = vhdIdInstance2;
                                                }
                                                
                                                JToken vhdNameValue2 = vMDiskDetailsValue2["vhdName"];
                                                if (vhdNameValue2 != null && vhdNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance2 = ((string)vhdNameValue2);
                                                    diskDetailsInstance2.VhdName = vhdNameInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue2 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                            hyperVReplica2012R2ReplicationDetailsInstance.InstanceType = instanceTypeInstance2;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplica2012R2ReplicationDetailsInstance;
                                    }
                                    if (typeName == "VMwareAzureV2")
                                    {
                                        VMwareAzureV2ProviderSpecificSettings vMwareAzureV2ProviderSpecificSettingsInstance = new VMwareAzureV2ProviderSpecificSettings();
                                        
                                        JToken infrastructureVmIdValue = providerSpecificDetailsValue["infrastructureVmId"];
                                        if (infrastructureVmIdValue != null && infrastructureVmIdValue.Type != JTokenType.Null)
                                        {
                                            string infrastructureVmIdInstance = ((string)infrastructureVmIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.InfrastructureVmId = infrastructureVmIdInstance;
                                        }
                                        
                                        JToken vCenterInfrastructureIdValue = providerSpecificDetailsValue["vCenterInfrastructureId"];
                                        if (vCenterInfrastructureIdValue != null && vCenterInfrastructureIdValue.Type != JTokenType.Null)
                                        {
                                            string vCenterInfrastructureIdInstance = ((string)vCenterInfrastructureIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VCenterInfrastructureId = vCenterInfrastructureIdInstance;
                                        }
                                        
                                        JToken protectionStageValue = providerSpecificDetailsValue["protectionStage"];
                                        if (protectionStageValue != null && protectionStageValue.Type != JTokenType.Null)
                                        {
                                            string protectionStageInstance = ((string)protectionStageValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ProtectionStage = protectionStageInstance;
                                        }
                                        
                                        JToken healthErrorCodeValue = providerSpecificDetailsValue["healthErrorCode"];
                                        if (healthErrorCodeValue != null && healthErrorCodeValue.Type != JTokenType.Null)
                                        {
                                            string healthErrorCodeInstance = ((string)healthErrorCodeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.HealthErrorCode = healthErrorCodeInstance;
                                        }
                                        
                                        JToken resyncRequiredValue = providerSpecificDetailsValue["resyncRequired"];
                                        if (resyncRequiredValue != null && resyncRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool resyncRequiredInstance = ((bool)resyncRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ResyncRequired = resyncRequiredInstance;
                                        }
                                        
                                        JToken resyncProgressPercentageValue = providerSpecificDetailsValue["resyncProgressPercentage"];
                                        if (resyncProgressPercentageValue != null && resyncProgressPercentageValue.Type != JTokenType.Null)
                                        {
                                            int resyncProgressPercentageInstance = ((int)resyncProgressPercentageValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ResyncProgressPercentage = resyncProgressPercentageInstance;
                                        }
                                        
                                        JToken rpoInSecondsValue = providerSpecificDetailsValue["rpoInSeconds"];
                                        if (rpoInSecondsValue != null && rpoInSecondsValue.Type != JTokenType.Null)
                                        {
                                            long rpoInSecondsInstance = ((long)rpoInSecondsValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RpoInSeconds = rpoInSecondsInstance;
                                        }
                                        
                                        JToken compressedDataRateInMBValue = providerSpecificDetailsValue["compressedDataRateInMB"];
                                        if (compressedDataRateInMBValue != null && compressedDataRateInMBValue.Type != JTokenType.Null)
                                        {
                                            double compressedDataRateInMBInstance = ((double)compressedDataRateInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.CompressedDataRateInMB = compressedDataRateInMBInstance;
                                        }
                                        
                                        JToken uncompressedDataRateInMBValue = providerSpecificDetailsValue["uncompressedDataRateInMB"];
                                        if (uncompressedDataRateInMBValue != null && uncompressedDataRateInMBValue.Type != JTokenType.Null)
                                        {
                                            double uncompressedDataRateInMBInstance = ((double)uncompressedDataRateInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.UncompressedDataRateInMB = uncompressedDataRateInMBInstance;
                                        }
                                        
                                        JToken ipAddressValue = providerSpecificDetailsValue["ipAddress"];
                                        if (ipAddressValue != null && ipAddressValue.Type != JTokenType.Null)
                                        {
                                            string ipAddressInstance = ((string)ipAddressValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IpAddress = ipAddressInstance;
                                        }
                                        
                                        JToken agentVersionValue = providerSpecificDetailsValue["agentVersion"];
                                        if (agentVersionValue != null && agentVersionValue.Type != JTokenType.Null)
                                        {
                                            string agentVersionInstance = ((string)agentVersionValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.AgentVersion = agentVersionInstance;
                                        }
                                        
                                        JToken latestUpdateVersionValue = providerSpecificDetailsValue["latestUpdateVersion"];
                                        if (latestUpdateVersionValue != null && latestUpdateVersionValue.Type != JTokenType.Null)
                                        {
                                            string latestUpdateVersionInstance = ((string)latestUpdateVersionValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.LatestUpdateVersion = latestUpdateVersionInstance;
                                        }
                                        
                                        JToken isAgentUpdateRequiredValue = providerSpecificDetailsValue["isAgentUpdateRequired"];
                                        if (isAgentUpdateRequiredValue != null && isAgentUpdateRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool isAgentUpdateRequiredInstance = ((bool)isAgentUpdateRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IsAgentUpdateRequired = isAgentUpdateRequiredInstance;
                                        }
                                        
                                        JToken isRebootAfterUpdateRequiredValue = providerSpecificDetailsValue["isRebootAfterUpdateRequired"];
                                        if (isRebootAfterUpdateRequiredValue != null && isRebootAfterUpdateRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool isRebootAfterUpdateRequiredInstance = ((bool)isRebootAfterUpdateRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IsRebootAfterUpdateRequired = isRebootAfterUpdateRequiredInstance;
                                        }
                                        
                                        JToken lastHeartbeatValue = providerSpecificDetailsValue["lastHeartbeat"];
                                        if (lastHeartbeatValue != null && lastHeartbeatValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastHeartbeatInstance = ((DateTime)lastHeartbeatValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.LastHeartbeat = lastHeartbeatInstance;
                                        }
                                        
                                        JToken processServerIdValue = providerSpecificDetailsValue["processServerId"];
                                        if (processServerIdValue != null && processServerIdValue.Type != JTokenType.Null)
                                        {
                                            string processServerIdInstance = ((string)processServerIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ProcessServerId = processServerIdInstance;
                                        }
                                        
                                        JToken multiVmGroupIdValue = providerSpecificDetailsValue["multiVmGroupId"];
                                        if (multiVmGroupIdValue != null && multiVmGroupIdValue.Type != JTokenType.Null)
                                        {
                                            string multiVmGroupIdInstance = ((string)multiVmGroupIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MultiVmGroupId = multiVmGroupIdInstance;
                                        }
                                        
                                        JToken multiVmGroupNameValue = providerSpecificDetailsValue["multiVmGroupName"];
                                        if (multiVmGroupNameValue != null && multiVmGroupNameValue.Type != JTokenType.Null)
                                        {
                                            string multiVmGroupNameInstance = ((string)multiVmGroupNameValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MultiVmGroupName = multiVmGroupNameInstance;
                                        }
                                        
                                        JToken protectedVolumesArray = providerSpecificDetailsValue["protectedVolumes"];
                                        if (protectedVolumesArray != null && protectedVolumesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken protectedVolumesValue in ((JArray)protectedVolumesArray))
                                            {
                                                VMwareAzureV2ProtectedVolumeDetails vMwareAzureV2ProtectedVolumeDetailsInstance = new VMwareAzureV2ProtectedVolumeDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.ProtectedVolumes.Add(vMwareAzureV2ProtectedVolumeDetailsInstance);
                                                
                                                JToken nameValue = protectedVolumesValue["name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.Name = nameInstance;
                                                }
                                                
                                                JToken protectionStageValue2 = protectedVolumesValue["protectionStage"];
                                                if (protectionStageValue2 != null && protectionStageValue2.Type != JTokenType.Null)
                                                {
                                                    string protectionStageInstance2 = ((string)protectionStageValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ProtectionStage = protectionStageInstance2;
                                                }
                                                
                                                JToken healthErrorCodeValue2 = protectedVolumesValue["healthErrorCode"];
                                                if (healthErrorCodeValue2 != null && healthErrorCodeValue2.Type != JTokenType.Null)
                                                {
                                                    string healthErrorCodeInstance2 = ((string)healthErrorCodeValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.HealthErrorCode = healthErrorCodeInstance2;
                                                }
                                                
                                                JToken rpoInSecondsValue2 = protectedVolumesValue["rpoInSeconds"];
                                                if (rpoInSecondsValue2 != null && rpoInSecondsValue2.Type != JTokenType.Null)
                                                {
                                                    long rpoInSecondsInstance2 = ((long)rpoInSecondsValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.RpoInSeconds = rpoInSecondsInstance2;
                                                }
                                                
                                                JToken resyncRequiredValue2 = protectedVolumesValue["resyncRequired"];
                                                if (resyncRequiredValue2 != null && resyncRequiredValue2.Type != JTokenType.Null)
                                                {
                                                    bool resyncRequiredInstance2 = ((bool)resyncRequiredValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncRequired = resyncRequiredInstance2;
                                                }
                                                
                                                JToken resyncProgressPercentageValue2 = protectedVolumesValue["resyncProgressPercentage"];
                                                if (resyncProgressPercentageValue2 != null && resyncProgressPercentageValue2.Type != JTokenType.Null)
                                                {
                                                    int resyncProgressPercentageInstance2 = ((int)resyncProgressPercentageValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncProgressPercentage = resyncProgressPercentageInstance2;
                                                }
                                                
                                                JToken resyncDurationInSecondsValue = protectedVolumesValue["resyncDurationInSeconds"];
                                                if (resyncDurationInSecondsValue != null && resyncDurationInSecondsValue.Type != JTokenType.Null)
                                                {
                                                    long resyncDurationInSecondsInstance = ((long)resyncDurationInSecondsValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncDurationInSeconds = resyncDurationInSecondsInstance;
                                                }
                                                
                                                JToken volumeCapacityInBytesValue = protectedVolumesValue["volumeCapacityInBytes"];
                                                if (volumeCapacityInBytesValue != null && volumeCapacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long volumeCapacityInBytesInstance = ((long)volumeCapacityInBytesValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.VolumeCapacityInBytes = volumeCapacityInBytesInstance;
                                                }
                                                
                                                JToken fileSystemCapacityInBytesValue = protectedVolumesValue["fileSystemCapacityInBytes"];
                                                if (fileSystemCapacityInBytesValue != null && fileSystemCapacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long fileSystemCapacityInBytesInstance = ((long)fileSystemCapacityInBytesValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.FileSystemCapacityInBytes = fileSystemCapacityInBytesInstance;
                                                }
                                                
                                                JToken sourceDataInMBValue = protectedVolumesValue["sourceDataInMB"];
                                                if (sourceDataInMBValue != null && sourceDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double sourceDataInMBInstance = ((double)sourceDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.SourceDataInMB = sourceDataInMBInstance;
                                                }
                                                
                                                JToken psDataInMBValue = protectedVolumesValue["psDataInMB"];
                                                if (psDataInMBValue != null && psDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double psDataInMBInstance = ((double)psDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.PSDataInMB = psDataInMBInstance;
                                                }
                                                
                                                JToken targetDataInMBValue = protectedVolumesValue["targetDataInMB"];
                                                if (targetDataInMBValue != null && targetDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double targetDataInMBInstance = ((double)targetDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.TargetDataInMB = targetDataInMBInstance;
                                                }
                                                
                                                JToken volumeResizedValue = protectedVolumesValue["volumeResized"];
                                                if (volumeResizedValue != null && volumeResizedValue.Type != JTokenType.Null)
                                                {
                                                    bool volumeResizedInstance = ((bool)volumeResizedValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.VolumeResized = volumeResizedInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken volumeResizedValue2 = providerSpecificDetailsValue["volumeResized"];
                                        if (volumeResizedValue2 != null && volumeResizedValue2.Type != JTokenType.Null)
                                        {
                                            bool volumeResizedInstance2 = ((bool)volumeResizedValue2);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VolumeResized = volumeResizedInstance2;
                                        }
                                        
                                        JToken masterTargetIdValue = providerSpecificDetailsValue["masterTargetId"];
                                        if (masterTargetIdValue != null && masterTargetIdValue.Type != JTokenType.Null)
                                        {
                                            string masterTargetIdInstance = ((string)masterTargetIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MasterTargetId = masterTargetIdInstance;
                                        }
                                        
                                        JToken sourceVmCPUCountValue = providerSpecificDetailsValue["sourceVmCPUCount"];
                                        if (sourceVmCPUCountValue != null && sourceVmCPUCountValue.Type != JTokenType.Null)
                                        {
                                            int sourceVmCPUCountInstance = ((int)sourceVmCPUCountValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SourceVmCPUCount = sourceVmCPUCountInstance;
                                        }
                                        
                                        JToken sourceVmRAMSizeInMBValue = providerSpecificDetailsValue["sourceVmRAMSizeInMB"];
                                        if (sourceVmRAMSizeInMBValue != null && sourceVmRAMSizeInMBValue.Type != JTokenType.Null)
                                        {
                                            int sourceVmRAMSizeInMBInstance = ((int)sourceVmRAMSizeInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SourceVmRAMSizeInMB = sourceVmRAMSizeInMBInstance;
                                        }
                                        
                                        JToken osTypeValue = providerSpecificDetailsValue["osType"];
                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance = ((string)osTypeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.OSType = osTypeInstance;
                                        }
                                        
                                        JToken vhdNameValue3 = providerSpecificDetailsValue["vhdName"];
                                        if (vhdNameValue3 != null && vhdNameValue3.Type != JTokenType.Null)
                                        {
                                            string vhdNameInstance3 = ((string)vhdNameValue3);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VHDName = vhdNameInstance3;
                                        }
                                        
                                        JToken osDiskIdValue = providerSpecificDetailsValue["osDiskId"];
                                        if (osDiskIdValue != null && osDiskIdValue.Type != JTokenType.Null)
                                        {
                                            string osDiskIdInstance = ((string)osDiskIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.OSDiskId = osDiskIdInstance;
                                        }
                                        
                                        JToken azureVMDiskDetailsArray = providerSpecificDetailsValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsArray != null && azureVMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken azureVMDiskDetailsValue in ((JArray)azureVMDiskDetailsArray))
                                            {
                                                AzureVmDiskDetails azureVmDiskDetailsInstance = new AzureVmDiskDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.AzureVMDiskDetails.Add(azureVmDiskDetailsInstance);
                                                
                                                JToken vhdTypeValue3 = azureVMDiskDetailsValue["vhdType"];
                                                if (vhdTypeValue3 != null && vhdTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance3 = ((string)vhdTypeValue3);
                                                    azureVmDiskDetailsInstance.VhdType = vhdTypeInstance3;
                                                }
                                                
                                                JToken vhdIdValue3 = azureVMDiskDetailsValue["vhdId"];
                                                if (vhdIdValue3 != null && vhdIdValue3.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance3 = ((string)vhdIdValue3);
                                                    azureVmDiskDetailsInstance.VhdId = vhdIdInstance3;
                                                }
                                                
                                                JToken vhdNameValue4 = azureVMDiskDetailsValue["vhdName"];
                                                if (vhdNameValue4 != null && vhdNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance4 = ((string)vhdNameValue4);
                                                    azureVmDiskDetailsInstance.VhdName = vhdNameInstance4;
                                                }
                                                
                                                JToken maxSizeMBValue3 = azureVMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue3 != null && maxSizeMBValue3.Type != JTokenType.Null)
                                                {
                                                    string maxSizeMBInstance3 = ((string)maxSizeMBValue3);
                                                    azureVmDiskDetailsInstance.MaxSizeMB = maxSizeMBInstance3;
                                                }
                                                
                                                JToken targetDiskLocationValue = azureVMDiskDetailsValue["targetDiskLocation"];
                                                if (targetDiskLocationValue != null && targetDiskLocationValue.Type != JTokenType.Null)
                                                {
                                                    string targetDiskLocationInstance = ((string)targetDiskLocationValue);
                                                    azureVmDiskDetailsInstance.TargetDiskLocation = targetDiskLocationInstance;
                                                }
                                                
                                                JToken lunIdValue = azureVMDiskDetailsValue["lunId"];
                                                if (lunIdValue != null && lunIdValue.Type != JTokenType.Null)
                                                {
                                                    string lunIdInstance = ((string)lunIdValue);
                                                    azureVmDiskDetailsInstance.LunId = lunIdInstance;
                                                }
                                                
                                                JToken targetDiskNameValue = azureVMDiskDetailsValue["targetDiskName"];
                                                if (targetDiskNameValue != null && targetDiskNameValue.Type != JTokenType.Null)
                                                {
                                                    string targetDiskNameInstance = ((string)targetDiskNameValue);
                                                    azureVmDiskDetailsInstance.TargetDiskName = targetDiskNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue = providerSpecificDetailsValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue != null && recoveryAzureVMNameValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance = ((string)recoveryAzureVMNameValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue = providerSpecificDetailsValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue != null && recoveryAzureVMSizeValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance = ((string)recoveryAzureVMSizeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance;
                                        }
                                        
                                        JToken recoveryAzureStorageAccountValue = providerSpecificDetailsValue["recoveryAzureStorageAccount"];
                                        if (recoveryAzureStorageAccountValue != null && recoveryAzureStorageAccountValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureStorageAccountInstance = ((string)recoveryAzureStorageAccountValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureStorageAccount = recoveryAzureStorageAccountInstance;
                                        }
                                        
                                        JToken vmNicsArray3 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray3 != null && vmNicsArray3.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue3 in ((JArray)vmNicsArray3))
                                            {
                                                VMNicDetails vMNicDetailsInstance3 = new VMNicDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.VMNics.Add(vMNicDetailsInstance3);
                                                
                                                JToken nicIdValue3 = vmNicsValue3["nicId"];
                                                if (nicIdValue3 != null && nicIdValue3.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance3 = ((string)nicIdValue3);
                                                    vMNicDetailsInstance3.NicId = nicIdInstance3;
                                                }
                                                
                                                JToken vMSubnetNameValue3 = vmNicsValue3["vMSubnetName"];
                                                if (vMSubnetNameValue3 != null && vMSubnetNameValue3.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance3 = ((string)vMSubnetNameValue3);
                                                    vMNicDetailsInstance3.VMSubnetName = vMSubnetNameInstance3;
                                                }
                                                
                                                JToken vMNetworkNameValue3 = vmNicsValue3["vMNetworkName"];
                                                if (vMNetworkNameValue3 != null && vMNetworkNameValue3.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance3 = ((string)vMNetworkNameValue3);
                                                    vMNicDetailsInstance3.VMNetworkName = vMNetworkNameInstance3;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue3 = vmNicsValue3["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue3 != null && recoveryVMNetworkIdValue3.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance3 = ((string)recoveryVMNetworkIdValue3);
                                                    vMNicDetailsInstance3.RecoveryVMNetworkId = recoveryVMNetworkIdInstance3;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue3 = vmNicsValue3["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue3 != null && recoveryVMSubnetNameValue3.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance3 = ((string)recoveryVMSubnetNameValue3);
                                                    vMNicDetailsInstance3.RecoveryVMSubnetName = recoveryVMSubnetNameInstance3;
                                                }
                                                
                                                JToken ipAddressTypeValue3 = vmNicsValue3["ipAddressType"];
                                                if (ipAddressTypeValue3 != null && ipAddressTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance3 = ((string)ipAddressTypeValue3);
                                                    vMNicDetailsInstance3.IpAddressType = ipAddressTypeInstance3;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue3 = vmNicsValue3["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue3 != null && replicaNicStaticIPAddressValue3.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance3 = ((string)replicaNicStaticIPAddressValue3);
                                                    vMNicDetailsInstance3.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance3;
                                                }
                                                
                                                JToken selectionTypeValue3 = vmNicsValue3["selectionType"];
                                                if (selectionTypeValue3 != null && selectionTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance3 = ((string)selectionTypeValue3);
                                                    vMNicDetailsInstance3.SelectionType = selectionTypeInstance3;
                                                }
                                            }
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue = providerSpecificDetailsValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue != null && selectedRecoveryAzureNetworkIdValue.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance = ((string)selectedRecoveryAzureNetworkIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance;
                                        }
                                        
                                        JToken discoveryTypeValue = providerSpecificDetailsValue["discoveryType"];
                                        if (discoveryTypeValue != null && discoveryTypeValue.Type != JTokenType.Null)
                                        {
                                            string discoveryTypeInstance = ((string)discoveryTypeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.DiscoveryType = discoveryTypeInstance;
                                        }
                                        
                                        JToken instanceTypeValue3 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.InstanceType = instanceTypeInstance3;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = vMwareAzureV2ProviderSpecificSettingsInstance;
                                    }
                                    if (typeName == "HyperVReplicaAzure")
                                    {
                                        HyperVReplicaAzureReplicationDetails hyperVReplicaAzureReplicationDetailsInstance = new HyperVReplicaAzureReplicationDetails();
                                        
                                        JToken azureVMDiskDetailsArray2 = providerSpecificDetailsValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsArray2 != null && azureVMDiskDetailsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken azureVMDiskDetailsValue2 in ((JArray)azureVMDiskDetailsArray2))
                                            {
                                                AzureVmDiskDetails azureVmDiskDetailsInstance2 = new AzureVmDiskDetails();
                                                hyperVReplicaAzureReplicationDetailsInstance.AzureVMDiskDetails.Add(azureVmDiskDetailsInstance2);
                                                
                                                JToken vhdTypeValue4 = azureVMDiskDetailsValue2["vhdType"];
                                                if (vhdTypeValue4 != null && vhdTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance4 = ((string)vhdTypeValue4);
                                                    azureVmDiskDetailsInstance2.VhdType = vhdTypeInstance4;
                                                }
                                                
                                                JToken vhdIdValue4 = azureVMDiskDetailsValue2["vhdId"];
                                                if (vhdIdValue4 != null && vhdIdValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance4 = ((string)vhdIdValue4);
                                                    azureVmDiskDetailsInstance2.VhdId = vhdIdInstance4;
                                                }
                                                
                                                JToken vhdNameValue5 = azureVMDiskDetailsValue2["vhdName"];
                                                if (vhdNameValue5 != null && vhdNameValue5.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance5 = ((string)vhdNameValue5);
                                                    azureVmDiskDetailsInstance2.VhdName = vhdNameInstance5;
                                                }
                                                
                                                JToken maxSizeMBValue4 = azureVMDiskDetailsValue2["maxSizeMB"];
                                                if (maxSizeMBValue4 != null && maxSizeMBValue4.Type != JTokenType.Null)
                                                {
                                                    string maxSizeMBInstance4 = ((string)maxSizeMBValue4);
                                                    azureVmDiskDetailsInstance2.MaxSizeMB = maxSizeMBInstance4;
                                                }
                                                
                                                JToken targetDiskLocationValue2 = azureVMDiskDetailsValue2["targetDiskLocation"];
                                                if (targetDiskLocationValue2 != null && targetDiskLocationValue2.Type != JTokenType.Null)
                                                {
                                                    string targetDiskLocationInstance2 = ((string)targetDiskLocationValue2);
                                                    azureVmDiskDetailsInstance2.TargetDiskLocation = targetDiskLocationInstance2;
                                                }
                                                
                                                JToken lunIdValue2 = azureVMDiskDetailsValue2["lunId"];
                                                if (lunIdValue2 != null && lunIdValue2.Type != JTokenType.Null)
                                                {
                                                    string lunIdInstance2 = ((string)lunIdValue2);
                                                    azureVmDiskDetailsInstance2.LunId = lunIdInstance2;
                                                }
                                                
                                                JToken targetDiskNameValue2 = azureVMDiskDetailsValue2["targetDiskName"];
                                                if (targetDiskNameValue2 != null && targetDiskNameValue2.Type != JTokenType.Null)
                                                {
                                                    string targetDiskNameInstance2 = ((string)targetDiskNameValue2);
                                                    azureVmDiskDetailsInstance2.TargetDiskName = targetDiskNameInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue2 = providerSpecificDetailsValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue2 != null && recoveryAzureVMNameValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance2 = ((string)recoveryAzureVMNameValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance2;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue2 = providerSpecificDetailsValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue2 != null && recoveryAzureVMSizeValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance2 = ((string)recoveryAzureVMSizeValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance2;
                                        }
                                        
                                        JToken recoveryAzureStorageAccountValue2 = providerSpecificDetailsValue["recoveryAzureStorageAccount"];
                                        if (recoveryAzureStorageAccountValue2 != null && recoveryAzureStorageAccountValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureStorageAccountInstance2 = ((string)recoveryAzureStorageAccountValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureStorageAccount = recoveryAzureStorageAccountInstance2;
                                        }
                                        
                                        JToken lastReplicatedTimeValue3 = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue3 != null && lastReplicatedTimeValue3.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance3 = ((string)lastReplicatedTimeValue3);
                                            hyperVReplicaAzureReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance3;
                                        }
                                        
                                        JToken initialReplicationDetailsValue3 = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue3 != null && initialReplicationDetailsValue3.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance3 = new InitialReplicationDetails();
                                            hyperVReplicaAzureReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance3;
                                            
                                            JToken initialReplicationTypeValue3 = initialReplicationDetailsValue3["initialReplicationType"];
                                            if (initialReplicationTypeValue3 != null && initialReplicationTypeValue3.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance3 = ((string)initialReplicationTypeValue3);
                                                initialReplicationDetailsInstance3.InitialReplicationType = initialReplicationTypeInstance3;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue3 = initialReplicationDetailsValue3["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue3 != null && initialReplicationProgressPercentageValue3.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance3 = ((string)initialReplicationProgressPercentageValue3);
                                                initialReplicationDetailsInstance3.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance3;
                                            }
                                        }
                                        
                                        JToken vmNicsArray4 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray4 != null && vmNicsArray4.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue4 in ((JArray)vmNicsArray4))
                                            {
                                                VMNicDetails vMNicDetailsInstance4 = new VMNicDetails();
                                                hyperVReplicaAzureReplicationDetailsInstance.VMNics.Add(vMNicDetailsInstance4);
                                                
                                                JToken nicIdValue4 = vmNicsValue4["nicId"];
                                                if (nicIdValue4 != null && nicIdValue4.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance4 = ((string)nicIdValue4);
                                                    vMNicDetailsInstance4.NicId = nicIdInstance4;
                                                }
                                                
                                                JToken vMSubnetNameValue4 = vmNicsValue4["vMSubnetName"];
                                                if (vMSubnetNameValue4 != null && vMSubnetNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance4 = ((string)vMSubnetNameValue4);
                                                    vMNicDetailsInstance4.VMSubnetName = vMSubnetNameInstance4;
                                                }
                                                
                                                JToken vMNetworkNameValue4 = vmNicsValue4["vMNetworkName"];
                                                if (vMNetworkNameValue4 != null && vMNetworkNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance4 = ((string)vMNetworkNameValue4);
                                                    vMNicDetailsInstance4.VMNetworkName = vMNetworkNameInstance4;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue4 = vmNicsValue4["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue4 != null && recoveryVMNetworkIdValue4.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance4 = ((string)recoveryVMNetworkIdValue4);
                                                    vMNicDetailsInstance4.RecoveryVMNetworkId = recoveryVMNetworkIdInstance4;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue4 = vmNicsValue4["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue4 != null && recoveryVMSubnetNameValue4.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance4 = ((string)recoveryVMSubnetNameValue4);
                                                    vMNicDetailsInstance4.RecoveryVMSubnetName = recoveryVMSubnetNameInstance4;
                                                }
                                                
                                                JToken ipAddressTypeValue4 = vmNicsValue4["ipAddressType"];
                                                if (ipAddressTypeValue4 != null && ipAddressTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance4 = ((string)ipAddressTypeValue4);
                                                    vMNicDetailsInstance4.IpAddressType = ipAddressTypeInstance4;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue4 = vmNicsValue4["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue4 != null && replicaNicStaticIPAddressValue4.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance4 = ((string)replicaNicStaticIPAddressValue4);
                                                    vMNicDetailsInstance4.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance4;
                                                }
                                                
                                                JToken selectionTypeValue4 = vmNicsValue4["selectionType"];
                                                if (selectionTypeValue4 != null && selectionTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance4 = ((string)selectionTypeValue4);
                                                    vMNicDetailsInstance4.SelectionType = selectionTypeInstance4;
                                                }
                                            }
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue2 = providerSpecificDetailsValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue2 != null && selectedRecoveryAzureNetworkIdValue2.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance2 = ((string)selectedRecoveryAzureNetworkIdValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance2;
                                        }
                                        
                                        JToken encryptionValue = providerSpecificDetailsValue["encryption"];
                                        if (encryptionValue != null && encryptionValue.Type != JTokenType.Null)
                                        {
                                            string encryptionInstance = ((string)encryptionValue);
                                            hyperVReplicaAzureReplicationDetailsInstance.Encryption = encryptionInstance;
                                        }
                                        
                                        JToken oSDetailsValue = providerSpecificDetailsValue["oSDetails"];
                                        if (oSDetailsValue != null && oSDetailsValue.Type != JTokenType.Null)
                                        {
                                            OSDetails oSDetailsInstance = new OSDetails();
                                            hyperVReplicaAzureReplicationDetailsInstance.OSDetails = oSDetailsInstance;
                                            
                                            JToken osTypeValue2 = oSDetailsValue["osType"];
                                            if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                            {
                                                string osTypeInstance2 = ((string)osTypeValue2);
                                                oSDetailsInstance.OsType = osTypeInstance2;
                                            }
                                            
                                            JToken productTypeValue = oSDetailsValue["productType"];
                                            if (productTypeValue != null && productTypeValue.Type != JTokenType.Null)
                                            {
                                                string productTypeInstance = ((string)productTypeValue);
                                                oSDetailsInstance.ProductType = productTypeInstance;
                                            }
                                            
                                            JToken osEditionValue = oSDetailsValue["osEdition"];
                                            if (osEditionValue != null && osEditionValue.Type != JTokenType.Null)
                                            {
                                                string osEditionInstance = ((string)osEditionValue);
                                                oSDetailsInstance.OSEdition = osEditionInstance;
                                            }
                                            
                                            JToken oSVersionValue = oSDetailsValue["oSVersion"];
                                            if (oSVersionValue != null && oSVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSVersionInstance = ((string)oSVersionValue);
                                                oSDetailsInstance.OSVersion = oSVersionInstance;
                                            }
                                            
                                            JToken oSMajorVersionValue = oSDetailsValue["oSMajorVersion"];
                                            if (oSMajorVersionValue != null && oSMajorVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSMajorVersionInstance = ((string)oSMajorVersionValue);
                                                oSDetailsInstance.OSMajorVersion = oSMajorVersionInstance;
                                            }
                                            
                                            JToken oSMinorVersionValue = oSDetailsValue["oSMinorVersion"];
                                            if (oSMinorVersionValue != null && oSMinorVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSMinorVersionInstance = ((string)oSMinorVersionValue);
                                                oSDetailsInstance.OSMinorVersion = oSMinorVersionInstance;
                                            }
                                        }
                                        
                                        JToken sourceVmRAMSizeInMBValue2 = providerSpecificDetailsValue["sourceVmRAMSizeInMB"];
                                        if (sourceVmRAMSizeInMBValue2 != null && sourceVmRAMSizeInMBValue2.Type != JTokenType.Null)
                                        {
                                            int sourceVmRAMSizeInMBInstance2 = ((int)sourceVmRAMSizeInMBValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SourceVmRAMSizeInMB = sourceVmRAMSizeInMBInstance2;
                                        }
                                        
                                        JToken sourceVmCPUCountValue2 = providerSpecificDetailsValue["sourceVmCPUCount"];
                                        if (sourceVmCPUCountValue2 != null && sourceVmCPUCountValue2.Type != JTokenType.Null)
                                        {
                                            int sourceVmCPUCountInstance2 = ((int)sourceVmCPUCountValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SourceVmCPUCount = sourceVmCPUCountInstance2;
                                        }
                                        
                                        JToken instanceTypeValue4 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue4 != null && instanceTypeValue4.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance4 = ((string)instanceTypeValue4);
                                            hyperVReplicaAzureReplicationDetailsInstance.InstanceType = instanceTypeInstance4;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplicaAzureReplicationDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                replicationProtectedItemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                replicationProtectedItemInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                replicationProtectedItemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                replicationProtectedItemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    replicationProtectedItemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Service response for replication protected items operation.
        /// </returns>
        public async Task<ReplicationProtectedItemOperationResponse> GetPlannedFailoverStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetPlannedFailoverStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ReplicationProtectedItemOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ReplicationProtectedItemOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ReplicationProtectedItem replicationProtectedItemInstance = new ReplicationProtectedItem();
                            result.ReplicationProtectedItem = replicationProtectedItemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ReplicationProtectedItemProperties propertiesInstance = new ReplicationProtectedItemProperties();
                                replicationProtectedItemInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken protectedItemTypeValue = propertiesValue["protectedItemType"];
                                if (protectedItemTypeValue != null && protectedItemTypeValue.Type != JTokenType.Null)
                                {
                                    string protectedItemTypeInstance = ((string)protectedItemTypeValue);
                                    propertiesInstance.ProtectedItemType = protectedItemTypeInstance;
                                }
                                
                                JToken protectableItemIdValue = propertiesValue["protectableItemId"];
                                if (protectableItemIdValue != null && protectableItemIdValue.Type != JTokenType.Null)
                                {
                                    string protectableItemIdInstance = ((string)protectableItemIdValue);
                                    propertiesInstance.ProtectableItemId = protectableItemIdInstance;
                                }
                                
                                JToken recoveryServicesProviderIdValue = propertiesValue["recoveryServicesProviderId"];
                                if (recoveryServicesProviderIdValue != null && recoveryServicesProviderIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryServicesProviderIdInstance = ((string)recoveryServicesProviderIdValue);
                                    propertiesInstance.RecoveryServicesProviderId = recoveryServicesProviderIdInstance;
                                }
                                
                                JToken primaryFabricFriendlyNameValue = propertiesValue["primaryFabricFriendlyName"];
                                if (primaryFabricFriendlyNameValue != null && primaryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricFriendlyNameInstance = ((string)primaryFabricFriendlyNameValue);
                                    propertiesInstance.PrimaryFabricFriendlyName = primaryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricFriendlyNameValue = propertiesValue["recoveryFabricFriendlyName"];
                                if (recoveryFabricFriendlyNameValue != null && recoveryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricFriendlyNameInstance = ((string)recoveryFabricFriendlyNameValue);
                                    propertiesInstance.RecoveryFabricFriendlyName = recoveryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricIdValue = propertiesValue["recoveryFabricId"];
                                if (recoveryFabricIdValue != null && recoveryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricIdInstance = ((string)recoveryFabricIdValue);
                                    propertiesInstance.RecoveryFabricId = recoveryFabricIdInstance;
                                }
                                
                                JToken primaryProtectionContainerFriendlyNameValue = propertiesValue["primaryProtectionContainerFriendlyName"];
                                if (primaryProtectionContainerFriendlyNameValue != null && primaryProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryProtectionContainerFriendlyNameInstance = ((string)primaryProtectionContainerFriendlyNameValue);
                                    propertiesInstance.PrimaryProtectionContainerFriendlyName = primaryProtectionContainerFriendlyNameInstance;
                                }
                                
                                JToken recoveryProtectionContainerFriendlyNameValue = propertiesValue["recoveryProtectionContainerFriendlyName"];
                                if (recoveryProtectionContainerFriendlyNameValue != null && recoveryProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryProtectionContainerFriendlyNameInstance = ((string)recoveryProtectionContainerFriendlyNameValue);
                                    propertiesInstance.RecoveryProtectionContainerFriendlyName = recoveryProtectionContainerFriendlyNameInstance;
                                }
                                
                                JToken protectionStateValue = propertiesValue["protectionState"];
                                if (protectionStateValue != null && protectionStateValue.Type != JTokenType.Null)
                                {
                                    string protectionStateInstance = ((string)protectionStateValue);
                                    propertiesInstance.ProtectionState = protectionStateInstance;
                                }
                                
                                JToken protectionStateDescriptionValue = propertiesValue["protectionStateDescription"];
                                if (protectionStateDescriptionValue != null && protectionStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string protectionStateDescriptionInstance = ((string)protectionStateDescriptionValue);
                                    propertiesInstance.ProtectionStateDescription = protectionStateDescriptionInstance;
                                }
                                
                                JToken activeLocationValue = propertiesValue["activeLocation"];
                                if (activeLocationValue != null && activeLocationValue.Type != JTokenType.Null)
                                {
                                    string activeLocationInstance = ((string)activeLocationValue);
                                    propertiesInstance.ActiveLocation = activeLocationInstance;
                                }
                                
                                JToken testFailoverStateValue = propertiesValue["testFailoverState"];
                                if (testFailoverStateValue != null && testFailoverStateValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateInstance = ((string)testFailoverStateValue);
                                    propertiesInstance.TestFailoverState = testFailoverStateInstance;
                                }
                                
                                JToken testFailoverStateDescriptionValue = propertiesValue["testFailoverStateDescription"];
                                if (testFailoverStateDescriptionValue != null && testFailoverStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateDescriptionInstance = ((string)testFailoverStateDescriptionValue);
                                    propertiesInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                    }
                                }
                                
                                JToken replicationHealthValue = propertiesValue["replicationHealth"];
                                if (replicationHealthValue != null && replicationHealthValue.Type != JTokenType.Null)
                                {
                                    string replicationHealthInstance = ((string)replicationHealthValue);
                                    propertiesInstance.ReplicationHealth = replicationHealthInstance;
                                }
                                
                                JToken replicationHealthErrorsArray = propertiesValue["replicationHealthErrors"];
                                if (replicationHealthErrorsArray != null && replicationHealthErrorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken replicationHealthErrorsValue in ((JArray)replicationHealthErrorsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.ReplicationHealthErrors.Add(healthErrorInstance);
                                        
                                        JToken errorLevelValue = replicationHealthErrorsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCodeValue = replicationHealthErrorsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = replicationHealthErrorsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = replicationHealthErrorsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = replicationHealthErrorsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = replicationHealthErrorsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            string creationTimeUtcInstance = ((string)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = replicationHealthErrorsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = replicationHealthErrorsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                    }
                                }
                                
                                JToken policyIdValue = propertiesValue["policyId"];
                                if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                {
                                    string policyIdInstance = ((string)policyIdValue);
                                    propertiesInstance.PolicyID = policyIdInstance;
                                }
                                
                                JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                    propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                }
                                
                                JToken lastSuccessfulFailoverTimeValue = propertiesValue["lastSuccessfulFailoverTime"];
                                if (lastSuccessfulFailoverTimeValue != null && lastSuccessfulFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSuccessfulFailoverTimeInstance = ((DateTime)lastSuccessfulFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulFailoverTime = lastSuccessfulFailoverTimeInstance;
                                }
                                
                                JToken lastSuccessfulTestFailoverTimeValue = propertiesValue["lastSuccessfulTestFailoverTime"];
                                if (lastSuccessfulTestFailoverTimeValue != null && lastSuccessfulTestFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSuccessfulTestFailoverTimeInstance = ((DateTime)lastSuccessfulTestFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulTestFailoverTime = lastSuccessfulTestFailoverTimeInstance;
                                }
                                
                                JToken currentScenarioValue = propertiesValue["currentScenario"];
                                if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                {
                                    CurrentScenarioDetails currentScenarioInstance = new CurrentScenarioDetails();
                                    propertiesInstance.CurrentScenario = currentScenarioInstance;
                                    
                                    JToken scenarioNameValue = currentScenarioValue["scenarioName"];
                                    if (scenarioNameValue != null && scenarioNameValue.Type != JTokenType.Null)
                                    {
                                        string scenarioNameInstance = ((string)scenarioNameValue);
                                        currentScenarioInstance.ScenarioName = scenarioNameInstance;
                                    }
                                    
                                    JToken jobIdValue = currentScenarioValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        currentScenarioInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken startTimeValue = currentScenarioValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        currentScenarioInstance.StartTime = startTimeInstance;
                                    }
                                }
                                
                                JToken failoverRecoveryPointIdValue = propertiesValue["failoverRecoveryPointId"];
                                if (failoverRecoveryPointIdValue != null && failoverRecoveryPointIdValue.Type != JTokenType.Null)
                                {
                                    string failoverRecoveryPointIdInstance = ((string)failoverRecoveryPointIdValue);
                                    propertiesInstance.FailoverRecoveryPointId = failoverRecoveryPointIdInstance;
                                }
                                
                                JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                    if (typeName == "HyperVReplica2012")
                                    {
                                        HyperVReplica2012ReplicationDetails hyperVReplica2012ReplicationDetailsInstance = new HyperVReplica2012ReplicationDetails();
                                        
                                        JToken lastReplicatedTimeValue = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue != null && lastReplicatedTimeValue.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance = ((string)lastReplicatedTimeValue);
                                            hyperVReplica2012ReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance;
                                        }
                                        
                                        JToken vmNicsArray = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray != null && vmNicsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue in ((JArray)vmNicsArray))
                                            {
                                                VMNicDetails vMNicDetailsInstance = new VMNicDetails();
                                                hyperVReplica2012ReplicationDetailsInstance.VmNics.Add(vMNicDetailsInstance);
                                                
                                                JToken nicIdValue = vmNicsValue["nicId"];
                                                if (nicIdValue != null && nicIdValue.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance = ((string)nicIdValue);
                                                    vMNicDetailsInstance.NicId = nicIdInstance;
                                                }
                                                
                                                JToken vMSubnetNameValue = vmNicsValue["vMSubnetName"];
                                                if (vMSubnetNameValue != null && vMSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance = ((string)vMSubnetNameValue);
                                                    vMNicDetailsInstance.VMSubnetName = vMSubnetNameInstance;
                                                }
                                                
                                                JToken vMNetworkNameValue = vmNicsValue["vMNetworkName"];
                                                if (vMNetworkNameValue != null && vMNetworkNameValue.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance = ((string)vMNetworkNameValue);
                                                    vMNicDetailsInstance.VMNetworkName = vMNetworkNameInstance;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue = vmNicsValue["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue != null && recoveryVMNetworkIdValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance = ((string)recoveryVMNetworkIdValue);
                                                    vMNicDetailsInstance.RecoveryVMNetworkId = recoveryVMNetworkIdInstance;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue = vmNicsValue["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue != null && recoveryVMSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance = ((string)recoveryVMSubnetNameValue);
                                                    vMNicDetailsInstance.RecoveryVMSubnetName = recoveryVMSubnetNameInstance;
                                                }
                                                
                                                JToken ipAddressTypeValue = vmNicsValue["ipAddressType"];
                                                if (ipAddressTypeValue != null && ipAddressTypeValue.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance = ((string)ipAddressTypeValue);
                                                    vMNicDetailsInstance.IpAddressType = ipAddressTypeInstance;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue = vmNicsValue["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue != null && replicaNicStaticIPAddressValue.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance = ((string)replicaNicStaticIPAddressValue);
                                                    vMNicDetailsInstance.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance;
                                                }
                                                
                                                JToken selectionTypeValue = vmNicsValue["selectionType"];
                                                if (selectionTypeValue != null && selectionTypeValue.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance = ((string)selectionTypeValue);
                                                    vMNicDetailsInstance.SelectionType = selectionTypeInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken initialReplicationDetailsValue = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue != null && initialReplicationDetailsValue.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance = new InitialReplicationDetails();
                                            hyperVReplica2012ReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance;
                                            
                                            JToken initialReplicationTypeValue = initialReplicationDetailsValue["initialReplicationType"];
                                            if (initialReplicationTypeValue != null && initialReplicationTypeValue.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance = ((string)initialReplicationTypeValue);
                                                initialReplicationDetailsInstance.InitialReplicationType = initialReplicationTypeInstance;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue = initialReplicationDetailsValue["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue != null && initialReplicationProgressPercentageValue.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance = ((string)initialReplicationProgressPercentageValue);
                                                initialReplicationDetailsInstance.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance;
                                            }
                                        }
                                        
                                        JToken vMDiskDetailsArray = providerSpecificDetailsValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray != null && vMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue in ((JArray)vMDiskDetailsArray))
                                            {
                                                DiskDetails diskDetailsInstance = new DiskDetails();
                                                hyperVReplica2012ReplicationDetailsInstance.VMDiskDetails.Add(diskDetailsInstance);
                                                
                                                JToken maxSizeMBValue = vMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue != null && maxSizeMBValue.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance = ((ulong)maxSizeMBValue);
                                                    diskDetailsInstance.MaxSizeMB = maxSizeMBInstance;
                                                }
                                                
                                                JToken vhdTypeValue = vMDiskDetailsValue["vhdType"];
                                                if (vhdTypeValue != null && vhdTypeValue.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance = ((string)vhdTypeValue);
                                                    diskDetailsInstance.VhdType = vhdTypeInstance;
                                                }
                                                
                                                JToken vhdIdValue = vMDiskDetailsValue["vhdId"];
                                                if (vhdIdValue != null && vhdIdValue.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance = ((string)vhdIdValue);
                                                    diskDetailsInstance.VhdId = vhdIdInstance;
                                                }
                                                
                                                JToken vhdNameValue = vMDiskDetailsValue["vhdName"];
                                                if (vhdNameValue != null && vhdNameValue.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance = ((string)vhdNameValue);
                                                    diskDetailsInstance.VhdName = vhdNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            hyperVReplica2012ReplicationDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplica2012ReplicationDetailsInstance;
                                    }
                                    if (typeName == "HyperVReplica2012R2")
                                    {
                                        HyperVReplica2012R2ReplicationDetails hyperVReplica2012R2ReplicationDetailsInstance = new HyperVReplica2012R2ReplicationDetails();
                                        
                                        JToken lastReplicatedTimeValue2 = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue2 != null && lastReplicatedTimeValue2.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance2 = ((string)lastReplicatedTimeValue2);
                                            hyperVReplica2012R2ReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance2;
                                        }
                                        
                                        JToken vmNicsArray2 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray2 != null && vmNicsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue2 in ((JArray)vmNicsArray2))
                                            {
                                                VMNicDetails vMNicDetailsInstance2 = new VMNicDetails();
                                                hyperVReplica2012R2ReplicationDetailsInstance.VmNics.Add(vMNicDetailsInstance2);
                                                
                                                JToken nicIdValue2 = vmNicsValue2["nicId"];
                                                if (nicIdValue2 != null && nicIdValue2.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance2 = ((string)nicIdValue2);
                                                    vMNicDetailsInstance2.NicId = nicIdInstance2;
                                                }
                                                
                                                JToken vMSubnetNameValue2 = vmNicsValue2["vMSubnetName"];
                                                if (vMSubnetNameValue2 != null && vMSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance2 = ((string)vMSubnetNameValue2);
                                                    vMNicDetailsInstance2.VMSubnetName = vMSubnetNameInstance2;
                                                }
                                                
                                                JToken vMNetworkNameValue2 = vmNicsValue2["vMNetworkName"];
                                                if (vMNetworkNameValue2 != null && vMNetworkNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance2 = ((string)vMNetworkNameValue2);
                                                    vMNicDetailsInstance2.VMNetworkName = vMNetworkNameInstance2;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue2 = vmNicsValue2["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue2 != null && recoveryVMNetworkIdValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance2 = ((string)recoveryVMNetworkIdValue2);
                                                    vMNicDetailsInstance2.RecoveryVMNetworkId = recoveryVMNetworkIdInstance2;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue2 = vmNicsValue2["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue2 != null && recoveryVMSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance2 = ((string)recoveryVMSubnetNameValue2);
                                                    vMNicDetailsInstance2.RecoveryVMSubnetName = recoveryVMSubnetNameInstance2;
                                                }
                                                
                                                JToken ipAddressTypeValue2 = vmNicsValue2["ipAddressType"];
                                                if (ipAddressTypeValue2 != null && ipAddressTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance2 = ((string)ipAddressTypeValue2);
                                                    vMNicDetailsInstance2.IpAddressType = ipAddressTypeInstance2;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue2 = vmNicsValue2["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue2 != null && replicaNicStaticIPAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance2 = ((string)replicaNicStaticIPAddressValue2);
                                                    vMNicDetailsInstance2.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance2;
                                                }
                                                
                                                JToken selectionTypeValue2 = vmNicsValue2["selectionType"];
                                                if (selectionTypeValue2 != null && selectionTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance2 = ((string)selectionTypeValue2);
                                                    vMNicDetailsInstance2.SelectionType = selectionTypeInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken initialReplicationDetailsValue2 = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue2 != null && initialReplicationDetailsValue2.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance2 = new InitialReplicationDetails();
                                            hyperVReplica2012R2ReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance2;
                                            
                                            JToken initialReplicationTypeValue2 = initialReplicationDetailsValue2["initialReplicationType"];
                                            if (initialReplicationTypeValue2 != null && initialReplicationTypeValue2.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance2 = ((string)initialReplicationTypeValue2);
                                                initialReplicationDetailsInstance2.InitialReplicationType = initialReplicationTypeInstance2;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue2 = initialReplicationDetailsValue2["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue2 != null && initialReplicationProgressPercentageValue2.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance2 = ((string)initialReplicationProgressPercentageValue2);
                                                initialReplicationDetailsInstance2.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance2;
                                            }
                                        }
                                        
                                        JToken vMDiskDetailsArray2 = providerSpecificDetailsValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray2 != null && vMDiskDetailsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue2 in ((JArray)vMDiskDetailsArray2))
                                            {
                                                DiskDetails diskDetailsInstance2 = new DiskDetails();
                                                hyperVReplica2012R2ReplicationDetailsInstance.VMDiskDetails.Add(diskDetailsInstance2);
                                                
                                                JToken maxSizeMBValue2 = vMDiskDetailsValue2["maxSizeMB"];
                                                if (maxSizeMBValue2 != null && maxSizeMBValue2.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance2 = ((ulong)maxSizeMBValue2);
                                                    diskDetailsInstance2.MaxSizeMB = maxSizeMBInstance2;
                                                }
                                                
                                                JToken vhdTypeValue2 = vMDiskDetailsValue2["vhdType"];
                                                if (vhdTypeValue2 != null && vhdTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance2 = ((string)vhdTypeValue2);
                                                    diskDetailsInstance2.VhdType = vhdTypeInstance2;
                                                }
                                                
                                                JToken vhdIdValue2 = vMDiskDetailsValue2["vhdId"];
                                                if (vhdIdValue2 != null && vhdIdValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance2 = ((string)vhdIdValue2);
                                                    diskDetailsInstance2.VhdId = vhdIdInstance2;
                                                }
                                                
                                                JToken vhdNameValue2 = vMDiskDetailsValue2["vhdName"];
                                                if (vhdNameValue2 != null && vhdNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance2 = ((string)vhdNameValue2);
                                                    diskDetailsInstance2.VhdName = vhdNameInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue2 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                            hyperVReplica2012R2ReplicationDetailsInstance.InstanceType = instanceTypeInstance2;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplica2012R2ReplicationDetailsInstance;
                                    }
                                    if (typeName == "VMwareAzureV2")
                                    {
                                        VMwareAzureV2ProviderSpecificSettings vMwareAzureV2ProviderSpecificSettingsInstance = new VMwareAzureV2ProviderSpecificSettings();
                                        
                                        JToken infrastructureVmIdValue = providerSpecificDetailsValue["infrastructureVmId"];
                                        if (infrastructureVmIdValue != null && infrastructureVmIdValue.Type != JTokenType.Null)
                                        {
                                            string infrastructureVmIdInstance = ((string)infrastructureVmIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.InfrastructureVmId = infrastructureVmIdInstance;
                                        }
                                        
                                        JToken vCenterInfrastructureIdValue = providerSpecificDetailsValue["vCenterInfrastructureId"];
                                        if (vCenterInfrastructureIdValue != null && vCenterInfrastructureIdValue.Type != JTokenType.Null)
                                        {
                                            string vCenterInfrastructureIdInstance = ((string)vCenterInfrastructureIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VCenterInfrastructureId = vCenterInfrastructureIdInstance;
                                        }
                                        
                                        JToken protectionStageValue = providerSpecificDetailsValue["protectionStage"];
                                        if (protectionStageValue != null && protectionStageValue.Type != JTokenType.Null)
                                        {
                                            string protectionStageInstance = ((string)protectionStageValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ProtectionStage = protectionStageInstance;
                                        }
                                        
                                        JToken healthErrorCodeValue = providerSpecificDetailsValue["healthErrorCode"];
                                        if (healthErrorCodeValue != null && healthErrorCodeValue.Type != JTokenType.Null)
                                        {
                                            string healthErrorCodeInstance = ((string)healthErrorCodeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.HealthErrorCode = healthErrorCodeInstance;
                                        }
                                        
                                        JToken resyncRequiredValue = providerSpecificDetailsValue["resyncRequired"];
                                        if (resyncRequiredValue != null && resyncRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool resyncRequiredInstance = ((bool)resyncRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ResyncRequired = resyncRequiredInstance;
                                        }
                                        
                                        JToken resyncProgressPercentageValue = providerSpecificDetailsValue["resyncProgressPercentage"];
                                        if (resyncProgressPercentageValue != null && resyncProgressPercentageValue.Type != JTokenType.Null)
                                        {
                                            int resyncProgressPercentageInstance = ((int)resyncProgressPercentageValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ResyncProgressPercentage = resyncProgressPercentageInstance;
                                        }
                                        
                                        JToken rpoInSecondsValue = providerSpecificDetailsValue["rpoInSeconds"];
                                        if (rpoInSecondsValue != null && rpoInSecondsValue.Type != JTokenType.Null)
                                        {
                                            long rpoInSecondsInstance = ((long)rpoInSecondsValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RpoInSeconds = rpoInSecondsInstance;
                                        }
                                        
                                        JToken compressedDataRateInMBValue = providerSpecificDetailsValue["compressedDataRateInMB"];
                                        if (compressedDataRateInMBValue != null && compressedDataRateInMBValue.Type != JTokenType.Null)
                                        {
                                            double compressedDataRateInMBInstance = ((double)compressedDataRateInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.CompressedDataRateInMB = compressedDataRateInMBInstance;
                                        }
                                        
                                        JToken uncompressedDataRateInMBValue = providerSpecificDetailsValue["uncompressedDataRateInMB"];
                                        if (uncompressedDataRateInMBValue != null && uncompressedDataRateInMBValue.Type != JTokenType.Null)
                                        {
                                            double uncompressedDataRateInMBInstance = ((double)uncompressedDataRateInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.UncompressedDataRateInMB = uncompressedDataRateInMBInstance;
                                        }
                                        
                                        JToken ipAddressValue = providerSpecificDetailsValue["ipAddress"];
                                        if (ipAddressValue != null && ipAddressValue.Type != JTokenType.Null)
                                        {
                                            string ipAddressInstance = ((string)ipAddressValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IpAddress = ipAddressInstance;
                                        }
                                        
                                        JToken agentVersionValue = providerSpecificDetailsValue["agentVersion"];
                                        if (agentVersionValue != null && agentVersionValue.Type != JTokenType.Null)
                                        {
                                            string agentVersionInstance = ((string)agentVersionValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.AgentVersion = agentVersionInstance;
                                        }
                                        
                                        JToken latestUpdateVersionValue = providerSpecificDetailsValue["latestUpdateVersion"];
                                        if (latestUpdateVersionValue != null && latestUpdateVersionValue.Type != JTokenType.Null)
                                        {
                                            string latestUpdateVersionInstance = ((string)latestUpdateVersionValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.LatestUpdateVersion = latestUpdateVersionInstance;
                                        }
                                        
                                        JToken isAgentUpdateRequiredValue = providerSpecificDetailsValue["isAgentUpdateRequired"];
                                        if (isAgentUpdateRequiredValue != null && isAgentUpdateRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool isAgentUpdateRequiredInstance = ((bool)isAgentUpdateRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IsAgentUpdateRequired = isAgentUpdateRequiredInstance;
                                        }
                                        
                                        JToken isRebootAfterUpdateRequiredValue = providerSpecificDetailsValue["isRebootAfterUpdateRequired"];
                                        if (isRebootAfterUpdateRequiredValue != null && isRebootAfterUpdateRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool isRebootAfterUpdateRequiredInstance = ((bool)isRebootAfterUpdateRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IsRebootAfterUpdateRequired = isRebootAfterUpdateRequiredInstance;
                                        }
                                        
                                        JToken lastHeartbeatValue = providerSpecificDetailsValue["lastHeartbeat"];
                                        if (lastHeartbeatValue != null && lastHeartbeatValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastHeartbeatInstance = ((DateTime)lastHeartbeatValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.LastHeartbeat = lastHeartbeatInstance;
                                        }
                                        
                                        JToken processServerIdValue = providerSpecificDetailsValue["processServerId"];
                                        if (processServerIdValue != null && processServerIdValue.Type != JTokenType.Null)
                                        {
                                            string processServerIdInstance = ((string)processServerIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ProcessServerId = processServerIdInstance;
                                        }
                                        
                                        JToken multiVmGroupIdValue = providerSpecificDetailsValue["multiVmGroupId"];
                                        if (multiVmGroupIdValue != null && multiVmGroupIdValue.Type != JTokenType.Null)
                                        {
                                            string multiVmGroupIdInstance = ((string)multiVmGroupIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MultiVmGroupId = multiVmGroupIdInstance;
                                        }
                                        
                                        JToken multiVmGroupNameValue = providerSpecificDetailsValue["multiVmGroupName"];
                                        if (multiVmGroupNameValue != null && multiVmGroupNameValue.Type != JTokenType.Null)
                                        {
                                            string multiVmGroupNameInstance = ((string)multiVmGroupNameValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MultiVmGroupName = multiVmGroupNameInstance;
                                        }
                                        
                                        JToken protectedVolumesArray = providerSpecificDetailsValue["protectedVolumes"];
                                        if (protectedVolumesArray != null && protectedVolumesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken protectedVolumesValue in ((JArray)protectedVolumesArray))
                                            {
                                                VMwareAzureV2ProtectedVolumeDetails vMwareAzureV2ProtectedVolumeDetailsInstance = new VMwareAzureV2ProtectedVolumeDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.ProtectedVolumes.Add(vMwareAzureV2ProtectedVolumeDetailsInstance);
                                                
                                                JToken nameValue = protectedVolumesValue["name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.Name = nameInstance;
                                                }
                                                
                                                JToken protectionStageValue2 = protectedVolumesValue["protectionStage"];
                                                if (protectionStageValue2 != null && protectionStageValue2.Type != JTokenType.Null)
                                                {
                                                    string protectionStageInstance2 = ((string)protectionStageValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ProtectionStage = protectionStageInstance2;
                                                }
                                                
                                                JToken healthErrorCodeValue2 = protectedVolumesValue["healthErrorCode"];
                                                if (healthErrorCodeValue2 != null && healthErrorCodeValue2.Type != JTokenType.Null)
                                                {
                                                    string healthErrorCodeInstance2 = ((string)healthErrorCodeValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.HealthErrorCode = healthErrorCodeInstance2;
                                                }
                                                
                                                JToken rpoInSecondsValue2 = protectedVolumesValue["rpoInSeconds"];
                                                if (rpoInSecondsValue2 != null && rpoInSecondsValue2.Type != JTokenType.Null)
                                                {
                                                    long rpoInSecondsInstance2 = ((long)rpoInSecondsValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.RpoInSeconds = rpoInSecondsInstance2;
                                                }
                                                
                                                JToken resyncRequiredValue2 = protectedVolumesValue["resyncRequired"];
                                                if (resyncRequiredValue2 != null && resyncRequiredValue2.Type != JTokenType.Null)
                                                {
                                                    bool resyncRequiredInstance2 = ((bool)resyncRequiredValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncRequired = resyncRequiredInstance2;
                                                }
                                                
                                                JToken resyncProgressPercentageValue2 = protectedVolumesValue["resyncProgressPercentage"];
                                                if (resyncProgressPercentageValue2 != null && resyncProgressPercentageValue2.Type != JTokenType.Null)
                                                {
                                                    int resyncProgressPercentageInstance2 = ((int)resyncProgressPercentageValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncProgressPercentage = resyncProgressPercentageInstance2;
                                                }
                                                
                                                JToken resyncDurationInSecondsValue = protectedVolumesValue["resyncDurationInSeconds"];
                                                if (resyncDurationInSecondsValue != null && resyncDurationInSecondsValue.Type != JTokenType.Null)
                                                {
                                                    long resyncDurationInSecondsInstance = ((long)resyncDurationInSecondsValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncDurationInSeconds = resyncDurationInSecondsInstance;
                                                }
                                                
                                                JToken volumeCapacityInBytesValue = protectedVolumesValue["volumeCapacityInBytes"];
                                                if (volumeCapacityInBytesValue != null && volumeCapacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long volumeCapacityInBytesInstance = ((long)volumeCapacityInBytesValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.VolumeCapacityInBytes = volumeCapacityInBytesInstance;
                                                }
                                                
                                                JToken fileSystemCapacityInBytesValue = protectedVolumesValue["fileSystemCapacityInBytes"];
                                                if (fileSystemCapacityInBytesValue != null && fileSystemCapacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long fileSystemCapacityInBytesInstance = ((long)fileSystemCapacityInBytesValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.FileSystemCapacityInBytes = fileSystemCapacityInBytesInstance;
                                                }
                                                
                                                JToken sourceDataInMBValue = protectedVolumesValue["sourceDataInMB"];
                                                if (sourceDataInMBValue != null && sourceDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double sourceDataInMBInstance = ((double)sourceDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.SourceDataInMB = sourceDataInMBInstance;
                                                }
                                                
                                                JToken psDataInMBValue = protectedVolumesValue["psDataInMB"];
                                                if (psDataInMBValue != null && psDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double psDataInMBInstance = ((double)psDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.PSDataInMB = psDataInMBInstance;
                                                }
                                                
                                                JToken targetDataInMBValue = protectedVolumesValue["targetDataInMB"];
                                                if (targetDataInMBValue != null && targetDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double targetDataInMBInstance = ((double)targetDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.TargetDataInMB = targetDataInMBInstance;
                                                }
                                                
                                                JToken volumeResizedValue = protectedVolumesValue["volumeResized"];
                                                if (volumeResizedValue != null && volumeResizedValue.Type != JTokenType.Null)
                                                {
                                                    bool volumeResizedInstance = ((bool)volumeResizedValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.VolumeResized = volumeResizedInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken volumeResizedValue2 = providerSpecificDetailsValue["volumeResized"];
                                        if (volumeResizedValue2 != null && volumeResizedValue2.Type != JTokenType.Null)
                                        {
                                            bool volumeResizedInstance2 = ((bool)volumeResizedValue2);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VolumeResized = volumeResizedInstance2;
                                        }
                                        
                                        JToken masterTargetIdValue = providerSpecificDetailsValue["masterTargetId"];
                                        if (masterTargetIdValue != null && masterTargetIdValue.Type != JTokenType.Null)
                                        {
                                            string masterTargetIdInstance = ((string)masterTargetIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MasterTargetId = masterTargetIdInstance;
                                        }
                                        
                                        JToken sourceVmCPUCountValue = providerSpecificDetailsValue["sourceVmCPUCount"];
                                        if (sourceVmCPUCountValue != null && sourceVmCPUCountValue.Type != JTokenType.Null)
                                        {
                                            int sourceVmCPUCountInstance = ((int)sourceVmCPUCountValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SourceVmCPUCount = sourceVmCPUCountInstance;
                                        }
                                        
                                        JToken sourceVmRAMSizeInMBValue = providerSpecificDetailsValue["sourceVmRAMSizeInMB"];
                                        if (sourceVmRAMSizeInMBValue != null && sourceVmRAMSizeInMBValue.Type != JTokenType.Null)
                                        {
                                            int sourceVmRAMSizeInMBInstance = ((int)sourceVmRAMSizeInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SourceVmRAMSizeInMB = sourceVmRAMSizeInMBInstance;
                                        }
                                        
                                        JToken osTypeValue = providerSpecificDetailsValue["osType"];
                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance = ((string)osTypeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.OSType = osTypeInstance;
                                        }
                                        
                                        JToken vhdNameValue3 = providerSpecificDetailsValue["vhdName"];
                                        if (vhdNameValue3 != null && vhdNameValue3.Type != JTokenType.Null)
                                        {
                                            string vhdNameInstance3 = ((string)vhdNameValue3);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VHDName = vhdNameInstance3;
                                        }
                                        
                                        JToken osDiskIdValue = providerSpecificDetailsValue["osDiskId"];
                                        if (osDiskIdValue != null && osDiskIdValue.Type != JTokenType.Null)
                                        {
                                            string osDiskIdInstance = ((string)osDiskIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.OSDiskId = osDiskIdInstance;
                                        }
                                        
                                        JToken azureVMDiskDetailsArray = providerSpecificDetailsValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsArray != null && azureVMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken azureVMDiskDetailsValue in ((JArray)azureVMDiskDetailsArray))
                                            {
                                                AzureVmDiskDetails azureVmDiskDetailsInstance = new AzureVmDiskDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.AzureVMDiskDetails.Add(azureVmDiskDetailsInstance);
                                                
                                                JToken vhdTypeValue3 = azureVMDiskDetailsValue["vhdType"];
                                                if (vhdTypeValue3 != null && vhdTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance3 = ((string)vhdTypeValue3);
                                                    azureVmDiskDetailsInstance.VhdType = vhdTypeInstance3;
                                                }
                                                
                                                JToken vhdIdValue3 = azureVMDiskDetailsValue["vhdId"];
                                                if (vhdIdValue3 != null && vhdIdValue3.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance3 = ((string)vhdIdValue3);
                                                    azureVmDiskDetailsInstance.VhdId = vhdIdInstance3;
                                                }
                                                
                                                JToken vhdNameValue4 = azureVMDiskDetailsValue["vhdName"];
                                                if (vhdNameValue4 != null && vhdNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance4 = ((string)vhdNameValue4);
                                                    azureVmDiskDetailsInstance.VhdName = vhdNameInstance4;
                                                }
                                                
                                                JToken maxSizeMBValue3 = azureVMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue3 != null && maxSizeMBValue3.Type != JTokenType.Null)
                                                {
                                                    string maxSizeMBInstance3 = ((string)maxSizeMBValue3);
                                                    azureVmDiskDetailsInstance.MaxSizeMB = maxSizeMBInstance3;
                                                }
                                                
                                                JToken targetDiskLocationValue = azureVMDiskDetailsValue["targetDiskLocation"];
                                                if (targetDiskLocationValue != null && targetDiskLocationValue.Type != JTokenType.Null)
                                                {
                                                    string targetDiskLocationInstance = ((string)targetDiskLocationValue);
                                                    azureVmDiskDetailsInstance.TargetDiskLocation = targetDiskLocationInstance;
                                                }
                                                
                                                JToken lunIdValue = azureVMDiskDetailsValue["lunId"];
                                                if (lunIdValue != null && lunIdValue.Type != JTokenType.Null)
                                                {
                                                    string lunIdInstance = ((string)lunIdValue);
                                                    azureVmDiskDetailsInstance.LunId = lunIdInstance;
                                                }
                                                
                                                JToken targetDiskNameValue = azureVMDiskDetailsValue["targetDiskName"];
                                                if (targetDiskNameValue != null && targetDiskNameValue.Type != JTokenType.Null)
                                                {
                                                    string targetDiskNameInstance = ((string)targetDiskNameValue);
                                                    azureVmDiskDetailsInstance.TargetDiskName = targetDiskNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue = providerSpecificDetailsValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue != null && recoveryAzureVMNameValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance = ((string)recoveryAzureVMNameValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue = providerSpecificDetailsValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue != null && recoveryAzureVMSizeValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance = ((string)recoveryAzureVMSizeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance;
                                        }
                                        
                                        JToken recoveryAzureStorageAccountValue = providerSpecificDetailsValue["recoveryAzureStorageAccount"];
                                        if (recoveryAzureStorageAccountValue != null && recoveryAzureStorageAccountValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureStorageAccountInstance = ((string)recoveryAzureStorageAccountValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureStorageAccount = recoveryAzureStorageAccountInstance;
                                        }
                                        
                                        JToken vmNicsArray3 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray3 != null && vmNicsArray3.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue3 in ((JArray)vmNicsArray3))
                                            {
                                                VMNicDetails vMNicDetailsInstance3 = new VMNicDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.VMNics.Add(vMNicDetailsInstance3);
                                                
                                                JToken nicIdValue3 = vmNicsValue3["nicId"];
                                                if (nicIdValue3 != null && nicIdValue3.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance3 = ((string)nicIdValue3);
                                                    vMNicDetailsInstance3.NicId = nicIdInstance3;
                                                }
                                                
                                                JToken vMSubnetNameValue3 = vmNicsValue3["vMSubnetName"];
                                                if (vMSubnetNameValue3 != null && vMSubnetNameValue3.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance3 = ((string)vMSubnetNameValue3);
                                                    vMNicDetailsInstance3.VMSubnetName = vMSubnetNameInstance3;
                                                }
                                                
                                                JToken vMNetworkNameValue3 = vmNicsValue3["vMNetworkName"];
                                                if (vMNetworkNameValue3 != null && vMNetworkNameValue3.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance3 = ((string)vMNetworkNameValue3);
                                                    vMNicDetailsInstance3.VMNetworkName = vMNetworkNameInstance3;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue3 = vmNicsValue3["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue3 != null && recoveryVMNetworkIdValue3.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance3 = ((string)recoveryVMNetworkIdValue3);
                                                    vMNicDetailsInstance3.RecoveryVMNetworkId = recoveryVMNetworkIdInstance3;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue3 = vmNicsValue3["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue3 != null && recoveryVMSubnetNameValue3.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance3 = ((string)recoveryVMSubnetNameValue3);
                                                    vMNicDetailsInstance3.RecoveryVMSubnetName = recoveryVMSubnetNameInstance3;
                                                }
                                                
                                                JToken ipAddressTypeValue3 = vmNicsValue3["ipAddressType"];
                                                if (ipAddressTypeValue3 != null && ipAddressTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance3 = ((string)ipAddressTypeValue3);
                                                    vMNicDetailsInstance3.IpAddressType = ipAddressTypeInstance3;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue3 = vmNicsValue3["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue3 != null && replicaNicStaticIPAddressValue3.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance3 = ((string)replicaNicStaticIPAddressValue3);
                                                    vMNicDetailsInstance3.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance3;
                                                }
                                                
                                                JToken selectionTypeValue3 = vmNicsValue3["selectionType"];
                                                if (selectionTypeValue3 != null && selectionTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance3 = ((string)selectionTypeValue3);
                                                    vMNicDetailsInstance3.SelectionType = selectionTypeInstance3;
                                                }
                                            }
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue = providerSpecificDetailsValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue != null && selectedRecoveryAzureNetworkIdValue.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance = ((string)selectedRecoveryAzureNetworkIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance;
                                        }
                                        
                                        JToken discoveryTypeValue = providerSpecificDetailsValue["discoveryType"];
                                        if (discoveryTypeValue != null && discoveryTypeValue.Type != JTokenType.Null)
                                        {
                                            string discoveryTypeInstance = ((string)discoveryTypeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.DiscoveryType = discoveryTypeInstance;
                                        }
                                        
                                        JToken instanceTypeValue3 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.InstanceType = instanceTypeInstance3;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = vMwareAzureV2ProviderSpecificSettingsInstance;
                                    }
                                    if (typeName == "HyperVReplicaAzure")
                                    {
                                        HyperVReplicaAzureReplicationDetails hyperVReplicaAzureReplicationDetailsInstance = new HyperVReplicaAzureReplicationDetails();
                                        
                                        JToken azureVMDiskDetailsArray2 = providerSpecificDetailsValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsArray2 != null && azureVMDiskDetailsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken azureVMDiskDetailsValue2 in ((JArray)azureVMDiskDetailsArray2))
                                            {
                                                AzureVmDiskDetails azureVmDiskDetailsInstance2 = new AzureVmDiskDetails();
                                                hyperVReplicaAzureReplicationDetailsInstance.AzureVMDiskDetails.Add(azureVmDiskDetailsInstance2);
                                                
                                                JToken vhdTypeValue4 = azureVMDiskDetailsValue2["vhdType"];
                                                if (vhdTypeValue4 != null && vhdTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance4 = ((string)vhdTypeValue4);
                                                    azureVmDiskDetailsInstance2.VhdType = vhdTypeInstance4;
                                                }
                                                
                                                JToken vhdIdValue4 = azureVMDiskDetailsValue2["vhdId"];
                                                if (vhdIdValue4 != null && vhdIdValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance4 = ((string)vhdIdValue4);
                                                    azureVmDiskDetailsInstance2.VhdId = vhdIdInstance4;
                                                }
                                                
                                                JToken vhdNameValue5 = azureVMDiskDetailsValue2["vhdName"];
                                                if (vhdNameValue5 != null && vhdNameValue5.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance5 = ((string)vhdNameValue5);
                                                    azureVmDiskDetailsInstance2.VhdName = vhdNameInstance5;
                                                }
                                                
                                                JToken maxSizeMBValue4 = azureVMDiskDetailsValue2["maxSizeMB"];
                                                if (maxSizeMBValue4 != null && maxSizeMBValue4.Type != JTokenType.Null)
                                                {
                                                    string maxSizeMBInstance4 = ((string)maxSizeMBValue4);
                                                    azureVmDiskDetailsInstance2.MaxSizeMB = maxSizeMBInstance4;
                                                }
                                                
                                                JToken targetDiskLocationValue2 = azureVMDiskDetailsValue2["targetDiskLocation"];
                                                if (targetDiskLocationValue2 != null && targetDiskLocationValue2.Type != JTokenType.Null)
                                                {
                                                    string targetDiskLocationInstance2 = ((string)targetDiskLocationValue2);
                                                    azureVmDiskDetailsInstance2.TargetDiskLocation = targetDiskLocationInstance2;
                                                }
                                                
                                                JToken lunIdValue2 = azureVMDiskDetailsValue2["lunId"];
                                                if (lunIdValue2 != null && lunIdValue2.Type != JTokenType.Null)
                                                {
                                                    string lunIdInstance2 = ((string)lunIdValue2);
                                                    azureVmDiskDetailsInstance2.LunId = lunIdInstance2;
                                                }
                                                
                                                JToken targetDiskNameValue2 = azureVMDiskDetailsValue2["targetDiskName"];
                                                if (targetDiskNameValue2 != null && targetDiskNameValue2.Type != JTokenType.Null)
                                                {
                                                    string targetDiskNameInstance2 = ((string)targetDiskNameValue2);
                                                    azureVmDiskDetailsInstance2.TargetDiskName = targetDiskNameInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue2 = providerSpecificDetailsValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue2 != null && recoveryAzureVMNameValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance2 = ((string)recoveryAzureVMNameValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance2;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue2 = providerSpecificDetailsValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue2 != null && recoveryAzureVMSizeValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance2 = ((string)recoveryAzureVMSizeValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance2;
                                        }
                                        
                                        JToken recoveryAzureStorageAccountValue2 = providerSpecificDetailsValue["recoveryAzureStorageAccount"];
                                        if (recoveryAzureStorageAccountValue2 != null && recoveryAzureStorageAccountValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureStorageAccountInstance2 = ((string)recoveryAzureStorageAccountValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureStorageAccount = recoveryAzureStorageAccountInstance2;
                                        }
                                        
                                        JToken lastReplicatedTimeValue3 = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue3 != null && lastReplicatedTimeValue3.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance3 = ((string)lastReplicatedTimeValue3);
                                            hyperVReplicaAzureReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance3;
                                        }
                                        
                                        JToken initialReplicationDetailsValue3 = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue3 != null && initialReplicationDetailsValue3.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance3 = new InitialReplicationDetails();
                                            hyperVReplicaAzureReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance3;
                                            
                                            JToken initialReplicationTypeValue3 = initialReplicationDetailsValue3["initialReplicationType"];
                                            if (initialReplicationTypeValue3 != null && initialReplicationTypeValue3.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance3 = ((string)initialReplicationTypeValue3);
                                                initialReplicationDetailsInstance3.InitialReplicationType = initialReplicationTypeInstance3;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue3 = initialReplicationDetailsValue3["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue3 != null && initialReplicationProgressPercentageValue3.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance3 = ((string)initialReplicationProgressPercentageValue3);
                                                initialReplicationDetailsInstance3.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance3;
                                            }
                                        }
                                        
                                        JToken vmNicsArray4 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray4 != null && vmNicsArray4.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue4 in ((JArray)vmNicsArray4))
                                            {
                                                VMNicDetails vMNicDetailsInstance4 = new VMNicDetails();
                                                hyperVReplicaAzureReplicationDetailsInstance.VMNics.Add(vMNicDetailsInstance4);
                                                
                                                JToken nicIdValue4 = vmNicsValue4["nicId"];
                                                if (nicIdValue4 != null && nicIdValue4.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance4 = ((string)nicIdValue4);
                                                    vMNicDetailsInstance4.NicId = nicIdInstance4;
                                                }
                                                
                                                JToken vMSubnetNameValue4 = vmNicsValue4["vMSubnetName"];
                                                if (vMSubnetNameValue4 != null && vMSubnetNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance4 = ((string)vMSubnetNameValue4);
                                                    vMNicDetailsInstance4.VMSubnetName = vMSubnetNameInstance4;
                                                }
                                                
                                                JToken vMNetworkNameValue4 = vmNicsValue4["vMNetworkName"];
                                                if (vMNetworkNameValue4 != null && vMNetworkNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance4 = ((string)vMNetworkNameValue4);
                                                    vMNicDetailsInstance4.VMNetworkName = vMNetworkNameInstance4;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue4 = vmNicsValue4["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue4 != null && recoveryVMNetworkIdValue4.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance4 = ((string)recoveryVMNetworkIdValue4);
                                                    vMNicDetailsInstance4.RecoveryVMNetworkId = recoveryVMNetworkIdInstance4;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue4 = vmNicsValue4["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue4 != null && recoveryVMSubnetNameValue4.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance4 = ((string)recoveryVMSubnetNameValue4);
                                                    vMNicDetailsInstance4.RecoveryVMSubnetName = recoveryVMSubnetNameInstance4;
                                                }
                                                
                                                JToken ipAddressTypeValue4 = vmNicsValue4["ipAddressType"];
                                                if (ipAddressTypeValue4 != null && ipAddressTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance4 = ((string)ipAddressTypeValue4);
                                                    vMNicDetailsInstance4.IpAddressType = ipAddressTypeInstance4;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue4 = vmNicsValue4["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue4 != null && replicaNicStaticIPAddressValue4.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance4 = ((string)replicaNicStaticIPAddressValue4);
                                                    vMNicDetailsInstance4.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance4;
                                                }
                                                
                                                JToken selectionTypeValue4 = vmNicsValue4["selectionType"];
                                                if (selectionTypeValue4 != null && selectionTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance4 = ((string)selectionTypeValue4);
                                                    vMNicDetailsInstance4.SelectionType = selectionTypeInstance4;
                                                }
                                            }
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue2 = providerSpecificDetailsValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue2 != null && selectedRecoveryAzureNetworkIdValue2.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance2 = ((string)selectedRecoveryAzureNetworkIdValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance2;
                                        }
                                        
                                        JToken encryptionValue = providerSpecificDetailsValue["encryption"];
                                        if (encryptionValue != null && encryptionValue.Type != JTokenType.Null)
                                        {
                                            string encryptionInstance = ((string)encryptionValue);
                                            hyperVReplicaAzureReplicationDetailsInstance.Encryption = encryptionInstance;
                                        }
                                        
                                        JToken oSDetailsValue = providerSpecificDetailsValue["oSDetails"];
                                        if (oSDetailsValue != null && oSDetailsValue.Type != JTokenType.Null)
                                        {
                                            OSDetails oSDetailsInstance = new OSDetails();
                                            hyperVReplicaAzureReplicationDetailsInstance.OSDetails = oSDetailsInstance;
                                            
                                            JToken osTypeValue2 = oSDetailsValue["osType"];
                                            if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                            {
                                                string osTypeInstance2 = ((string)osTypeValue2);
                                                oSDetailsInstance.OsType = osTypeInstance2;
                                            }
                                            
                                            JToken productTypeValue = oSDetailsValue["productType"];
                                            if (productTypeValue != null && productTypeValue.Type != JTokenType.Null)
                                            {
                                                string productTypeInstance = ((string)productTypeValue);
                                                oSDetailsInstance.ProductType = productTypeInstance;
                                            }
                                            
                                            JToken osEditionValue = oSDetailsValue["osEdition"];
                                            if (osEditionValue != null && osEditionValue.Type != JTokenType.Null)
                                            {
                                                string osEditionInstance = ((string)osEditionValue);
                                                oSDetailsInstance.OSEdition = osEditionInstance;
                                            }
                                            
                                            JToken oSVersionValue = oSDetailsValue["oSVersion"];
                                            if (oSVersionValue != null && oSVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSVersionInstance = ((string)oSVersionValue);
                                                oSDetailsInstance.OSVersion = oSVersionInstance;
                                            }
                                            
                                            JToken oSMajorVersionValue = oSDetailsValue["oSMajorVersion"];
                                            if (oSMajorVersionValue != null && oSMajorVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSMajorVersionInstance = ((string)oSMajorVersionValue);
                                                oSDetailsInstance.OSMajorVersion = oSMajorVersionInstance;
                                            }
                                            
                                            JToken oSMinorVersionValue = oSDetailsValue["oSMinorVersion"];
                                            if (oSMinorVersionValue != null && oSMinorVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSMinorVersionInstance = ((string)oSMinorVersionValue);
                                                oSDetailsInstance.OSMinorVersion = oSMinorVersionInstance;
                                            }
                                        }
                                        
                                        JToken sourceVmRAMSizeInMBValue2 = providerSpecificDetailsValue["sourceVmRAMSizeInMB"];
                                        if (sourceVmRAMSizeInMBValue2 != null && sourceVmRAMSizeInMBValue2.Type != JTokenType.Null)
                                        {
                                            int sourceVmRAMSizeInMBInstance2 = ((int)sourceVmRAMSizeInMBValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SourceVmRAMSizeInMB = sourceVmRAMSizeInMBInstance2;
                                        }
                                        
                                        JToken sourceVmCPUCountValue2 = providerSpecificDetailsValue["sourceVmCPUCount"];
                                        if (sourceVmCPUCountValue2 != null && sourceVmCPUCountValue2.Type != JTokenType.Null)
                                        {
                                            int sourceVmCPUCountInstance2 = ((int)sourceVmCPUCountValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SourceVmCPUCount = sourceVmCPUCountInstance2;
                                        }
                                        
                                        JToken instanceTypeValue4 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue4 != null && instanceTypeValue4.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance4 = ((string)instanceTypeValue4);
                                            hyperVReplicaAzureReplicationDetailsInstance.InstanceType = instanceTypeInstance4;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplicaAzureReplicationDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                replicationProtectedItemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                replicationProtectedItemInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                replicationProtectedItemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                replicationProtectedItemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    replicationProtectedItemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> GetPurgeStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetPurgeStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new LongRunningOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken locationValue = responseDoc["Location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                result.Location = locationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Service response for replication protected items operation.
        /// </returns>
        public async Task<ReplicationProtectedItemOperationResponse> GetRepairVMReplicationStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetRepairVMReplicationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ReplicationProtectedItemOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ReplicationProtectedItemOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ReplicationProtectedItem replicationProtectedItemInstance = new ReplicationProtectedItem();
                            result.ReplicationProtectedItem = replicationProtectedItemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ReplicationProtectedItemProperties propertiesInstance = new ReplicationProtectedItemProperties();
                                replicationProtectedItemInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken protectedItemTypeValue = propertiesValue["protectedItemType"];
                                if (protectedItemTypeValue != null && protectedItemTypeValue.Type != JTokenType.Null)
                                {
                                    string protectedItemTypeInstance = ((string)protectedItemTypeValue);
                                    propertiesInstance.ProtectedItemType = protectedItemTypeInstance;
                                }
                                
                                JToken protectableItemIdValue = propertiesValue["protectableItemId"];
                                if (protectableItemIdValue != null && protectableItemIdValue.Type != JTokenType.Null)
                                {
                                    string protectableItemIdInstance = ((string)protectableItemIdValue);
                                    propertiesInstance.ProtectableItemId = protectableItemIdInstance;
                                }
                                
                                JToken recoveryServicesProviderIdValue = propertiesValue["recoveryServicesProviderId"];
                                if (recoveryServicesProviderIdValue != null && recoveryServicesProviderIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryServicesProviderIdInstance = ((string)recoveryServicesProviderIdValue);
                                    propertiesInstance.RecoveryServicesProviderId = recoveryServicesProviderIdInstance;
                                }
                                
                                JToken primaryFabricFriendlyNameValue = propertiesValue["primaryFabricFriendlyName"];
                                if (primaryFabricFriendlyNameValue != null && primaryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricFriendlyNameInstance = ((string)primaryFabricFriendlyNameValue);
                                    propertiesInstance.PrimaryFabricFriendlyName = primaryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricFriendlyNameValue = propertiesValue["recoveryFabricFriendlyName"];
                                if (recoveryFabricFriendlyNameValue != null && recoveryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricFriendlyNameInstance = ((string)recoveryFabricFriendlyNameValue);
                                    propertiesInstance.RecoveryFabricFriendlyName = recoveryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricIdValue = propertiesValue["recoveryFabricId"];
                                if (recoveryFabricIdValue != null && recoveryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricIdInstance = ((string)recoveryFabricIdValue);
                                    propertiesInstance.RecoveryFabricId = recoveryFabricIdInstance;
                                }
                                
                                JToken primaryProtectionContainerFriendlyNameValue = propertiesValue["primaryProtectionContainerFriendlyName"];
                                if (primaryProtectionContainerFriendlyNameValue != null && primaryProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryProtectionContainerFriendlyNameInstance = ((string)primaryProtectionContainerFriendlyNameValue);
                                    propertiesInstance.PrimaryProtectionContainerFriendlyName = primaryProtectionContainerFriendlyNameInstance;
                                }
                                
                                JToken recoveryProtectionContainerFriendlyNameValue = propertiesValue["recoveryProtectionContainerFriendlyName"];
                                if (recoveryProtectionContainerFriendlyNameValue != null && recoveryProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryProtectionContainerFriendlyNameInstance = ((string)recoveryProtectionContainerFriendlyNameValue);
                                    propertiesInstance.RecoveryProtectionContainerFriendlyName = recoveryProtectionContainerFriendlyNameInstance;
                                }
                                
                                JToken protectionStateValue = propertiesValue["protectionState"];
                                if (protectionStateValue != null && protectionStateValue.Type != JTokenType.Null)
                                {
                                    string protectionStateInstance = ((string)protectionStateValue);
                                    propertiesInstance.ProtectionState = protectionStateInstance;
                                }
                                
                                JToken protectionStateDescriptionValue = propertiesValue["protectionStateDescription"];
                                if (protectionStateDescriptionValue != null && protectionStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string protectionStateDescriptionInstance = ((string)protectionStateDescriptionValue);
                                    propertiesInstance.ProtectionStateDescription = protectionStateDescriptionInstance;
                                }
                                
                                JToken activeLocationValue = propertiesValue["activeLocation"];
                                if (activeLocationValue != null && activeLocationValue.Type != JTokenType.Null)
                                {
                                    string activeLocationInstance = ((string)activeLocationValue);
                                    propertiesInstance.ActiveLocation = activeLocationInstance;
                                }
                                
                                JToken testFailoverStateValue = propertiesValue["testFailoverState"];
                                if (testFailoverStateValue != null && testFailoverStateValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateInstance = ((string)testFailoverStateValue);
                                    propertiesInstance.TestFailoverState = testFailoverStateInstance;
                                }
                                
                                JToken testFailoverStateDescriptionValue = propertiesValue["testFailoverStateDescription"];
                                if (testFailoverStateDescriptionValue != null && testFailoverStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateDescriptionInstance = ((string)testFailoverStateDescriptionValue);
                                    propertiesInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                    }
                                }
                                
                                JToken replicationHealthValue = propertiesValue["replicationHealth"];
                                if (replicationHealthValue != null && replicationHealthValue.Type != JTokenType.Null)
                                {
                                    string replicationHealthInstance = ((string)replicationHealthValue);
                                    propertiesInstance.ReplicationHealth = replicationHealthInstance;
                                }
                                
                                JToken replicationHealthErrorsArray = propertiesValue["replicationHealthErrors"];
                                if (replicationHealthErrorsArray != null && replicationHealthErrorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken replicationHealthErrorsValue in ((JArray)replicationHealthErrorsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.ReplicationHealthErrors.Add(healthErrorInstance);
                                        
                                        JToken errorLevelValue = replicationHealthErrorsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCodeValue = replicationHealthErrorsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = replicationHealthErrorsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = replicationHealthErrorsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = replicationHealthErrorsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = replicationHealthErrorsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            string creationTimeUtcInstance = ((string)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = replicationHealthErrorsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = replicationHealthErrorsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                    }
                                }
                                
                                JToken policyIdValue = propertiesValue["policyId"];
                                if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                {
                                    string policyIdInstance = ((string)policyIdValue);
                                    propertiesInstance.PolicyID = policyIdInstance;
                                }
                                
                                JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                    propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                }
                                
                                JToken lastSuccessfulFailoverTimeValue = propertiesValue["lastSuccessfulFailoverTime"];
                                if (lastSuccessfulFailoverTimeValue != null && lastSuccessfulFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSuccessfulFailoverTimeInstance = ((DateTime)lastSuccessfulFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulFailoverTime = lastSuccessfulFailoverTimeInstance;
                                }
                                
                                JToken lastSuccessfulTestFailoverTimeValue = propertiesValue["lastSuccessfulTestFailoverTime"];
                                if (lastSuccessfulTestFailoverTimeValue != null && lastSuccessfulTestFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSuccessfulTestFailoverTimeInstance = ((DateTime)lastSuccessfulTestFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulTestFailoverTime = lastSuccessfulTestFailoverTimeInstance;
                                }
                                
                                JToken currentScenarioValue = propertiesValue["currentScenario"];
                                if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                {
                                    CurrentScenarioDetails currentScenarioInstance = new CurrentScenarioDetails();
                                    propertiesInstance.CurrentScenario = currentScenarioInstance;
                                    
                                    JToken scenarioNameValue = currentScenarioValue["scenarioName"];
                                    if (scenarioNameValue != null && scenarioNameValue.Type != JTokenType.Null)
                                    {
                                        string scenarioNameInstance = ((string)scenarioNameValue);
                                        currentScenarioInstance.ScenarioName = scenarioNameInstance;
                                    }
                                    
                                    JToken jobIdValue = currentScenarioValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        currentScenarioInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken startTimeValue = currentScenarioValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        currentScenarioInstance.StartTime = startTimeInstance;
                                    }
                                }
                                
                                JToken failoverRecoveryPointIdValue = propertiesValue["failoverRecoveryPointId"];
                                if (failoverRecoveryPointIdValue != null && failoverRecoveryPointIdValue.Type != JTokenType.Null)
                                {
                                    string failoverRecoveryPointIdInstance = ((string)failoverRecoveryPointIdValue);
                                    propertiesInstance.FailoverRecoveryPointId = failoverRecoveryPointIdInstance;
                                }
                                
                                JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                    if (typeName == "HyperVReplica2012")
                                    {
                                        HyperVReplica2012ReplicationDetails hyperVReplica2012ReplicationDetailsInstance = new HyperVReplica2012ReplicationDetails();
                                        
                                        JToken lastReplicatedTimeValue = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue != null && lastReplicatedTimeValue.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance = ((string)lastReplicatedTimeValue);
                                            hyperVReplica2012ReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance;
                                        }
                                        
                                        JToken vmNicsArray = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray != null && vmNicsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue in ((JArray)vmNicsArray))
                                            {
                                                VMNicDetails vMNicDetailsInstance = new VMNicDetails();
                                                hyperVReplica2012ReplicationDetailsInstance.VmNics.Add(vMNicDetailsInstance);
                                                
                                                JToken nicIdValue = vmNicsValue["nicId"];
                                                if (nicIdValue != null && nicIdValue.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance = ((string)nicIdValue);
                                                    vMNicDetailsInstance.NicId = nicIdInstance;
                                                }
                                                
                                                JToken vMSubnetNameValue = vmNicsValue["vMSubnetName"];
                                                if (vMSubnetNameValue != null && vMSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance = ((string)vMSubnetNameValue);
                                                    vMNicDetailsInstance.VMSubnetName = vMSubnetNameInstance;
                                                }
                                                
                                                JToken vMNetworkNameValue = vmNicsValue["vMNetworkName"];
                                                if (vMNetworkNameValue != null && vMNetworkNameValue.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance = ((string)vMNetworkNameValue);
                                                    vMNicDetailsInstance.VMNetworkName = vMNetworkNameInstance;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue = vmNicsValue["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue != null && recoveryVMNetworkIdValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance = ((string)recoveryVMNetworkIdValue);
                                                    vMNicDetailsInstance.RecoveryVMNetworkId = recoveryVMNetworkIdInstance;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue = vmNicsValue["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue != null && recoveryVMSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance = ((string)recoveryVMSubnetNameValue);
                                                    vMNicDetailsInstance.RecoveryVMSubnetName = recoveryVMSubnetNameInstance;
                                                }
                                                
                                                JToken ipAddressTypeValue = vmNicsValue["ipAddressType"];
                                                if (ipAddressTypeValue != null && ipAddressTypeValue.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance = ((string)ipAddressTypeValue);
                                                    vMNicDetailsInstance.IpAddressType = ipAddressTypeInstance;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue = vmNicsValue["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue != null && replicaNicStaticIPAddressValue.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance = ((string)replicaNicStaticIPAddressValue);
                                                    vMNicDetailsInstance.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance;
                                                }
                                                
                                                JToken selectionTypeValue = vmNicsValue["selectionType"];
                                                if (selectionTypeValue != null && selectionTypeValue.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance = ((string)selectionTypeValue);
                                                    vMNicDetailsInstance.SelectionType = selectionTypeInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken initialReplicationDetailsValue = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue != null && initialReplicationDetailsValue.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance = new InitialReplicationDetails();
                                            hyperVReplica2012ReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance;
                                            
                                            JToken initialReplicationTypeValue = initialReplicationDetailsValue["initialReplicationType"];
                                            if (initialReplicationTypeValue != null && initialReplicationTypeValue.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance = ((string)initialReplicationTypeValue);
                                                initialReplicationDetailsInstance.InitialReplicationType = initialReplicationTypeInstance;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue = initialReplicationDetailsValue["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue != null && initialReplicationProgressPercentageValue.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance = ((string)initialReplicationProgressPercentageValue);
                                                initialReplicationDetailsInstance.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance;
                                            }
                                        }
                                        
                                        JToken vMDiskDetailsArray = providerSpecificDetailsValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray != null && vMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue in ((JArray)vMDiskDetailsArray))
                                            {
                                                DiskDetails diskDetailsInstance = new DiskDetails();
                                                hyperVReplica2012ReplicationDetailsInstance.VMDiskDetails.Add(diskDetailsInstance);
                                                
                                                JToken maxSizeMBValue = vMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue != null && maxSizeMBValue.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance = ((ulong)maxSizeMBValue);
                                                    diskDetailsInstance.MaxSizeMB = maxSizeMBInstance;
                                                }
                                                
                                                JToken vhdTypeValue = vMDiskDetailsValue["vhdType"];
                                                if (vhdTypeValue != null && vhdTypeValue.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance = ((string)vhdTypeValue);
                                                    diskDetailsInstance.VhdType = vhdTypeInstance;
                                                }
                                                
                                                JToken vhdIdValue = vMDiskDetailsValue["vhdId"];
                                                if (vhdIdValue != null && vhdIdValue.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance = ((string)vhdIdValue);
                                                    diskDetailsInstance.VhdId = vhdIdInstance;
                                                }
                                                
                                                JToken vhdNameValue = vMDiskDetailsValue["vhdName"];
                                                if (vhdNameValue != null && vhdNameValue.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance = ((string)vhdNameValue);
                                                    diskDetailsInstance.VhdName = vhdNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            hyperVReplica2012ReplicationDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplica2012ReplicationDetailsInstance;
                                    }
                                    if (typeName == "HyperVReplica2012R2")
                                    {
                                        HyperVReplica2012R2ReplicationDetails hyperVReplica2012R2ReplicationDetailsInstance = new HyperVReplica2012R2ReplicationDetails();
                                        
                                        JToken lastReplicatedTimeValue2 = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue2 != null && lastReplicatedTimeValue2.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance2 = ((string)lastReplicatedTimeValue2);
                                            hyperVReplica2012R2ReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance2;
                                        }
                                        
                                        JToken vmNicsArray2 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray2 != null && vmNicsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue2 in ((JArray)vmNicsArray2))
                                            {
                                                VMNicDetails vMNicDetailsInstance2 = new VMNicDetails();
                                                hyperVReplica2012R2ReplicationDetailsInstance.VmNics.Add(vMNicDetailsInstance2);
                                                
                                                JToken nicIdValue2 = vmNicsValue2["nicId"];
                                                if (nicIdValue2 != null && nicIdValue2.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance2 = ((string)nicIdValue2);
                                                    vMNicDetailsInstance2.NicId = nicIdInstance2;
                                                }
                                                
                                                JToken vMSubnetNameValue2 = vmNicsValue2["vMSubnetName"];
                                                if (vMSubnetNameValue2 != null && vMSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance2 = ((string)vMSubnetNameValue2);
                                                    vMNicDetailsInstance2.VMSubnetName = vMSubnetNameInstance2;
                                                }
                                                
                                                JToken vMNetworkNameValue2 = vmNicsValue2["vMNetworkName"];
                                                if (vMNetworkNameValue2 != null && vMNetworkNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance2 = ((string)vMNetworkNameValue2);
                                                    vMNicDetailsInstance2.VMNetworkName = vMNetworkNameInstance2;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue2 = vmNicsValue2["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue2 != null && recoveryVMNetworkIdValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance2 = ((string)recoveryVMNetworkIdValue2);
                                                    vMNicDetailsInstance2.RecoveryVMNetworkId = recoveryVMNetworkIdInstance2;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue2 = vmNicsValue2["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue2 != null && recoveryVMSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance2 = ((string)recoveryVMSubnetNameValue2);
                                                    vMNicDetailsInstance2.RecoveryVMSubnetName = recoveryVMSubnetNameInstance2;
                                                }
                                                
                                                JToken ipAddressTypeValue2 = vmNicsValue2["ipAddressType"];
                                                if (ipAddressTypeValue2 != null && ipAddressTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance2 = ((string)ipAddressTypeValue2);
                                                    vMNicDetailsInstance2.IpAddressType = ipAddressTypeInstance2;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue2 = vmNicsValue2["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue2 != null && replicaNicStaticIPAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance2 = ((string)replicaNicStaticIPAddressValue2);
                                                    vMNicDetailsInstance2.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance2;
                                                }
                                                
                                                JToken selectionTypeValue2 = vmNicsValue2["selectionType"];
                                                if (selectionTypeValue2 != null && selectionTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance2 = ((string)selectionTypeValue2);
                                                    vMNicDetailsInstance2.SelectionType = selectionTypeInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken initialReplicationDetailsValue2 = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue2 != null && initialReplicationDetailsValue2.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance2 = new InitialReplicationDetails();
                                            hyperVReplica2012R2ReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance2;
                                            
                                            JToken initialReplicationTypeValue2 = initialReplicationDetailsValue2["initialReplicationType"];
                                            if (initialReplicationTypeValue2 != null && initialReplicationTypeValue2.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance2 = ((string)initialReplicationTypeValue2);
                                                initialReplicationDetailsInstance2.InitialReplicationType = initialReplicationTypeInstance2;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue2 = initialReplicationDetailsValue2["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue2 != null && initialReplicationProgressPercentageValue2.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance2 = ((string)initialReplicationProgressPercentageValue2);
                                                initialReplicationDetailsInstance2.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance2;
                                            }
                                        }
                                        
                                        JToken vMDiskDetailsArray2 = providerSpecificDetailsValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray2 != null && vMDiskDetailsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue2 in ((JArray)vMDiskDetailsArray2))
                                            {
                                                DiskDetails diskDetailsInstance2 = new DiskDetails();
                                                hyperVReplica2012R2ReplicationDetailsInstance.VMDiskDetails.Add(diskDetailsInstance2);
                                                
                                                JToken maxSizeMBValue2 = vMDiskDetailsValue2["maxSizeMB"];
                                                if (maxSizeMBValue2 != null && maxSizeMBValue2.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance2 = ((ulong)maxSizeMBValue2);
                                                    diskDetailsInstance2.MaxSizeMB = maxSizeMBInstance2;
                                                }
                                                
                                                JToken vhdTypeValue2 = vMDiskDetailsValue2["vhdType"];
                                                if (vhdTypeValue2 != null && vhdTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance2 = ((string)vhdTypeValue2);
                                                    diskDetailsInstance2.VhdType = vhdTypeInstance2;
                                                }
                                                
                                                JToken vhdIdValue2 = vMDiskDetailsValue2["vhdId"];
                                                if (vhdIdValue2 != null && vhdIdValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance2 = ((string)vhdIdValue2);
                                                    diskDetailsInstance2.VhdId = vhdIdInstance2;
                                                }
                                                
                                                JToken vhdNameValue2 = vMDiskDetailsValue2["vhdName"];
                                                if (vhdNameValue2 != null && vhdNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance2 = ((string)vhdNameValue2);
                                                    diskDetailsInstance2.VhdName = vhdNameInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue2 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                            hyperVReplica2012R2ReplicationDetailsInstance.InstanceType = instanceTypeInstance2;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplica2012R2ReplicationDetailsInstance;
                                    }
                                    if (typeName == "VMwareAzureV2")
                                    {
                                        VMwareAzureV2ProviderSpecificSettings vMwareAzureV2ProviderSpecificSettingsInstance = new VMwareAzureV2ProviderSpecificSettings();
                                        
                                        JToken infrastructureVmIdValue = providerSpecificDetailsValue["infrastructureVmId"];
                                        if (infrastructureVmIdValue != null && infrastructureVmIdValue.Type != JTokenType.Null)
                                        {
                                            string infrastructureVmIdInstance = ((string)infrastructureVmIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.InfrastructureVmId = infrastructureVmIdInstance;
                                        }
                                        
                                        JToken vCenterInfrastructureIdValue = providerSpecificDetailsValue["vCenterInfrastructureId"];
                                        if (vCenterInfrastructureIdValue != null && vCenterInfrastructureIdValue.Type != JTokenType.Null)
                                        {
                                            string vCenterInfrastructureIdInstance = ((string)vCenterInfrastructureIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VCenterInfrastructureId = vCenterInfrastructureIdInstance;
                                        }
                                        
                                        JToken protectionStageValue = providerSpecificDetailsValue["protectionStage"];
                                        if (protectionStageValue != null && protectionStageValue.Type != JTokenType.Null)
                                        {
                                            string protectionStageInstance = ((string)protectionStageValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ProtectionStage = protectionStageInstance;
                                        }
                                        
                                        JToken healthErrorCodeValue = providerSpecificDetailsValue["healthErrorCode"];
                                        if (healthErrorCodeValue != null && healthErrorCodeValue.Type != JTokenType.Null)
                                        {
                                            string healthErrorCodeInstance = ((string)healthErrorCodeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.HealthErrorCode = healthErrorCodeInstance;
                                        }
                                        
                                        JToken resyncRequiredValue = providerSpecificDetailsValue["resyncRequired"];
                                        if (resyncRequiredValue != null && resyncRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool resyncRequiredInstance = ((bool)resyncRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ResyncRequired = resyncRequiredInstance;
                                        }
                                        
                                        JToken resyncProgressPercentageValue = providerSpecificDetailsValue["resyncProgressPercentage"];
                                        if (resyncProgressPercentageValue != null && resyncProgressPercentageValue.Type != JTokenType.Null)
                                        {
                                            int resyncProgressPercentageInstance = ((int)resyncProgressPercentageValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ResyncProgressPercentage = resyncProgressPercentageInstance;
                                        }
                                        
                                        JToken rpoInSecondsValue = providerSpecificDetailsValue["rpoInSeconds"];
                                        if (rpoInSecondsValue != null && rpoInSecondsValue.Type != JTokenType.Null)
                                        {
                                            long rpoInSecondsInstance = ((long)rpoInSecondsValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RpoInSeconds = rpoInSecondsInstance;
                                        }
                                        
                                        JToken compressedDataRateInMBValue = providerSpecificDetailsValue["compressedDataRateInMB"];
                                        if (compressedDataRateInMBValue != null && compressedDataRateInMBValue.Type != JTokenType.Null)
                                        {
                                            double compressedDataRateInMBInstance = ((double)compressedDataRateInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.CompressedDataRateInMB = compressedDataRateInMBInstance;
                                        }
                                        
                                        JToken uncompressedDataRateInMBValue = providerSpecificDetailsValue["uncompressedDataRateInMB"];
                                        if (uncompressedDataRateInMBValue != null && uncompressedDataRateInMBValue.Type != JTokenType.Null)
                                        {
                                            double uncompressedDataRateInMBInstance = ((double)uncompressedDataRateInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.UncompressedDataRateInMB = uncompressedDataRateInMBInstance;
                                        }
                                        
                                        JToken ipAddressValue = providerSpecificDetailsValue["ipAddress"];
                                        if (ipAddressValue != null && ipAddressValue.Type != JTokenType.Null)
                                        {
                                            string ipAddressInstance = ((string)ipAddressValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IpAddress = ipAddressInstance;
                                        }
                                        
                                        JToken agentVersionValue = providerSpecificDetailsValue["agentVersion"];
                                        if (agentVersionValue != null && agentVersionValue.Type != JTokenType.Null)
                                        {
                                            string agentVersionInstance = ((string)agentVersionValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.AgentVersion = agentVersionInstance;
                                        }
                                        
                                        JToken latestUpdateVersionValue = providerSpecificDetailsValue["latestUpdateVersion"];
                                        if (latestUpdateVersionValue != null && latestUpdateVersionValue.Type != JTokenType.Null)
                                        {
                                            string latestUpdateVersionInstance = ((string)latestUpdateVersionValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.LatestUpdateVersion = latestUpdateVersionInstance;
                                        }
                                        
                                        JToken isAgentUpdateRequiredValue = providerSpecificDetailsValue["isAgentUpdateRequired"];
                                        if (isAgentUpdateRequiredValue != null && isAgentUpdateRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool isAgentUpdateRequiredInstance = ((bool)isAgentUpdateRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IsAgentUpdateRequired = isAgentUpdateRequiredInstance;
                                        }
                                        
                                        JToken isRebootAfterUpdateRequiredValue = providerSpecificDetailsValue["isRebootAfterUpdateRequired"];
                                        if (isRebootAfterUpdateRequiredValue != null && isRebootAfterUpdateRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool isRebootAfterUpdateRequiredInstance = ((bool)isRebootAfterUpdateRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IsRebootAfterUpdateRequired = isRebootAfterUpdateRequiredInstance;
                                        }
                                        
                                        JToken lastHeartbeatValue = providerSpecificDetailsValue["lastHeartbeat"];
                                        if (lastHeartbeatValue != null && lastHeartbeatValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastHeartbeatInstance = ((DateTime)lastHeartbeatValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.LastHeartbeat = lastHeartbeatInstance;
                                        }
                                        
                                        JToken processServerIdValue = providerSpecificDetailsValue["processServerId"];
                                        if (processServerIdValue != null && processServerIdValue.Type != JTokenType.Null)
                                        {
                                            string processServerIdInstance = ((string)processServerIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ProcessServerId = processServerIdInstance;
                                        }
                                        
                                        JToken multiVmGroupIdValue = providerSpecificDetailsValue["multiVmGroupId"];
                                        if (multiVmGroupIdValue != null && multiVmGroupIdValue.Type != JTokenType.Null)
                                        {
                                            string multiVmGroupIdInstance = ((string)multiVmGroupIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MultiVmGroupId = multiVmGroupIdInstance;
                                        }
                                        
                                        JToken multiVmGroupNameValue = providerSpecificDetailsValue["multiVmGroupName"];
                                        if (multiVmGroupNameValue != null && multiVmGroupNameValue.Type != JTokenType.Null)
                                        {
                                            string multiVmGroupNameInstance = ((string)multiVmGroupNameValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MultiVmGroupName = multiVmGroupNameInstance;
                                        }
                                        
                                        JToken protectedVolumesArray = providerSpecificDetailsValue["protectedVolumes"];
                                        if (protectedVolumesArray != null && protectedVolumesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken protectedVolumesValue in ((JArray)protectedVolumesArray))
                                            {
                                                VMwareAzureV2ProtectedVolumeDetails vMwareAzureV2ProtectedVolumeDetailsInstance = new VMwareAzureV2ProtectedVolumeDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.ProtectedVolumes.Add(vMwareAzureV2ProtectedVolumeDetailsInstance);
                                                
                                                JToken nameValue = protectedVolumesValue["name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.Name = nameInstance;
                                                }
                                                
                                                JToken protectionStageValue2 = protectedVolumesValue["protectionStage"];
                                                if (protectionStageValue2 != null && protectionStageValue2.Type != JTokenType.Null)
                                                {
                                                    string protectionStageInstance2 = ((string)protectionStageValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ProtectionStage = protectionStageInstance2;
                                                }
                                                
                                                JToken healthErrorCodeValue2 = protectedVolumesValue["healthErrorCode"];
                                                if (healthErrorCodeValue2 != null && healthErrorCodeValue2.Type != JTokenType.Null)
                                                {
                                                    string healthErrorCodeInstance2 = ((string)healthErrorCodeValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.HealthErrorCode = healthErrorCodeInstance2;
                                                }
                                                
                                                JToken rpoInSecondsValue2 = protectedVolumesValue["rpoInSeconds"];
                                                if (rpoInSecondsValue2 != null && rpoInSecondsValue2.Type != JTokenType.Null)
                                                {
                                                    long rpoInSecondsInstance2 = ((long)rpoInSecondsValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.RpoInSeconds = rpoInSecondsInstance2;
                                                }
                                                
                                                JToken resyncRequiredValue2 = protectedVolumesValue["resyncRequired"];
                                                if (resyncRequiredValue2 != null && resyncRequiredValue2.Type != JTokenType.Null)
                                                {
                                                    bool resyncRequiredInstance2 = ((bool)resyncRequiredValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncRequired = resyncRequiredInstance2;
                                                }
                                                
                                                JToken resyncProgressPercentageValue2 = protectedVolumesValue["resyncProgressPercentage"];
                                                if (resyncProgressPercentageValue2 != null && resyncProgressPercentageValue2.Type != JTokenType.Null)
                                                {
                                                    int resyncProgressPercentageInstance2 = ((int)resyncProgressPercentageValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncProgressPercentage = resyncProgressPercentageInstance2;
                                                }
                                                
                                                JToken resyncDurationInSecondsValue = protectedVolumesValue["resyncDurationInSeconds"];
                                                if (resyncDurationInSecondsValue != null && resyncDurationInSecondsValue.Type != JTokenType.Null)
                                                {
                                                    long resyncDurationInSecondsInstance = ((long)resyncDurationInSecondsValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncDurationInSeconds = resyncDurationInSecondsInstance;
                                                }
                                                
                                                JToken volumeCapacityInBytesValue = protectedVolumesValue["volumeCapacityInBytes"];
                                                if (volumeCapacityInBytesValue != null && volumeCapacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long volumeCapacityInBytesInstance = ((long)volumeCapacityInBytesValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.VolumeCapacityInBytes = volumeCapacityInBytesInstance;
                                                }
                                                
                                                JToken fileSystemCapacityInBytesValue = protectedVolumesValue["fileSystemCapacityInBytes"];
                                                if (fileSystemCapacityInBytesValue != null && fileSystemCapacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long fileSystemCapacityInBytesInstance = ((long)fileSystemCapacityInBytesValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.FileSystemCapacityInBytes = fileSystemCapacityInBytesInstance;
                                                }
                                                
                                                JToken sourceDataInMBValue = protectedVolumesValue["sourceDataInMB"];
                                                if (sourceDataInMBValue != null && sourceDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double sourceDataInMBInstance = ((double)sourceDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.SourceDataInMB = sourceDataInMBInstance;
                                                }
                                                
                                                JToken psDataInMBValue = protectedVolumesValue["psDataInMB"];
                                                if (psDataInMBValue != null && psDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double psDataInMBInstance = ((double)psDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.PSDataInMB = psDataInMBInstance;
                                                }
                                                
                                                JToken targetDataInMBValue = protectedVolumesValue["targetDataInMB"];
                                                if (targetDataInMBValue != null && targetDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double targetDataInMBInstance = ((double)targetDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.TargetDataInMB = targetDataInMBInstance;
                                                }
                                                
                                                JToken volumeResizedValue = protectedVolumesValue["volumeResized"];
                                                if (volumeResizedValue != null && volumeResizedValue.Type != JTokenType.Null)
                                                {
                                                    bool volumeResizedInstance = ((bool)volumeResizedValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.VolumeResized = volumeResizedInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken volumeResizedValue2 = providerSpecificDetailsValue["volumeResized"];
                                        if (volumeResizedValue2 != null && volumeResizedValue2.Type != JTokenType.Null)
                                        {
                                            bool volumeResizedInstance2 = ((bool)volumeResizedValue2);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VolumeResized = volumeResizedInstance2;
                                        }
                                        
                                        JToken masterTargetIdValue = providerSpecificDetailsValue["masterTargetId"];
                                        if (masterTargetIdValue != null && masterTargetIdValue.Type != JTokenType.Null)
                                        {
                                            string masterTargetIdInstance = ((string)masterTargetIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MasterTargetId = masterTargetIdInstance;
                                        }
                                        
                                        JToken sourceVmCPUCountValue = providerSpecificDetailsValue["sourceVmCPUCount"];
                                        if (sourceVmCPUCountValue != null && sourceVmCPUCountValue.Type != JTokenType.Null)
                                        {
                                            int sourceVmCPUCountInstance = ((int)sourceVmCPUCountValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SourceVmCPUCount = sourceVmCPUCountInstance;
                                        }
                                        
                                        JToken sourceVmRAMSizeInMBValue = providerSpecificDetailsValue["sourceVmRAMSizeInMB"];
                                        if (sourceVmRAMSizeInMBValue != null && sourceVmRAMSizeInMBValue.Type != JTokenType.Null)
                                        {
                                            int sourceVmRAMSizeInMBInstance = ((int)sourceVmRAMSizeInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SourceVmRAMSizeInMB = sourceVmRAMSizeInMBInstance;
                                        }
                                        
                                        JToken osTypeValue = providerSpecificDetailsValue["osType"];
                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance = ((string)osTypeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.OSType = osTypeInstance;
                                        }
                                        
                                        JToken vhdNameValue3 = providerSpecificDetailsValue["vhdName"];
                                        if (vhdNameValue3 != null && vhdNameValue3.Type != JTokenType.Null)
                                        {
                                            string vhdNameInstance3 = ((string)vhdNameValue3);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VHDName = vhdNameInstance3;
                                        }
                                        
                                        JToken osDiskIdValue = providerSpecificDetailsValue["osDiskId"];
                                        if (osDiskIdValue != null && osDiskIdValue.Type != JTokenType.Null)
                                        {
                                            string osDiskIdInstance = ((string)osDiskIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.OSDiskId = osDiskIdInstance;
                                        }
                                        
                                        JToken azureVMDiskDetailsArray = providerSpecificDetailsValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsArray != null && azureVMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken azureVMDiskDetailsValue in ((JArray)azureVMDiskDetailsArray))
                                            {
                                                AzureVmDiskDetails azureVmDiskDetailsInstance = new AzureVmDiskDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.AzureVMDiskDetails.Add(azureVmDiskDetailsInstance);
                                                
                                                JToken vhdTypeValue3 = azureVMDiskDetailsValue["vhdType"];
                                                if (vhdTypeValue3 != null && vhdTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance3 = ((string)vhdTypeValue3);
                                                    azureVmDiskDetailsInstance.VhdType = vhdTypeInstance3;
                                                }
                                                
                                                JToken vhdIdValue3 = azureVMDiskDetailsValue["vhdId"];
                                                if (vhdIdValue3 != null && vhdIdValue3.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance3 = ((string)vhdIdValue3);
                                                    azureVmDiskDetailsInstance.VhdId = vhdIdInstance3;
                                                }
                                                
                                                JToken vhdNameValue4 = azureVMDiskDetailsValue["vhdName"];
                                                if (vhdNameValue4 != null && vhdNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance4 = ((string)vhdNameValue4);
                                                    azureVmDiskDetailsInstance.VhdName = vhdNameInstance4;
                                                }
                                                
                                                JToken maxSizeMBValue3 = azureVMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue3 != null && maxSizeMBValue3.Type != JTokenType.Null)
                                                {
                                                    string maxSizeMBInstance3 = ((string)maxSizeMBValue3);
                                                    azureVmDiskDetailsInstance.MaxSizeMB = maxSizeMBInstance3;
                                                }
                                                
                                                JToken targetDiskLocationValue = azureVMDiskDetailsValue["targetDiskLocation"];
                                                if (targetDiskLocationValue != null && targetDiskLocationValue.Type != JTokenType.Null)
                                                {
                                                    string targetDiskLocationInstance = ((string)targetDiskLocationValue);
                                                    azureVmDiskDetailsInstance.TargetDiskLocation = targetDiskLocationInstance;
                                                }
                                                
                                                JToken lunIdValue = azureVMDiskDetailsValue["lunId"];
                                                if (lunIdValue != null && lunIdValue.Type != JTokenType.Null)
                                                {
                                                    string lunIdInstance = ((string)lunIdValue);
                                                    azureVmDiskDetailsInstance.LunId = lunIdInstance;
                                                }
                                                
                                                JToken targetDiskNameValue = azureVMDiskDetailsValue["targetDiskName"];
                                                if (targetDiskNameValue != null && targetDiskNameValue.Type != JTokenType.Null)
                                                {
                                                    string targetDiskNameInstance = ((string)targetDiskNameValue);
                                                    azureVmDiskDetailsInstance.TargetDiskName = targetDiskNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue = providerSpecificDetailsValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue != null && recoveryAzureVMNameValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance = ((string)recoveryAzureVMNameValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue = providerSpecificDetailsValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue != null && recoveryAzureVMSizeValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance = ((string)recoveryAzureVMSizeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance;
                                        }
                                        
                                        JToken recoveryAzureStorageAccountValue = providerSpecificDetailsValue["recoveryAzureStorageAccount"];
                                        if (recoveryAzureStorageAccountValue != null && recoveryAzureStorageAccountValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureStorageAccountInstance = ((string)recoveryAzureStorageAccountValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureStorageAccount = recoveryAzureStorageAccountInstance;
                                        }
                                        
                                        JToken vmNicsArray3 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray3 != null && vmNicsArray3.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue3 in ((JArray)vmNicsArray3))
                                            {
                                                VMNicDetails vMNicDetailsInstance3 = new VMNicDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.VMNics.Add(vMNicDetailsInstance3);
                                                
                                                JToken nicIdValue3 = vmNicsValue3["nicId"];
                                                if (nicIdValue3 != null && nicIdValue3.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance3 = ((string)nicIdValue3);
                                                    vMNicDetailsInstance3.NicId = nicIdInstance3;
                                                }
                                                
                                                JToken vMSubnetNameValue3 = vmNicsValue3["vMSubnetName"];
                                                if (vMSubnetNameValue3 != null && vMSubnetNameValue3.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance3 = ((string)vMSubnetNameValue3);
                                                    vMNicDetailsInstance3.VMSubnetName = vMSubnetNameInstance3;
                                                }
                                                
                                                JToken vMNetworkNameValue3 = vmNicsValue3["vMNetworkName"];
                                                if (vMNetworkNameValue3 != null && vMNetworkNameValue3.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance3 = ((string)vMNetworkNameValue3);
                                                    vMNicDetailsInstance3.VMNetworkName = vMNetworkNameInstance3;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue3 = vmNicsValue3["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue3 != null && recoveryVMNetworkIdValue3.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance3 = ((string)recoveryVMNetworkIdValue3);
                                                    vMNicDetailsInstance3.RecoveryVMNetworkId = recoveryVMNetworkIdInstance3;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue3 = vmNicsValue3["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue3 != null && recoveryVMSubnetNameValue3.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance3 = ((string)recoveryVMSubnetNameValue3);
                                                    vMNicDetailsInstance3.RecoveryVMSubnetName = recoveryVMSubnetNameInstance3;
                                                }
                                                
                                                JToken ipAddressTypeValue3 = vmNicsValue3["ipAddressType"];
                                                if (ipAddressTypeValue3 != null && ipAddressTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance3 = ((string)ipAddressTypeValue3);
                                                    vMNicDetailsInstance3.IpAddressType = ipAddressTypeInstance3;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue3 = vmNicsValue3["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue3 != null && replicaNicStaticIPAddressValue3.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance3 = ((string)replicaNicStaticIPAddressValue3);
                                                    vMNicDetailsInstance3.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance3;
                                                }
                                                
                                                JToken selectionTypeValue3 = vmNicsValue3["selectionType"];
                                                if (selectionTypeValue3 != null && selectionTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance3 = ((string)selectionTypeValue3);
                                                    vMNicDetailsInstance3.SelectionType = selectionTypeInstance3;
                                                }
                                            }
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue = providerSpecificDetailsValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue != null && selectedRecoveryAzureNetworkIdValue.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance = ((string)selectedRecoveryAzureNetworkIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance;
                                        }
                                        
                                        JToken discoveryTypeValue = providerSpecificDetailsValue["discoveryType"];
                                        if (discoveryTypeValue != null && discoveryTypeValue.Type != JTokenType.Null)
                                        {
                                            string discoveryTypeInstance = ((string)discoveryTypeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.DiscoveryType = discoveryTypeInstance;
                                        }
                                        
                                        JToken instanceTypeValue3 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.InstanceType = instanceTypeInstance3;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = vMwareAzureV2ProviderSpecificSettingsInstance;
                                    }
                                    if (typeName == "HyperVReplicaAzure")
                                    {
                                        HyperVReplicaAzureReplicationDetails hyperVReplicaAzureReplicationDetailsInstance = new HyperVReplicaAzureReplicationDetails();
                                        
                                        JToken azureVMDiskDetailsArray2 = providerSpecificDetailsValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsArray2 != null && azureVMDiskDetailsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken azureVMDiskDetailsValue2 in ((JArray)azureVMDiskDetailsArray2))
                                            {
                                                AzureVmDiskDetails azureVmDiskDetailsInstance2 = new AzureVmDiskDetails();
                                                hyperVReplicaAzureReplicationDetailsInstance.AzureVMDiskDetails.Add(azureVmDiskDetailsInstance2);
                                                
                                                JToken vhdTypeValue4 = azureVMDiskDetailsValue2["vhdType"];
                                                if (vhdTypeValue4 != null && vhdTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance4 = ((string)vhdTypeValue4);
                                                    azureVmDiskDetailsInstance2.VhdType = vhdTypeInstance4;
                                                }
                                                
                                                JToken vhdIdValue4 = azureVMDiskDetailsValue2["vhdId"];
                                                if (vhdIdValue4 != null && vhdIdValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance4 = ((string)vhdIdValue4);
                                                    azureVmDiskDetailsInstance2.VhdId = vhdIdInstance4;
                                                }
                                                
                                                JToken vhdNameValue5 = azureVMDiskDetailsValue2["vhdName"];
                                                if (vhdNameValue5 != null && vhdNameValue5.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance5 = ((string)vhdNameValue5);
                                                    azureVmDiskDetailsInstance2.VhdName = vhdNameInstance5;
                                                }
                                                
                                                JToken maxSizeMBValue4 = azureVMDiskDetailsValue2["maxSizeMB"];
                                                if (maxSizeMBValue4 != null && maxSizeMBValue4.Type != JTokenType.Null)
                                                {
                                                    string maxSizeMBInstance4 = ((string)maxSizeMBValue4);
                                                    azureVmDiskDetailsInstance2.MaxSizeMB = maxSizeMBInstance4;
                                                }
                                                
                                                JToken targetDiskLocationValue2 = azureVMDiskDetailsValue2["targetDiskLocation"];
                                                if (targetDiskLocationValue2 != null && targetDiskLocationValue2.Type != JTokenType.Null)
                                                {
                                                    string targetDiskLocationInstance2 = ((string)targetDiskLocationValue2);
                                                    azureVmDiskDetailsInstance2.TargetDiskLocation = targetDiskLocationInstance2;
                                                }
                                                
                                                JToken lunIdValue2 = azureVMDiskDetailsValue2["lunId"];
                                                if (lunIdValue2 != null && lunIdValue2.Type != JTokenType.Null)
                                                {
                                                    string lunIdInstance2 = ((string)lunIdValue2);
                                                    azureVmDiskDetailsInstance2.LunId = lunIdInstance2;
                                                }
                                                
                                                JToken targetDiskNameValue2 = azureVMDiskDetailsValue2["targetDiskName"];
                                                if (targetDiskNameValue2 != null && targetDiskNameValue2.Type != JTokenType.Null)
                                                {
                                                    string targetDiskNameInstance2 = ((string)targetDiskNameValue2);
                                                    azureVmDiskDetailsInstance2.TargetDiskName = targetDiskNameInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue2 = providerSpecificDetailsValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue2 != null && recoveryAzureVMNameValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance2 = ((string)recoveryAzureVMNameValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance2;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue2 = providerSpecificDetailsValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue2 != null && recoveryAzureVMSizeValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance2 = ((string)recoveryAzureVMSizeValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance2;
                                        }
                                        
                                        JToken recoveryAzureStorageAccountValue2 = providerSpecificDetailsValue["recoveryAzureStorageAccount"];
                                        if (recoveryAzureStorageAccountValue2 != null && recoveryAzureStorageAccountValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureStorageAccountInstance2 = ((string)recoveryAzureStorageAccountValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureStorageAccount = recoveryAzureStorageAccountInstance2;
                                        }
                                        
                                        JToken lastReplicatedTimeValue3 = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue3 != null && lastReplicatedTimeValue3.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance3 = ((string)lastReplicatedTimeValue3);
                                            hyperVReplicaAzureReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance3;
                                        }
                                        
                                        JToken initialReplicationDetailsValue3 = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue3 != null && initialReplicationDetailsValue3.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance3 = new InitialReplicationDetails();
                                            hyperVReplicaAzureReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance3;
                                            
                                            JToken initialReplicationTypeValue3 = initialReplicationDetailsValue3["initialReplicationType"];
                                            if (initialReplicationTypeValue3 != null && initialReplicationTypeValue3.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance3 = ((string)initialReplicationTypeValue3);
                                                initialReplicationDetailsInstance3.InitialReplicationType = initialReplicationTypeInstance3;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue3 = initialReplicationDetailsValue3["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue3 != null && initialReplicationProgressPercentageValue3.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance3 = ((string)initialReplicationProgressPercentageValue3);
                                                initialReplicationDetailsInstance3.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance3;
                                            }
                                        }
                                        
                                        JToken vmNicsArray4 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray4 != null && vmNicsArray4.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue4 in ((JArray)vmNicsArray4))
                                            {
                                                VMNicDetails vMNicDetailsInstance4 = new VMNicDetails();
                                                hyperVReplicaAzureReplicationDetailsInstance.VMNics.Add(vMNicDetailsInstance4);
                                                
                                                JToken nicIdValue4 = vmNicsValue4["nicId"];
                                                if (nicIdValue4 != null && nicIdValue4.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance4 = ((string)nicIdValue4);
                                                    vMNicDetailsInstance4.NicId = nicIdInstance4;
                                                }
                                                
                                                JToken vMSubnetNameValue4 = vmNicsValue4["vMSubnetName"];
                                                if (vMSubnetNameValue4 != null && vMSubnetNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance4 = ((string)vMSubnetNameValue4);
                                                    vMNicDetailsInstance4.VMSubnetName = vMSubnetNameInstance4;
                                                }
                                                
                                                JToken vMNetworkNameValue4 = vmNicsValue4["vMNetworkName"];
                                                if (vMNetworkNameValue4 != null && vMNetworkNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance4 = ((string)vMNetworkNameValue4);
                                                    vMNicDetailsInstance4.VMNetworkName = vMNetworkNameInstance4;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue4 = vmNicsValue4["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue4 != null && recoveryVMNetworkIdValue4.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance4 = ((string)recoveryVMNetworkIdValue4);
                                                    vMNicDetailsInstance4.RecoveryVMNetworkId = recoveryVMNetworkIdInstance4;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue4 = vmNicsValue4["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue4 != null && recoveryVMSubnetNameValue4.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance4 = ((string)recoveryVMSubnetNameValue4);
                                                    vMNicDetailsInstance4.RecoveryVMSubnetName = recoveryVMSubnetNameInstance4;
                                                }
                                                
                                                JToken ipAddressTypeValue4 = vmNicsValue4["ipAddressType"];
                                                if (ipAddressTypeValue4 != null && ipAddressTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance4 = ((string)ipAddressTypeValue4);
                                                    vMNicDetailsInstance4.IpAddressType = ipAddressTypeInstance4;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue4 = vmNicsValue4["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue4 != null && replicaNicStaticIPAddressValue4.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance4 = ((string)replicaNicStaticIPAddressValue4);
                                                    vMNicDetailsInstance4.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance4;
                                                }
                                                
                                                JToken selectionTypeValue4 = vmNicsValue4["selectionType"];
                                                if (selectionTypeValue4 != null && selectionTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance4 = ((string)selectionTypeValue4);
                                                    vMNicDetailsInstance4.SelectionType = selectionTypeInstance4;
                                                }
                                            }
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue2 = providerSpecificDetailsValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue2 != null && selectedRecoveryAzureNetworkIdValue2.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance2 = ((string)selectedRecoveryAzureNetworkIdValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance2;
                                        }
                                        
                                        JToken encryptionValue = providerSpecificDetailsValue["encryption"];
                                        if (encryptionValue != null && encryptionValue.Type != JTokenType.Null)
                                        {
                                            string encryptionInstance = ((string)encryptionValue);
                                            hyperVReplicaAzureReplicationDetailsInstance.Encryption = encryptionInstance;
                                        }
                                        
                                        JToken oSDetailsValue = providerSpecificDetailsValue["oSDetails"];
                                        if (oSDetailsValue != null && oSDetailsValue.Type != JTokenType.Null)
                                        {
                                            OSDetails oSDetailsInstance = new OSDetails();
                                            hyperVReplicaAzureReplicationDetailsInstance.OSDetails = oSDetailsInstance;
                                            
                                            JToken osTypeValue2 = oSDetailsValue["osType"];
                                            if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                            {
                                                string osTypeInstance2 = ((string)osTypeValue2);
                                                oSDetailsInstance.OsType = osTypeInstance2;
                                            }
                                            
                                            JToken productTypeValue = oSDetailsValue["productType"];
                                            if (productTypeValue != null && productTypeValue.Type != JTokenType.Null)
                                            {
                                                string productTypeInstance = ((string)productTypeValue);
                                                oSDetailsInstance.ProductType = productTypeInstance;
                                            }
                                            
                                            JToken osEditionValue = oSDetailsValue["osEdition"];
                                            if (osEditionValue != null && osEditionValue.Type != JTokenType.Null)
                                            {
                                                string osEditionInstance = ((string)osEditionValue);
                                                oSDetailsInstance.OSEdition = osEditionInstance;
                                            }
                                            
                                            JToken oSVersionValue = oSDetailsValue["oSVersion"];
                                            if (oSVersionValue != null && oSVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSVersionInstance = ((string)oSVersionValue);
                                                oSDetailsInstance.OSVersion = oSVersionInstance;
                                            }
                                            
                                            JToken oSMajorVersionValue = oSDetailsValue["oSMajorVersion"];
                                            if (oSMajorVersionValue != null && oSMajorVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSMajorVersionInstance = ((string)oSMajorVersionValue);
                                                oSDetailsInstance.OSMajorVersion = oSMajorVersionInstance;
                                            }
                                            
                                            JToken oSMinorVersionValue = oSDetailsValue["oSMinorVersion"];
                                            if (oSMinorVersionValue != null && oSMinorVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSMinorVersionInstance = ((string)oSMinorVersionValue);
                                                oSDetailsInstance.OSMinorVersion = oSMinorVersionInstance;
                                            }
                                        }
                                        
                                        JToken sourceVmRAMSizeInMBValue2 = providerSpecificDetailsValue["sourceVmRAMSizeInMB"];
                                        if (sourceVmRAMSizeInMBValue2 != null && sourceVmRAMSizeInMBValue2.Type != JTokenType.Null)
                                        {
                                            int sourceVmRAMSizeInMBInstance2 = ((int)sourceVmRAMSizeInMBValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SourceVmRAMSizeInMB = sourceVmRAMSizeInMBInstance2;
                                        }
                                        
                                        JToken sourceVmCPUCountValue2 = providerSpecificDetailsValue["sourceVmCPUCount"];
                                        if (sourceVmCPUCountValue2 != null && sourceVmCPUCountValue2.Type != JTokenType.Null)
                                        {
                                            int sourceVmCPUCountInstance2 = ((int)sourceVmCPUCountValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SourceVmCPUCount = sourceVmCPUCountInstance2;
                                        }
                                        
                                        JToken instanceTypeValue4 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue4 != null && instanceTypeValue4.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance4 = ((string)instanceTypeValue4);
                                            hyperVReplicaAzureReplicationDetailsInstance.InstanceType = instanceTypeInstance4;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplicaAzureReplicationDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                replicationProtectedItemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                replicationProtectedItemInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                replicationProtectedItemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                replicationProtectedItemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    replicationProtectedItemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Service response for replication protected items operation.
        /// </returns>
        public async Task<ReplicationProtectedItemOperationResponse> GetReprotectStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetReprotectStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ReplicationProtectedItemOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ReplicationProtectedItemOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ReplicationProtectedItem replicationProtectedItemInstance = new ReplicationProtectedItem();
                            result.ReplicationProtectedItem = replicationProtectedItemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ReplicationProtectedItemProperties propertiesInstance = new ReplicationProtectedItemProperties();
                                replicationProtectedItemInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken protectedItemTypeValue = propertiesValue["protectedItemType"];
                                if (protectedItemTypeValue != null && protectedItemTypeValue.Type != JTokenType.Null)
                                {
                                    string protectedItemTypeInstance = ((string)protectedItemTypeValue);
                                    propertiesInstance.ProtectedItemType = protectedItemTypeInstance;
                                }
                                
                                JToken protectableItemIdValue = propertiesValue["protectableItemId"];
                                if (protectableItemIdValue != null && protectableItemIdValue.Type != JTokenType.Null)
                                {
                                    string protectableItemIdInstance = ((string)protectableItemIdValue);
                                    propertiesInstance.ProtectableItemId = protectableItemIdInstance;
                                }
                                
                                JToken recoveryServicesProviderIdValue = propertiesValue["recoveryServicesProviderId"];
                                if (recoveryServicesProviderIdValue != null && recoveryServicesProviderIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryServicesProviderIdInstance = ((string)recoveryServicesProviderIdValue);
                                    propertiesInstance.RecoveryServicesProviderId = recoveryServicesProviderIdInstance;
                                }
                                
                                JToken primaryFabricFriendlyNameValue = propertiesValue["primaryFabricFriendlyName"];
                                if (primaryFabricFriendlyNameValue != null && primaryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricFriendlyNameInstance = ((string)primaryFabricFriendlyNameValue);
                                    propertiesInstance.PrimaryFabricFriendlyName = primaryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricFriendlyNameValue = propertiesValue["recoveryFabricFriendlyName"];
                                if (recoveryFabricFriendlyNameValue != null && recoveryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricFriendlyNameInstance = ((string)recoveryFabricFriendlyNameValue);
                                    propertiesInstance.RecoveryFabricFriendlyName = recoveryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricIdValue = propertiesValue["recoveryFabricId"];
                                if (recoveryFabricIdValue != null && recoveryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricIdInstance = ((string)recoveryFabricIdValue);
                                    propertiesInstance.RecoveryFabricId = recoveryFabricIdInstance;
                                }
                                
                                JToken primaryProtectionContainerFriendlyNameValue = propertiesValue["primaryProtectionContainerFriendlyName"];
                                if (primaryProtectionContainerFriendlyNameValue != null && primaryProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryProtectionContainerFriendlyNameInstance = ((string)primaryProtectionContainerFriendlyNameValue);
                                    propertiesInstance.PrimaryProtectionContainerFriendlyName = primaryProtectionContainerFriendlyNameInstance;
                                }
                                
                                JToken recoveryProtectionContainerFriendlyNameValue = propertiesValue["recoveryProtectionContainerFriendlyName"];
                                if (recoveryProtectionContainerFriendlyNameValue != null && recoveryProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryProtectionContainerFriendlyNameInstance = ((string)recoveryProtectionContainerFriendlyNameValue);
                                    propertiesInstance.RecoveryProtectionContainerFriendlyName = recoveryProtectionContainerFriendlyNameInstance;
                                }
                                
                                JToken protectionStateValue = propertiesValue["protectionState"];
                                if (protectionStateValue != null && protectionStateValue.Type != JTokenType.Null)
                                {
                                    string protectionStateInstance = ((string)protectionStateValue);
                                    propertiesInstance.ProtectionState = protectionStateInstance;
                                }
                                
                                JToken protectionStateDescriptionValue = propertiesValue["protectionStateDescription"];
                                if (protectionStateDescriptionValue != null && protectionStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string protectionStateDescriptionInstance = ((string)protectionStateDescriptionValue);
                                    propertiesInstance.ProtectionStateDescription = protectionStateDescriptionInstance;
                                }
                                
                                JToken activeLocationValue = propertiesValue["activeLocation"];
                                if (activeLocationValue != null && activeLocationValue.Type != JTokenType.Null)
                                {
                                    string activeLocationInstance = ((string)activeLocationValue);
                                    propertiesInstance.ActiveLocation = activeLocationInstance;
                                }
                                
                                JToken testFailoverStateValue = propertiesValue["testFailoverState"];
                                if (testFailoverStateValue != null && testFailoverStateValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateInstance = ((string)testFailoverStateValue);
                                    propertiesInstance.TestFailoverState = testFailoverStateInstance;
                                }
                                
                                JToken testFailoverStateDescriptionValue = propertiesValue["testFailoverStateDescription"];
                                if (testFailoverStateDescriptionValue != null && testFailoverStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateDescriptionInstance = ((string)testFailoverStateDescriptionValue);
                                    propertiesInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                    }
                                }
                                
                                JToken replicationHealthValue = propertiesValue["replicationHealth"];
                                if (replicationHealthValue != null && replicationHealthValue.Type != JTokenType.Null)
                                {
                                    string replicationHealthInstance = ((string)replicationHealthValue);
                                    propertiesInstance.ReplicationHealth = replicationHealthInstance;
                                }
                                
                                JToken replicationHealthErrorsArray = propertiesValue["replicationHealthErrors"];
                                if (replicationHealthErrorsArray != null && replicationHealthErrorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken replicationHealthErrorsValue in ((JArray)replicationHealthErrorsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.ReplicationHealthErrors.Add(healthErrorInstance);
                                        
                                        JToken errorLevelValue = replicationHealthErrorsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCodeValue = replicationHealthErrorsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = replicationHealthErrorsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = replicationHealthErrorsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = replicationHealthErrorsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = replicationHealthErrorsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            string creationTimeUtcInstance = ((string)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = replicationHealthErrorsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = replicationHealthErrorsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                    }
                                }
                                
                                JToken policyIdValue = propertiesValue["policyId"];
                                if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                {
                                    string policyIdInstance = ((string)policyIdValue);
                                    propertiesInstance.PolicyID = policyIdInstance;
                                }
                                
                                JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                    propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                }
                                
                                JToken lastSuccessfulFailoverTimeValue = propertiesValue["lastSuccessfulFailoverTime"];
                                if (lastSuccessfulFailoverTimeValue != null && lastSuccessfulFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSuccessfulFailoverTimeInstance = ((DateTime)lastSuccessfulFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulFailoverTime = lastSuccessfulFailoverTimeInstance;
                                }
                                
                                JToken lastSuccessfulTestFailoverTimeValue = propertiesValue["lastSuccessfulTestFailoverTime"];
                                if (lastSuccessfulTestFailoverTimeValue != null && lastSuccessfulTestFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSuccessfulTestFailoverTimeInstance = ((DateTime)lastSuccessfulTestFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulTestFailoverTime = lastSuccessfulTestFailoverTimeInstance;
                                }
                                
                                JToken currentScenarioValue = propertiesValue["currentScenario"];
                                if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                {
                                    CurrentScenarioDetails currentScenarioInstance = new CurrentScenarioDetails();
                                    propertiesInstance.CurrentScenario = currentScenarioInstance;
                                    
                                    JToken scenarioNameValue = currentScenarioValue["scenarioName"];
                                    if (scenarioNameValue != null && scenarioNameValue.Type != JTokenType.Null)
                                    {
                                        string scenarioNameInstance = ((string)scenarioNameValue);
                                        currentScenarioInstance.ScenarioName = scenarioNameInstance;
                                    }
                                    
                                    JToken jobIdValue = currentScenarioValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        currentScenarioInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken startTimeValue = currentScenarioValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        currentScenarioInstance.StartTime = startTimeInstance;
                                    }
                                }
                                
                                JToken failoverRecoveryPointIdValue = propertiesValue["failoverRecoveryPointId"];
                                if (failoverRecoveryPointIdValue != null && failoverRecoveryPointIdValue.Type != JTokenType.Null)
                                {
                                    string failoverRecoveryPointIdInstance = ((string)failoverRecoveryPointIdValue);
                                    propertiesInstance.FailoverRecoveryPointId = failoverRecoveryPointIdInstance;
                                }
                                
                                JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                    if (typeName == "HyperVReplica2012")
                                    {
                                        HyperVReplica2012ReplicationDetails hyperVReplica2012ReplicationDetailsInstance = new HyperVReplica2012ReplicationDetails();
                                        
                                        JToken lastReplicatedTimeValue = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue != null && lastReplicatedTimeValue.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance = ((string)lastReplicatedTimeValue);
                                            hyperVReplica2012ReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance;
                                        }
                                        
                                        JToken vmNicsArray = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray != null && vmNicsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue in ((JArray)vmNicsArray))
                                            {
                                                VMNicDetails vMNicDetailsInstance = new VMNicDetails();
                                                hyperVReplica2012ReplicationDetailsInstance.VmNics.Add(vMNicDetailsInstance);
                                                
                                                JToken nicIdValue = vmNicsValue["nicId"];
                                                if (nicIdValue != null && nicIdValue.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance = ((string)nicIdValue);
                                                    vMNicDetailsInstance.NicId = nicIdInstance;
                                                }
                                                
                                                JToken vMSubnetNameValue = vmNicsValue["vMSubnetName"];
                                                if (vMSubnetNameValue != null && vMSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance = ((string)vMSubnetNameValue);
                                                    vMNicDetailsInstance.VMSubnetName = vMSubnetNameInstance;
                                                }
                                                
                                                JToken vMNetworkNameValue = vmNicsValue["vMNetworkName"];
                                                if (vMNetworkNameValue != null && vMNetworkNameValue.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance = ((string)vMNetworkNameValue);
                                                    vMNicDetailsInstance.VMNetworkName = vMNetworkNameInstance;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue = vmNicsValue["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue != null && recoveryVMNetworkIdValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance = ((string)recoveryVMNetworkIdValue);
                                                    vMNicDetailsInstance.RecoveryVMNetworkId = recoveryVMNetworkIdInstance;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue = vmNicsValue["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue != null && recoveryVMSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance = ((string)recoveryVMSubnetNameValue);
                                                    vMNicDetailsInstance.RecoveryVMSubnetName = recoveryVMSubnetNameInstance;
                                                }
                                                
                                                JToken ipAddressTypeValue = vmNicsValue["ipAddressType"];
                                                if (ipAddressTypeValue != null && ipAddressTypeValue.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance = ((string)ipAddressTypeValue);
                                                    vMNicDetailsInstance.IpAddressType = ipAddressTypeInstance;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue = vmNicsValue["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue != null && replicaNicStaticIPAddressValue.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance = ((string)replicaNicStaticIPAddressValue);
                                                    vMNicDetailsInstance.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance;
                                                }
                                                
                                                JToken selectionTypeValue = vmNicsValue["selectionType"];
                                                if (selectionTypeValue != null && selectionTypeValue.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance = ((string)selectionTypeValue);
                                                    vMNicDetailsInstance.SelectionType = selectionTypeInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken initialReplicationDetailsValue = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue != null && initialReplicationDetailsValue.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance = new InitialReplicationDetails();
                                            hyperVReplica2012ReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance;
                                            
                                            JToken initialReplicationTypeValue = initialReplicationDetailsValue["initialReplicationType"];
                                            if (initialReplicationTypeValue != null && initialReplicationTypeValue.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance = ((string)initialReplicationTypeValue);
                                                initialReplicationDetailsInstance.InitialReplicationType = initialReplicationTypeInstance;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue = initialReplicationDetailsValue["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue != null && initialReplicationProgressPercentageValue.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance = ((string)initialReplicationProgressPercentageValue);
                                                initialReplicationDetailsInstance.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance;
                                            }
                                        }
                                        
                                        JToken vMDiskDetailsArray = providerSpecificDetailsValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray != null && vMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue in ((JArray)vMDiskDetailsArray))
                                            {
                                                DiskDetails diskDetailsInstance = new DiskDetails();
                                                hyperVReplica2012ReplicationDetailsInstance.VMDiskDetails.Add(diskDetailsInstance);
                                                
                                                JToken maxSizeMBValue = vMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue != null && maxSizeMBValue.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance = ((ulong)maxSizeMBValue);
                                                    diskDetailsInstance.MaxSizeMB = maxSizeMBInstance;
                                                }
                                                
                                                JToken vhdTypeValue = vMDiskDetailsValue["vhdType"];
                                                if (vhdTypeValue != null && vhdTypeValue.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance = ((string)vhdTypeValue);
                                                    diskDetailsInstance.VhdType = vhdTypeInstance;
                                                }
                                                
                                                JToken vhdIdValue = vMDiskDetailsValue["vhdId"];
                                                if (vhdIdValue != null && vhdIdValue.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance = ((string)vhdIdValue);
                                                    diskDetailsInstance.VhdId = vhdIdInstance;
                                                }
                                                
                                                JToken vhdNameValue = vMDiskDetailsValue["vhdName"];
                                                if (vhdNameValue != null && vhdNameValue.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance = ((string)vhdNameValue);
                                                    diskDetailsInstance.VhdName = vhdNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            hyperVReplica2012ReplicationDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplica2012ReplicationDetailsInstance;
                                    }
                                    if (typeName == "HyperVReplica2012R2")
                                    {
                                        HyperVReplica2012R2ReplicationDetails hyperVReplica2012R2ReplicationDetailsInstance = new HyperVReplica2012R2ReplicationDetails();
                                        
                                        JToken lastReplicatedTimeValue2 = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue2 != null && lastReplicatedTimeValue2.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance2 = ((string)lastReplicatedTimeValue2);
                                            hyperVReplica2012R2ReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance2;
                                        }
                                        
                                        JToken vmNicsArray2 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray2 != null && vmNicsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue2 in ((JArray)vmNicsArray2))
                                            {
                                                VMNicDetails vMNicDetailsInstance2 = new VMNicDetails();
                                                hyperVReplica2012R2ReplicationDetailsInstance.VmNics.Add(vMNicDetailsInstance2);
                                                
                                                JToken nicIdValue2 = vmNicsValue2["nicId"];
                                                if (nicIdValue2 != null && nicIdValue2.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance2 = ((string)nicIdValue2);
                                                    vMNicDetailsInstance2.NicId = nicIdInstance2;
                                                }
                                                
                                                JToken vMSubnetNameValue2 = vmNicsValue2["vMSubnetName"];
                                                if (vMSubnetNameValue2 != null && vMSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance2 = ((string)vMSubnetNameValue2);
                                                    vMNicDetailsInstance2.VMSubnetName = vMSubnetNameInstance2;
                                                }
                                                
                                                JToken vMNetworkNameValue2 = vmNicsValue2["vMNetworkName"];
                                                if (vMNetworkNameValue2 != null && vMNetworkNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance2 = ((string)vMNetworkNameValue2);
                                                    vMNicDetailsInstance2.VMNetworkName = vMNetworkNameInstance2;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue2 = vmNicsValue2["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue2 != null && recoveryVMNetworkIdValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance2 = ((string)recoveryVMNetworkIdValue2);
                                                    vMNicDetailsInstance2.RecoveryVMNetworkId = recoveryVMNetworkIdInstance2;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue2 = vmNicsValue2["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue2 != null && recoveryVMSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance2 = ((string)recoveryVMSubnetNameValue2);
                                                    vMNicDetailsInstance2.RecoveryVMSubnetName = recoveryVMSubnetNameInstance2;
                                                }
                                                
                                                JToken ipAddressTypeValue2 = vmNicsValue2["ipAddressType"];
                                                if (ipAddressTypeValue2 != null && ipAddressTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance2 = ((string)ipAddressTypeValue2);
                                                    vMNicDetailsInstance2.IpAddressType = ipAddressTypeInstance2;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue2 = vmNicsValue2["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue2 != null && replicaNicStaticIPAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance2 = ((string)replicaNicStaticIPAddressValue2);
                                                    vMNicDetailsInstance2.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance2;
                                                }
                                                
                                                JToken selectionTypeValue2 = vmNicsValue2["selectionType"];
                                                if (selectionTypeValue2 != null && selectionTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance2 = ((string)selectionTypeValue2);
                                                    vMNicDetailsInstance2.SelectionType = selectionTypeInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken initialReplicationDetailsValue2 = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue2 != null && initialReplicationDetailsValue2.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance2 = new InitialReplicationDetails();
                                            hyperVReplica2012R2ReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance2;
                                            
                                            JToken initialReplicationTypeValue2 = initialReplicationDetailsValue2["initialReplicationType"];
                                            if (initialReplicationTypeValue2 != null && initialReplicationTypeValue2.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance2 = ((string)initialReplicationTypeValue2);
                                                initialReplicationDetailsInstance2.InitialReplicationType = initialReplicationTypeInstance2;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue2 = initialReplicationDetailsValue2["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue2 != null && initialReplicationProgressPercentageValue2.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance2 = ((string)initialReplicationProgressPercentageValue2);
                                                initialReplicationDetailsInstance2.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance2;
                                            }
                                        }
                                        
                                        JToken vMDiskDetailsArray2 = providerSpecificDetailsValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray2 != null && vMDiskDetailsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue2 in ((JArray)vMDiskDetailsArray2))
                                            {
                                                DiskDetails diskDetailsInstance2 = new DiskDetails();
                                                hyperVReplica2012R2ReplicationDetailsInstance.VMDiskDetails.Add(diskDetailsInstance2);
                                                
                                                JToken maxSizeMBValue2 = vMDiskDetailsValue2["maxSizeMB"];
                                                if (maxSizeMBValue2 != null && maxSizeMBValue2.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance2 = ((ulong)maxSizeMBValue2);
                                                    diskDetailsInstance2.MaxSizeMB = maxSizeMBInstance2;
                                                }
                                                
                                                JToken vhdTypeValue2 = vMDiskDetailsValue2["vhdType"];
                                                if (vhdTypeValue2 != null && vhdTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance2 = ((string)vhdTypeValue2);
                                                    diskDetailsInstance2.VhdType = vhdTypeInstance2;
                                                }
                                                
                                                JToken vhdIdValue2 = vMDiskDetailsValue2["vhdId"];
                                                if (vhdIdValue2 != null && vhdIdValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance2 = ((string)vhdIdValue2);
                                                    diskDetailsInstance2.VhdId = vhdIdInstance2;
                                                }
                                                
                                                JToken vhdNameValue2 = vMDiskDetailsValue2["vhdName"];
                                                if (vhdNameValue2 != null && vhdNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance2 = ((string)vhdNameValue2);
                                                    diskDetailsInstance2.VhdName = vhdNameInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue2 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                            hyperVReplica2012R2ReplicationDetailsInstance.InstanceType = instanceTypeInstance2;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplica2012R2ReplicationDetailsInstance;
                                    }
                                    if (typeName == "VMwareAzureV2")
                                    {
                                        VMwareAzureV2ProviderSpecificSettings vMwareAzureV2ProviderSpecificSettingsInstance = new VMwareAzureV2ProviderSpecificSettings();
                                        
                                        JToken infrastructureVmIdValue = providerSpecificDetailsValue["infrastructureVmId"];
                                        if (infrastructureVmIdValue != null && infrastructureVmIdValue.Type != JTokenType.Null)
                                        {
                                            string infrastructureVmIdInstance = ((string)infrastructureVmIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.InfrastructureVmId = infrastructureVmIdInstance;
                                        }
                                        
                                        JToken vCenterInfrastructureIdValue = providerSpecificDetailsValue["vCenterInfrastructureId"];
                                        if (vCenterInfrastructureIdValue != null && vCenterInfrastructureIdValue.Type != JTokenType.Null)
                                        {
                                            string vCenterInfrastructureIdInstance = ((string)vCenterInfrastructureIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VCenterInfrastructureId = vCenterInfrastructureIdInstance;
                                        }
                                        
                                        JToken protectionStageValue = providerSpecificDetailsValue["protectionStage"];
                                        if (protectionStageValue != null && protectionStageValue.Type != JTokenType.Null)
                                        {
                                            string protectionStageInstance = ((string)protectionStageValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ProtectionStage = protectionStageInstance;
                                        }
                                        
                                        JToken healthErrorCodeValue = providerSpecificDetailsValue["healthErrorCode"];
                                        if (healthErrorCodeValue != null && healthErrorCodeValue.Type != JTokenType.Null)
                                        {
                                            string healthErrorCodeInstance = ((string)healthErrorCodeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.HealthErrorCode = healthErrorCodeInstance;
                                        }
                                        
                                        JToken resyncRequiredValue = providerSpecificDetailsValue["resyncRequired"];
                                        if (resyncRequiredValue != null && resyncRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool resyncRequiredInstance = ((bool)resyncRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ResyncRequired = resyncRequiredInstance;
                                        }
                                        
                                        JToken resyncProgressPercentageValue = providerSpecificDetailsValue["resyncProgressPercentage"];
                                        if (resyncProgressPercentageValue != null && resyncProgressPercentageValue.Type != JTokenType.Null)
                                        {
                                            int resyncProgressPercentageInstance = ((int)resyncProgressPercentageValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ResyncProgressPercentage = resyncProgressPercentageInstance;
                                        }
                                        
                                        JToken rpoInSecondsValue = providerSpecificDetailsValue["rpoInSeconds"];
                                        if (rpoInSecondsValue != null && rpoInSecondsValue.Type != JTokenType.Null)
                                        {
                                            long rpoInSecondsInstance = ((long)rpoInSecondsValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RpoInSeconds = rpoInSecondsInstance;
                                        }
                                        
                                        JToken compressedDataRateInMBValue = providerSpecificDetailsValue["compressedDataRateInMB"];
                                        if (compressedDataRateInMBValue != null && compressedDataRateInMBValue.Type != JTokenType.Null)
                                        {
                                            double compressedDataRateInMBInstance = ((double)compressedDataRateInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.CompressedDataRateInMB = compressedDataRateInMBInstance;
                                        }
                                        
                                        JToken uncompressedDataRateInMBValue = providerSpecificDetailsValue["uncompressedDataRateInMB"];
                                        if (uncompressedDataRateInMBValue != null && uncompressedDataRateInMBValue.Type != JTokenType.Null)
                                        {
                                            double uncompressedDataRateInMBInstance = ((double)uncompressedDataRateInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.UncompressedDataRateInMB = uncompressedDataRateInMBInstance;
                                        }
                                        
                                        JToken ipAddressValue = providerSpecificDetailsValue["ipAddress"];
                                        if (ipAddressValue != null && ipAddressValue.Type != JTokenType.Null)
                                        {
                                            string ipAddressInstance = ((string)ipAddressValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IpAddress = ipAddressInstance;
                                        }
                                        
                                        JToken agentVersionValue = providerSpecificDetailsValue["agentVersion"];
                                        if (agentVersionValue != null && agentVersionValue.Type != JTokenType.Null)
                                        {
                                            string agentVersionInstance = ((string)agentVersionValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.AgentVersion = agentVersionInstance;
                                        }
                                        
                                        JToken latestUpdateVersionValue = providerSpecificDetailsValue["latestUpdateVersion"];
                                        if (latestUpdateVersionValue != null && latestUpdateVersionValue.Type != JTokenType.Null)
                                        {
                                            string latestUpdateVersionInstance = ((string)latestUpdateVersionValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.LatestUpdateVersion = latestUpdateVersionInstance;
                                        }
                                        
                                        JToken isAgentUpdateRequiredValue = providerSpecificDetailsValue["isAgentUpdateRequired"];
                                        if (isAgentUpdateRequiredValue != null && isAgentUpdateRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool isAgentUpdateRequiredInstance = ((bool)isAgentUpdateRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IsAgentUpdateRequired = isAgentUpdateRequiredInstance;
                                        }
                                        
                                        JToken isRebootAfterUpdateRequiredValue = providerSpecificDetailsValue["isRebootAfterUpdateRequired"];
                                        if (isRebootAfterUpdateRequiredValue != null && isRebootAfterUpdateRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool isRebootAfterUpdateRequiredInstance = ((bool)isRebootAfterUpdateRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IsRebootAfterUpdateRequired = isRebootAfterUpdateRequiredInstance;
                                        }
                                        
                                        JToken lastHeartbeatValue = providerSpecificDetailsValue["lastHeartbeat"];
                                        if (lastHeartbeatValue != null && lastHeartbeatValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastHeartbeatInstance = ((DateTime)lastHeartbeatValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.LastHeartbeat = lastHeartbeatInstance;
                                        }
                                        
                                        JToken processServerIdValue = providerSpecificDetailsValue["processServerId"];
                                        if (processServerIdValue != null && processServerIdValue.Type != JTokenType.Null)
                                        {
                                            string processServerIdInstance = ((string)processServerIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ProcessServerId = processServerIdInstance;
                                        }
                                        
                                        JToken multiVmGroupIdValue = providerSpecificDetailsValue["multiVmGroupId"];
                                        if (multiVmGroupIdValue != null && multiVmGroupIdValue.Type != JTokenType.Null)
                                        {
                                            string multiVmGroupIdInstance = ((string)multiVmGroupIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MultiVmGroupId = multiVmGroupIdInstance;
                                        }
                                        
                                        JToken multiVmGroupNameValue = providerSpecificDetailsValue["multiVmGroupName"];
                                        if (multiVmGroupNameValue != null && multiVmGroupNameValue.Type != JTokenType.Null)
                                        {
                                            string multiVmGroupNameInstance = ((string)multiVmGroupNameValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MultiVmGroupName = multiVmGroupNameInstance;
                                        }
                                        
                                        JToken protectedVolumesArray = providerSpecificDetailsValue["protectedVolumes"];
                                        if (protectedVolumesArray != null && protectedVolumesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken protectedVolumesValue in ((JArray)protectedVolumesArray))
                                            {
                                                VMwareAzureV2ProtectedVolumeDetails vMwareAzureV2ProtectedVolumeDetailsInstance = new VMwareAzureV2ProtectedVolumeDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.ProtectedVolumes.Add(vMwareAzureV2ProtectedVolumeDetailsInstance);
                                                
                                                JToken nameValue = protectedVolumesValue["name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.Name = nameInstance;
                                                }
                                                
                                                JToken protectionStageValue2 = protectedVolumesValue["protectionStage"];
                                                if (protectionStageValue2 != null && protectionStageValue2.Type != JTokenType.Null)
                                                {
                                                    string protectionStageInstance2 = ((string)protectionStageValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ProtectionStage = protectionStageInstance2;
                                                }
                                                
                                                JToken healthErrorCodeValue2 = protectedVolumesValue["healthErrorCode"];
                                                if (healthErrorCodeValue2 != null && healthErrorCodeValue2.Type != JTokenType.Null)
                                                {
                                                    string healthErrorCodeInstance2 = ((string)healthErrorCodeValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.HealthErrorCode = healthErrorCodeInstance2;
                                                }
                                                
                                                JToken rpoInSecondsValue2 = protectedVolumesValue["rpoInSeconds"];
                                                if (rpoInSecondsValue2 != null && rpoInSecondsValue2.Type != JTokenType.Null)
                                                {
                                                    long rpoInSecondsInstance2 = ((long)rpoInSecondsValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.RpoInSeconds = rpoInSecondsInstance2;
                                                }
                                                
                                                JToken resyncRequiredValue2 = protectedVolumesValue["resyncRequired"];
                                                if (resyncRequiredValue2 != null && resyncRequiredValue2.Type != JTokenType.Null)
                                                {
                                                    bool resyncRequiredInstance2 = ((bool)resyncRequiredValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncRequired = resyncRequiredInstance2;
                                                }
                                                
                                                JToken resyncProgressPercentageValue2 = protectedVolumesValue["resyncProgressPercentage"];
                                                if (resyncProgressPercentageValue2 != null && resyncProgressPercentageValue2.Type != JTokenType.Null)
                                                {
                                                    int resyncProgressPercentageInstance2 = ((int)resyncProgressPercentageValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncProgressPercentage = resyncProgressPercentageInstance2;
                                                }
                                                
                                                JToken resyncDurationInSecondsValue = protectedVolumesValue["resyncDurationInSeconds"];
                                                if (resyncDurationInSecondsValue != null && resyncDurationInSecondsValue.Type != JTokenType.Null)
                                                {
                                                    long resyncDurationInSecondsInstance = ((long)resyncDurationInSecondsValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncDurationInSeconds = resyncDurationInSecondsInstance;
                                                }
                                                
                                                JToken volumeCapacityInBytesValue = protectedVolumesValue["volumeCapacityInBytes"];
                                                if (volumeCapacityInBytesValue != null && volumeCapacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long volumeCapacityInBytesInstance = ((long)volumeCapacityInBytesValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.VolumeCapacityInBytes = volumeCapacityInBytesInstance;
                                                }
                                                
                                                JToken fileSystemCapacityInBytesValue = protectedVolumesValue["fileSystemCapacityInBytes"];
                                                if (fileSystemCapacityInBytesValue != null && fileSystemCapacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long fileSystemCapacityInBytesInstance = ((long)fileSystemCapacityInBytesValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.FileSystemCapacityInBytes = fileSystemCapacityInBytesInstance;
                                                }
                                                
                                                JToken sourceDataInMBValue = protectedVolumesValue["sourceDataInMB"];
                                                if (sourceDataInMBValue != null && sourceDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double sourceDataInMBInstance = ((double)sourceDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.SourceDataInMB = sourceDataInMBInstance;
                                                }
                                                
                                                JToken psDataInMBValue = protectedVolumesValue["psDataInMB"];
                                                if (psDataInMBValue != null && psDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double psDataInMBInstance = ((double)psDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.PSDataInMB = psDataInMBInstance;
                                                }
                                                
                                                JToken targetDataInMBValue = protectedVolumesValue["targetDataInMB"];
                                                if (targetDataInMBValue != null && targetDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double targetDataInMBInstance = ((double)targetDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.TargetDataInMB = targetDataInMBInstance;
                                                }
                                                
                                                JToken volumeResizedValue = protectedVolumesValue["volumeResized"];
                                                if (volumeResizedValue != null && volumeResizedValue.Type != JTokenType.Null)
                                                {
                                                    bool volumeResizedInstance = ((bool)volumeResizedValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.VolumeResized = volumeResizedInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken volumeResizedValue2 = providerSpecificDetailsValue["volumeResized"];
                                        if (volumeResizedValue2 != null && volumeResizedValue2.Type != JTokenType.Null)
                                        {
                                            bool volumeResizedInstance2 = ((bool)volumeResizedValue2);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VolumeResized = volumeResizedInstance2;
                                        }
                                        
                                        JToken masterTargetIdValue = providerSpecificDetailsValue["masterTargetId"];
                                        if (masterTargetIdValue != null && masterTargetIdValue.Type != JTokenType.Null)
                                        {
                                            string masterTargetIdInstance = ((string)masterTargetIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MasterTargetId = masterTargetIdInstance;
                                        }
                                        
                                        JToken sourceVmCPUCountValue = providerSpecificDetailsValue["sourceVmCPUCount"];
                                        if (sourceVmCPUCountValue != null && sourceVmCPUCountValue.Type != JTokenType.Null)
                                        {
                                            int sourceVmCPUCountInstance = ((int)sourceVmCPUCountValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SourceVmCPUCount = sourceVmCPUCountInstance;
                                        }
                                        
                                        JToken sourceVmRAMSizeInMBValue = providerSpecificDetailsValue["sourceVmRAMSizeInMB"];
                                        if (sourceVmRAMSizeInMBValue != null && sourceVmRAMSizeInMBValue.Type != JTokenType.Null)
                                        {
                                            int sourceVmRAMSizeInMBInstance = ((int)sourceVmRAMSizeInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SourceVmRAMSizeInMB = sourceVmRAMSizeInMBInstance;
                                        }
                                        
                                        JToken osTypeValue = providerSpecificDetailsValue["osType"];
                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance = ((string)osTypeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.OSType = osTypeInstance;
                                        }
                                        
                                        JToken vhdNameValue3 = providerSpecificDetailsValue["vhdName"];
                                        if (vhdNameValue3 != null && vhdNameValue3.Type != JTokenType.Null)
                                        {
                                            string vhdNameInstance3 = ((string)vhdNameValue3);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VHDName = vhdNameInstance3;
                                        }
                                        
                                        JToken osDiskIdValue = providerSpecificDetailsValue["osDiskId"];
                                        if (osDiskIdValue != null && osDiskIdValue.Type != JTokenType.Null)
                                        {
                                            string osDiskIdInstance = ((string)osDiskIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.OSDiskId = osDiskIdInstance;
                                        }
                                        
                                        JToken azureVMDiskDetailsArray = providerSpecificDetailsValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsArray != null && azureVMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken azureVMDiskDetailsValue in ((JArray)azureVMDiskDetailsArray))
                                            {
                                                AzureVmDiskDetails azureVmDiskDetailsInstance = new AzureVmDiskDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.AzureVMDiskDetails.Add(azureVmDiskDetailsInstance);
                                                
                                                JToken vhdTypeValue3 = azureVMDiskDetailsValue["vhdType"];
                                                if (vhdTypeValue3 != null && vhdTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance3 = ((string)vhdTypeValue3);
                                                    azureVmDiskDetailsInstance.VhdType = vhdTypeInstance3;
                                                }
                                                
                                                JToken vhdIdValue3 = azureVMDiskDetailsValue["vhdId"];
                                                if (vhdIdValue3 != null && vhdIdValue3.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance3 = ((string)vhdIdValue3);
                                                    azureVmDiskDetailsInstance.VhdId = vhdIdInstance3;
                                                }
                                                
                                                JToken vhdNameValue4 = azureVMDiskDetailsValue["vhdName"];
                                                if (vhdNameValue4 != null && vhdNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance4 = ((string)vhdNameValue4);
                                                    azureVmDiskDetailsInstance.VhdName = vhdNameInstance4;
                                                }
                                                
                                                JToken maxSizeMBValue3 = azureVMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue3 != null && maxSizeMBValue3.Type != JTokenType.Null)
                                                {
                                                    string maxSizeMBInstance3 = ((string)maxSizeMBValue3);
                                                    azureVmDiskDetailsInstance.MaxSizeMB = maxSizeMBInstance3;
                                                }
                                                
                                                JToken targetDiskLocationValue = azureVMDiskDetailsValue["targetDiskLocation"];
                                                if (targetDiskLocationValue != null && targetDiskLocationValue.Type != JTokenType.Null)
                                                {
                                                    string targetDiskLocationInstance = ((string)targetDiskLocationValue);
                                                    azureVmDiskDetailsInstance.TargetDiskLocation = targetDiskLocationInstance;
                                                }
                                                
                                                JToken lunIdValue = azureVMDiskDetailsValue["lunId"];
                                                if (lunIdValue != null && lunIdValue.Type != JTokenType.Null)
                                                {
                                                    string lunIdInstance = ((string)lunIdValue);
                                                    azureVmDiskDetailsInstance.LunId = lunIdInstance;
                                                }
                                                
                                                JToken targetDiskNameValue = azureVMDiskDetailsValue["targetDiskName"];
                                                if (targetDiskNameValue != null && targetDiskNameValue.Type != JTokenType.Null)
                                                {
                                                    string targetDiskNameInstance = ((string)targetDiskNameValue);
                                                    azureVmDiskDetailsInstance.TargetDiskName = targetDiskNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue = providerSpecificDetailsValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue != null && recoveryAzureVMNameValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance = ((string)recoveryAzureVMNameValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue = providerSpecificDetailsValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue != null && recoveryAzureVMSizeValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance = ((string)recoveryAzureVMSizeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance;
                                        }
                                        
                                        JToken recoveryAzureStorageAccountValue = providerSpecificDetailsValue["recoveryAzureStorageAccount"];
                                        if (recoveryAzureStorageAccountValue != null && recoveryAzureStorageAccountValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureStorageAccountInstance = ((string)recoveryAzureStorageAccountValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureStorageAccount = recoveryAzureStorageAccountInstance;
                                        }
                                        
                                        JToken vmNicsArray3 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray3 != null && vmNicsArray3.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue3 in ((JArray)vmNicsArray3))
                                            {
                                                VMNicDetails vMNicDetailsInstance3 = new VMNicDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.VMNics.Add(vMNicDetailsInstance3);
                                                
                                                JToken nicIdValue3 = vmNicsValue3["nicId"];
                                                if (nicIdValue3 != null && nicIdValue3.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance3 = ((string)nicIdValue3);
                                                    vMNicDetailsInstance3.NicId = nicIdInstance3;
                                                }
                                                
                                                JToken vMSubnetNameValue3 = vmNicsValue3["vMSubnetName"];
                                                if (vMSubnetNameValue3 != null && vMSubnetNameValue3.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance3 = ((string)vMSubnetNameValue3);
                                                    vMNicDetailsInstance3.VMSubnetName = vMSubnetNameInstance3;
                                                }
                                                
                                                JToken vMNetworkNameValue3 = vmNicsValue3["vMNetworkName"];
                                                if (vMNetworkNameValue3 != null && vMNetworkNameValue3.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance3 = ((string)vMNetworkNameValue3);
                                                    vMNicDetailsInstance3.VMNetworkName = vMNetworkNameInstance3;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue3 = vmNicsValue3["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue3 != null && recoveryVMNetworkIdValue3.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance3 = ((string)recoveryVMNetworkIdValue3);
                                                    vMNicDetailsInstance3.RecoveryVMNetworkId = recoveryVMNetworkIdInstance3;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue3 = vmNicsValue3["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue3 != null && recoveryVMSubnetNameValue3.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance3 = ((string)recoveryVMSubnetNameValue3);
                                                    vMNicDetailsInstance3.RecoveryVMSubnetName = recoveryVMSubnetNameInstance3;
                                                }
                                                
                                                JToken ipAddressTypeValue3 = vmNicsValue3["ipAddressType"];
                                                if (ipAddressTypeValue3 != null && ipAddressTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance3 = ((string)ipAddressTypeValue3);
                                                    vMNicDetailsInstance3.IpAddressType = ipAddressTypeInstance3;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue3 = vmNicsValue3["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue3 != null && replicaNicStaticIPAddressValue3.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance3 = ((string)replicaNicStaticIPAddressValue3);
                                                    vMNicDetailsInstance3.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance3;
                                                }
                                                
                                                JToken selectionTypeValue3 = vmNicsValue3["selectionType"];
                                                if (selectionTypeValue3 != null && selectionTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance3 = ((string)selectionTypeValue3);
                                                    vMNicDetailsInstance3.SelectionType = selectionTypeInstance3;
                                                }
                                            }
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue = providerSpecificDetailsValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue != null && selectedRecoveryAzureNetworkIdValue.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance = ((string)selectedRecoveryAzureNetworkIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance;
                                        }
                                        
                                        JToken discoveryTypeValue = providerSpecificDetailsValue["discoveryType"];
                                        if (discoveryTypeValue != null && discoveryTypeValue.Type != JTokenType.Null)
                                        {
                                            string discoveryTypeInstance = ((string)discoveryTypeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.DiscoveryType = discoveryTypeInstance;
                                        }
                                        
                                        JToken instanceTypeValue3 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.InstanceType = instanceTypeInstance3;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = vMwareAzureV2ProviderSpecificSettingsInstance;
                                    }
                                    if (typeName == "HyperVReplicaAzure")
                                    {
                                        HyperVReplicaAzureReplicationDetails hyperVReplicaAzureReplicationDetailsInstance = new HyperVReplicaAzureReplicationDetails();
                                        
                                        JToken azureVMDiskDetailsArray2 = providerSpecificDetailsValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsArray2 != null && azureVMDiskDetailsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken azureVMDiskDetailsValue2 in ((JArray)azureVMDiskDetailsArray2))
                                            {
                                                AzureVmDiskDetails azureVmDiskDetailsInstance2 = new AzureVmDiskDetails();
                                                hyperVReplicaAzureReplicationDetailsInstance.AzureVMDiskDetails.Add(azureVmDiskDetailsInstance2);
                                                
                                                JToken vhdTypeValue4 = azureVMDiskDetailsValue2["vhdType"];
                                                if (vhdTypeValue4 != null && vhdTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance4 = ((string)vhdTypeValue4);
                                                    azureVmDiskDetailsInstance2.VhdType = vhdTypeInstance4;
                                                }
                                                
                                                JToken vhdIdValue4 = azureVMDiskDetailsValue2["vhdId"];
                                                if (vhdIdValue4 != null && vhdIdValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance4 = ((string)vhdIdValue4);
                                                    azureVmDiskDetailsInstance2.VhdId = vhdIdInstance4;
                                                }
                                                
                                                JToken vhdNameValue5 = azureVMDiskDetailsValue2["vhdName"];
                                                if (vhdNameValue5 != null && vhdNameValue5.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance5 = ((string)vhdNameValue5);
                                                    azureVmDiskDetailsInstance2.VhdName = vhdNameInstance5;
                                                }
                                                
                                                JToken maxSizeMBValue4 = azureVMDiskDetailsValue2["maxSizeMB"];
                                                if (maxSizeMBValue4 != null && maxSizeMBValue4.Type != JTokenType.Null)
                                                {
                                                    string maxSizeMBInstance4 = ((string)maxSizeMBValue4);
                                                    azureVmDiskDetailsInstance2.MaxSizeMB = maxSizeMBInstance4;
                                                }
                                                
                                                JToken targetDiskLocationValue2 = azureVMDiskDetailsValue2["targetDiskLocation"];
                                                if (targetDiskLocationValue2 != null && targetDiskLocationValue2.Type != JTokenType.Null)
                                                {
                                                    string targetDiskLocationInstance2 = ((string)targetDiskLocationValue2);
                                                    azureVmDiskDetailsInstance2.TargetDiskLocation = targetDiskLocationInstance2;
                                                }
                                                
                                                JToken lunIdValue2 = azureVMDiskDetailsValue2["lunId"];
                                                if (lunIdValue2 != null && lunIdValue2.Type != JTokenType.Null)
                                                {
                                                    string lunIdInstance2 = ((string)lunIdValue2);
                                                    azureVmDiskDetailsInstance2.LunId = lunIdInstance2;
                                                }
                                                
                                                JToken targetDiskNameValue2 = azureVMDiskDetailsValue2["targetDiskName"];
                                                if (targetDiskNameValue2 != null && targetDiskNameValue2.Type != JTokenType.Null)
                                                {
                                                    string targetDiskNameInstance2 = ((string)targetDiskNameValue2);
                                                    azureVmDiskDetailsInstance2.TargetDiskName = targetDiskNameInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue2 = providerSpecificDetailsValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue2 != null && recoveryAzureVMNameValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance2 = ((string)recoveryAzureVMNameValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance2;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue2 = providerSpecificDetailsValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue2 != null && recoveryAzureVMSizeValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance2 = ((string)recoveryAzureVMSizeValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance2;
                                        }
                                        
                                        JToken recoveryAzureStorageAccountValue2 = providerSpecificDetailsValue["recoveryAzureStorageAccount"];
                                        if (recoveryAzureStorageAccountValue2 != null && recoveryAzureStorageAccountValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureStorageAccountInstance2 = ((string)recoveryAzureStorageAccountValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureStorageAccount = recoveryAzureStorageAccountInstance2;
                                        }
                                        
                                        JToken lastReplicatedTimeValue3 = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue3 != null && lastReplicatedTimeValue3.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance3 = ((string)lastReplicatedTimeValue3);
                                            hyperVReplicaAzureReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance3;
                                        }
                                        
                                        JToken initialReplicationDetailsValue3 = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue3 != null && initialReplicationDetailsValue3.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance3 = new InitialReplicationDetails();
                                            hyperVReplicaAzureReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance3;
                                            
                                            JToken initialReplicationTypeValue3 = initialReplicationDetailsValue3["initialReplicationType"];
                                            if (initialReplicationTypeValue3 != null && initialReplicationTypeValue3.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance3 = ((string)initialReplicationTypeValue3);
                                                initialReplicationDetailsInstance3.InitialReplicationType = initialReplicationTypeInstance3;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue3 = initialReplicationDetailsValue3["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue3 != null && initialReplicationProgressPercentageValue3.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance3 = ((string)initialReplicationProgressPercentageValue3);
                                                initialReplicationDetailsInstance3.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance3;
                                            }
                                        }
                                        
                                        JToken vmNicsArray4 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray4 != null && vmNicsArray4.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue4 in ((JArray)vmNicsArray4))
                                            {
                                                VMNicDetails vMNicDetailsInstance4 = new VMNicDetails();
                                                hyperVReplicaAzureReplicationDetailsInstance.VMNics.Add(vMNicDetailsInstance4);
                                                
                                                JToken nicIdValue4 = vmNicsValue4["nicId"];
                                                if (nicIdValue4 != null && nicIdValue4.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance4 = ((string)nicIdValue4);
                                                    vMNicDetailsInstance4.NicId = nicIdInstance4;
                                                }
                                                
                                                JToken vMSubnetNameValue4 = vmNicsValue4["vMSubnetName"];
                                                if (vMSubnetNameValue4 != null && vMSubnetNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance4 = ((string)vMSubnetNameValue4);
                                                    vMNicDetailsInstance4.VMSubnetName = vMSubnetNameInstance4;
                                                }
                                                
                                                JToken vMNetworkNameValue4 = vmNicsValue4["vMNetworkName"];
                                                if (vMNetworkNameValue4 != null && vMNetworkNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance4 = ((string)vMNetworkNameValue4);
                                                    vMNicDetailsInstance4.VMNetworkName = vMNetworkNameInstance4;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue4 = vmNicsValue4["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue4 != null && recoveryVMNetworkIdValue4.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance4 = ((string)recoveryVMNetworkIdValue4);
                                                    vMNicDetailsInstance4.RecoveryVMNetworkId = recoveryVMNetworkIdInstance4;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue4 = vmNicsValue4["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue4 != null && recoveryVMSubnetNameValue4.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance4 = ((string)recoveryVMSubnetNameValue4);
                                                    vMNicDetailsInstance4.RecoveryVMSubnetName = recoveryVMSubnetNameInstance4;
                                                }
                                                
                                                JToken ipAddressTypeValue4 = vmNicsValue4["ipAddressType"];
                                                if (ipAddressTypeValue4 != null && ipAddressTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance4 = ((string)ipAddressTypeValue4);
                                                    vMNicDetailsInstance4.IpAddressType = ipAddressTypeInstance4;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue4 = vmNicsValue4["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue4 != null && replicaNicStaticIPAddressValue4.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance4 = ((string)replicaNicStaticIPAddressValue4);
                                                    vMNicDetailsInstance4.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance4;
                                                }
                                                
                                                JToken selectionTypeValue4 = vmNicsValue4["selectionType"];
                                                if (selectionTypeValue4 != null && selectionTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance4 = ((string)selectionTypeValue4);
                                                    vMNicDetailsInstance4.SelectionType = selectionTypeInstance4;
                                                }
                                            }
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue2 = providerSpecificDetailsValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue2 != null && selectedRecoveryAzureNetworkIdValue2.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance2 = ((string)selectedRecoveryAzureNetworkIdValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance2;
                                        }
                                        
                                        JToken encryptionValue = providerSpecificDetailsValue["encryption"];
                                        if (encryptionValue != null && encryptionValue.Type != JTokenType.Null)
                                        {
                                            string encryptionInstance = ((string)encryptionValue);
                                            hyperVReplicaAzureReplicationDetailsInstance.Encryption = encryptionInstance;
                                        }
                                        
                                        JToken oSDetailsValue = providerSpecificDetailsValue["oSDetails"];
                                        if (oSDetailsValue != null && oSDetailsValue.Type != JTokenType.Null)
                                        {
                                            OSDetails oSDetailsInstance = new OSDetails();
                                            hyperVReplicaAzureReplicationDetailsInstance.OSDetails = oSDetailsInstance;
                                            
                                            JToken osTypeValue2 = oSDetailsValue["osType"];
                                            if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                            {
                                                string osTypeInstance2 = ((string)osTypeValue2);
                                                oSDetailsInstance.OsType = osTypeInstance2;
                                            }
                                            
                                            JToken productTypeValue = oSDetailsValue["productType"];
                                            if (productTypeValue != null && productTypeValue.Type != JTokenType.Null)
                                            {
                                                string productTypeInstance = ((string)productTypeValue);
                                                oSDetailsInstance.ProductType = productTypeInstance;
                                            }
                                            
                                            JToken osEditionValue = oSDetailsValue["osEdition"];
                                            if (osEditionValue != null && osEditionValue.Type != JTokenType.Null)
                                            {
                                                string osEditionInstance = ((string)osEditionValue);
                                                oSDetailsInstance.OSEdition = osEditionInstance;
                                            }
                                            
                                            JToken oSVersionValue = oSDetailsValue["oSVersion"];
                                            if (oSVersionValue != null && oSVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSVersionInstance = ((string)oSVersionValue);
                                                oSDetailsInstance.OSVersion = oSVersionInstance;
                                            }
                                            
                                            JToken oSMajorVersionValue = oSDetailsValue["oSMajorVersion"];
                                            if (oSMajorVersionValue != null && oSMajorVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSMajorVersionInstance = ((string)oSMajorVersionValue);
                                                oSDetailsInstance.OSMajorVersion = oSMajorVersionInstance;
                                            }
                                            
                                            JToken oSMinorVersionValue = oSDetailsValue["oSMinorVersion"];
                                            if (oSMinorVersionValue != null && oSMinorVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSMinorVersionInstance = ((string)oSMinorVersionValue);
                                                oSDetailsInstance.OSMinorVersion = oSMinorVersionInstance;
                                            }
                                        }
                                        
                                        JToken sourceVmRAMSizeInMBValue2 = providerSpecificDetailsValue["sourceVmRAMSizeInMB"];
                                        if (sourceVmRAMSizeInMBValue2 != null && sourceVmRAMSizeInMBValue2.Type != JTokenType.Null)
                                        {
                                            int sourceVmRAMSizeInMBInstance2 = ((int)sourceVmRAMSizeInMBValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SourceVmRAMSizeInMB = sourceVmRAMSizeInMBInstance2;
                                        }
                                        
                                        JToken sourceVmCPUCountValue2 = providerSpecificDetailsValue["sourceVmCPUCount"];
                                        if (sourceVmCPUCountValue2 != null && sourceVmCPUCountValue2.Type != JTokenType.Null)
                                        {
                                            int sourceVmCPUCountInstance2 = ((int)sourceVmCPUCountValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SourceVmCPUCount = sourceVmCPUCountInstance2;
                                        }
                                        
                                        JToken instanceTypeValue4 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue4 != null && instanceTypeValue4.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance4 = ((string)instanceTypeValue4);
                                            hyperVReplicaAzureReplicationDetailsInstance.InstanceType = instanceTypeInstance4;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplicaAzureReplicationDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                replicationProtectedItemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                replicationProtectedItemInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                replicationProtectedItemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                replicationProtectedItemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    replicationProtectedItemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Service response for replication protected items operation.
        /// </returns>
        public async Task<ReplicationProtectedItemOperationResponse> GetTestFailoverStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetTestFailoverStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ReplicationProtectedItemOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ReplicationProtectedItemOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ReplicationProtectedItem replicationProtectedItemInstance = new ReplicationProtectedItem();
                            result.ReplicationProtectedItem = replicationProtectedItemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ReplicationProtectedItemProperties propertiesInstance = new ReplicationProtectedItemProperties();
                                replicationProtectedItemInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken protectedItemTypeValue = propertiesValue["protectedItemType"];
                                if (protectedItemTypeValue != null && protectedItemTypeValue.Type != JTokenType.Null)
                                {
                                    string protectedItemTypeInstance = ((string)protectedItemTypeValue);
                                    propertiesInstance.ProtectedItemType = protectedItemTypeInstance;
                                }
                                
                                JToken protectableItemIdValue = propertiesValue["protectableItemId"];
                                if (protectableItemIdValue != null && protectableItemIdValue.Type != JTokenType.Null)
                                {
                                    string protectableItemIdInstance = ((string)protectableItemIdValue);
                                    propertiesInstance.ProtectableItemId = protectableItemIdInstance;
                                }
                                
                                JToken recoveryServicesProviderIdValue = propertiesValue["recoveryServicesProviderId"];
                                if (recoveryServicesProviderIdValue != null && recoveryServicesProviderIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryServicesProviderIdInstance = ((string)recoveryServicesProviderIdValue);
                                    propertiesInstance.RecoveryServicesProviderId = recoveryServicesProviderIdInstance;
                                }
                                
                                JToken primaryFabricFriendlyNameValue = propertiesValue["primaryFabricFriendlyName"];
                                if (primaryFabricFriendlyNameValue != null && primaryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricFriendlyNameInstance = ((string)primaryFabricFriendlyNameValue);
                                    propertiesInstance.PrimaryFabricFriendlyName = primaryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricFriendlyNameValue = propertiesValue["recoveryFabricFriendlyName"];
                                if (recoveryFabricFriendlyNameValue != null && recoveryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricFriendlyNameInstance = ((string)recoveryFabricFriendlyNameValue);
                                    propertiesInstance.RecoveryFabricFriendlyName = recoveryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricIdValue = propertiesValue["recoveryFabricId"];
                                if (recoveryFabricIdValue != null && recoveryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricIdInstance = ((string)recoveryFabricIdValue);
                                    propertiesInstance.RecoveryFabricId = recoveryFabricIdInstance;
                                }
                                
                                JToken primaryProtectionContainerFriendlyNameValue = propertiesValue["primaryProtectionContainerFriendlyName"];
                                if (primaryProtectionContainerFriendlyNameValue != null && primaryProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryProtectionContainerFriendlyNameInstance = ((string)primaryProtectionContainerFriendlyNameValue);
                                    propertiesInstance.PrimaryProtectionContainerFriendlyName = primaryProtectionContainerFriendlyNameInstance;
                                }
                                
                                JToken recoveryProtectionContainerFriendlyNameValue = propertiesValue["recoveryProtectionContainerFriendlyName"];
                                if (recoveryProtectionContainerFriendlyNameValue != null && recoveryProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryProtectionContainerFriendlyNameInstance = ((string)recoveryProtectionContainerFriendlyNameValue);
                                    propertiesInstance.RecoveryProtectionContainerFriendlyName = recoveryProtectionContainerFriendlyNameInstance;
                                }
                                
                                JToken protectionStateValue = propertiesValue["protectionState"];
                                if (protectionStateValue != null && protectionStateValue.Type != JTokenType.Null)
                                {
                                    string protectionStateInstance = ((string)protectionStateValue);
                                    propertiesInstance.ProtectionState = protectionStateInstance;
                                }
                                
                                JToken protectionStateDescriptionValue = propertiesValue["protectionStateDescription"];
                                if (protectionStateDescriptionValue != null && protectionStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string protectionStateDescriptionInstance = ((string)protectionStateDescriptionValue);
                                    propertiesInstance.ProtectionStateDescription = protectionStateDescriptionInstance;
                                }
                                
                                JToken activeLocationValue = propertiesValue["activeLocation"];
                                if (activeLocationValue != null && activeLocationValue.Type != JTokenType.Null)
                                {
                                    string activeLocationInstance = ((string)activeLocationValue);
                                    propertiesInstance.ActiveLocation = activeLocationInstance;
                                }
                                
                                JToken testFailoverStateValue = propertiesValue["testFailoverState"];
                                if (testFailoverStateValue != null && testFailoverStateValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateInstance = ((string)testFailoverStateValue);
                                    propertiesInstance.TestFailoverState = testFailoverStateInstance;
                                }
                                
                                JToken testFailoverStateDescriptionValue = propertiesValue["testFailoverStateDescription"];
                                if (testFailoverStateDescriptionValue != null && testFailoverStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateDescriptionInstance = ((string)testFailoverStateDescriptionValue);
                                    propertiesInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                    }
                                }
                                
                                JToken replicationHealthValue = propertiesValue["replicationHealth"];
                                if (replicationHealthValue != null && replicationHealthValue.Type != JTokenType.Null)
                                {
                                    string replicationHealthInstance = ((string)replicationHealthValue);
                                    propertiesInstance.ReplicationHealth = replicationHealthInstance;
                                }
                                
                                JToken replicationHealthErrorsArray = propertiesValue["replicationHealthErrors"];
                                if (replicationHealthErrorsArray != null && replicationHealthErrorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken replicationHealthErrorsValue in ((JArray)replicationHealthErrorsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.ReplicationHealthErrors.Add(healthErrorInstance);
                                        
                                        JToken errorLevelValue = replicationHealthErrorsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCodeValue = replicationHealthErrorsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = replicationHealthErrorsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = replicationHealthErrorsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = replicationHealthErrorsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = replicationHealthErrorsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            string creationTimeUtcInstance = ((string)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = replicationHealthErrorsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = replicationHealthErrorsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                    }
                                }
                                
                                JToken policyIdValue = propertiesValue["policyId"];
                                if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                {
                                    string policyIdInstance = ((string)policyIdValue);
                                    propertiesInstance.PolicyID = policyIdInstance;
                                }
                                
                                JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                    propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                }
                                
                                JToken lastSuccessfulFailoverTimeValue = propertiesValue["lastSuccessfulFailoverTime"];
                                if (lastSuccessfulFailoverTimeValue != null && lastSuccessfulFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSuccessfulFailoverTimeInstance = ((DateTime)lastSuccessfulFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulFailoverTime = lastSuccessfulFailoverTimeInstance;
                                }
                                
                                JToken lastSuccessfulTestFailoverTimeValue = propertiesValue["lastSuccessfulTestFailoverTime"];
                                if (lastSuccessfulTestFailoverTimeValue != null && lastSuccessfulTestFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSuccessfulTestFailoverTimeInstance = ((DateTime)lastSuccessfulTestFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulTestFailoverTime = lastSuccessfulTestFailoverTimeInstance;
                                }
                                
                                JToken currentScenarioValue = propertiesValue["currentScenario"];
                                if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                {
                                    CurrentScenarioDetails currentScenarioInstance = new CurrentScenarioDetails();
                                    propertiesInstance.CurrentScenario = currentScenarioInstance;
                                    
                                    JToken scenarioNameValue = currentScenarioValue["scenarioName"];
                                    if (scenarioNameValue != null && scenarioNameValue.Type != JTokenType.Null)
                                    {
                                        string scenarioNameInstance = ((string)scenarioNameValue);
                                        currentScenarioInstance.ScenarioName = scenarioNameInstance;
                                    }
                                    
                                    JToken jobIdValue = currentScenarioValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        currentScenarioInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken startTimeValue = currentScenarioValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        currentScenarioInstance.StartTime = startTimeInstance;
                                    }
                                }
                                
                                JToken failoverRecoveryPointIdValue = propertiesValue["failoverRecoveryPointId"];
                                if (failoverRecoveryPointIdValue != null && failoverRecoveryPointIdValue.Type != JTokenType.Null)
                                {
                                    string failoverRecoveryPointIdInstance = ((string)failoverRecoveryPointIdValue);
                                    propertiesInstance.FailoverRecoveryPointId = failoverRecoveryPointIdInstance;
                                }
                                
                                JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                    if (typeName == "HyperVReplica2012")
                                    {
                                        HyperVReplica2012ReplicationDetails hyperVReplica2012ReplicationDetailsInstance = new HyperVReplica2012ReplicationDetails();
                                        
                                        JToken lastReplicatedTimeValue = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue != null && lastReplicatedTimeValue.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance = ((string)lastReplicatedTimeValue);
                                            hyperVReplica2012ReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance;
                                        }
                                        
                                        JToken vmNicsArray = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray != null && vmNicsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue in ((JArray)vmNicsArray))
                                            {
                                                VMNicDetails vMNicDetailsInstance = new VMNicDetails();
                                                hyperVReplica2012ReplicationDetailsInstance.VmNics.Add(vMNicDetailsInstance);
                                                
                                                JToken nicIdValue = vmNicsValue["nicId"];
                                                if (nicIdValue != null && nicIdValue.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance = ((string)nicIdValue);
                                                    vMNicDetailsInstance.NicId = nicIdInstance;
                                                }
                                                
                                                JToken vMSubnetNameValue = vmNicsValue["vMSubnetName"];
                                                if (vMSubnetNameValue != null && vMSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance = ((string)vMSubnetNameValue);
                                                    vMNicDetailsInstance.VMSubnetName = vMSubnetNameInstance;
                                                }
                                                
                                                JToken vMNetworkNameValue = vmNicsValue["vMNetworkName"];
                                                if (vMNetworkNameValue != null && vMNetworkNameValue.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance = ((string)vMNetworkNameValue);
                                                    vMNicDetailsInstance.VMNetworkName = vMNetworkNameInstance;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue = vmNicsValue["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue != null && recoveryVMNetworkIdValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance = ((string)recoveryVMNetworkIdValue);
                                                    vMNicDetailsInstance.RecoveryVMNetworkId = recoveryVMNetworkIdInstance;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue = vmNicsValue["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue != null && recoveryVMSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance = ((string)recoveryVMSubnetNameValue);
                                                    vMNicDetailsInstance.RecoveryVMSubnetName = recoveryVMSubnetNameInstance;
                                                }
                                                
                                                JToken ipAddressTypeValue = vmNicsValue["ipAddressType"];
                                                if (ipAddressTypeValue != null && ipAddressTypeValue.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance = ((string)ipAddressTypeValue);
                                                    vMNicDetailsInstance.IpAddressType = ipAddressTypeInstance;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue = vmNicsValue["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue != null && replicaNicStaticIPAddressValue.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance = ((string)replicaNicStaticIPAddressValue);
                                                    vMNicDetailsInstance.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance;
                                                }
                                                
                                                JToken selectionTypeValue = vmNicsValue["selectionType"];
                                                if (selectionTypeValue != null && selectionTypeValue.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance = ((string)selectionTypeValue);
                                                    vMNicDetailsInstance.SelectionType = selectionTypeInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken initialReplicationDetailsValue = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue != null && initialReplicationDetailsValue.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance = new InitialReplicationDetails();
                                            hyperVReplica2012ReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance;
                                            
                                            JToken initialReplicationTypeValue = initialReplicationDetailsValue["initialReplicationType"];
                                            if (initialReplicationTypeValue != null && initialReplicationTypeValue.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance = ((string)initialReplicationTypeValue);
                                                initialReplicationDetailsInstance.InitialReplicationType = initialReplicationTypeInstance;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue = initialReplicationDetailsValue["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue != null && initialReplicationProgressPercentageValue.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance = ((string)initialReplicationProgressPercentageValue);
                                                initialReplicationDetailsInstance.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance;
                                            }
                                        }
                                        
                                        JToken vMDiskDetailsArray = providerSpecificDetailsValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray != null && vMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue in ((JArray)vMDiskDetailsArray))
                                            {
                                                DiskDetails diskDetailsInstance = new DiskDetails();
                                                hyperVReplica2012ReplicationDetailsInstance.VMDiskDetails.Add(diskDetailsInstance);
                                                
                                                JToken maxSizeMBValue = vMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue != null && maxSizeMBValue.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance = ((ulong)maxSizeMBValue);
                                                    diskDetailsInstance.MaxSizeMB = maxSizeMBInstance;
                                                }
                                                
                                                JToken vhdTypeValue = vMDiskDetailsValue["vhdType"];
                                                if (vhdTypeValue != null && vhdTypeValue.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance = ((string)vhdTypeValue);
                                                    diskDetailsInstance.VhdType = vhdTypeInstance;
                                                }
                                                
                                                JToken vhdIdValue = vMDiskDetailsValue["vhdId"];
                                                if (vhdIdValue != null && vhdIdValue.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance = ((string)vhdIdValue);
                                                    diskDetailsInstance.VhdId = vhdIdInstance;
                                                }
                                                
                                                JToken vhdNameValue = vMDiskDetailsValue["vhdName"];
                                                if (vhdNameValue != null && vhdNameValue.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance = ((string)vhdNameValue);
                                                    diskDetailsInstance.VhdName = vhdNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            hyperVReplica2012ReplicationDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplica2012ReplicationDetailsInstance;
                                    }
                                    if (typeName == "HyperVReplica2012R2")
                                    {
                                        HyperVReplica2012R2ReplicationDetails hyperVReplica2012R2ReplicationDetailsInstance = new HyperVReplica2012R2ReplicationDetails();
                                        
                                        JToken lastReplicatedTimeValue2 = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue2 != null && lastReplicatedTimeValue2.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance2 = ((string)lastReplicatedTimeValue2);
                                            hyperVReplica2012R2ReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance2;
                                        }
                                        
                                        JToken vmNicsArray2 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray2 != null && vmNicsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue2 in ((JArray)vmNicsArray2))
                                            {
                                                VMNicDetails vMNicDetailsInstance2 = new VMNicDetails();
                                                hyperVReplica2012R2ReplicationDetailsInstance.VmNics.Add(vMNicDetailsInstance2);
                                                
                                                JToken nicIdValue2 = vmNicsValue2["nicId"];
                                                if (nicIdValue2 != null && nicIdValue2.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance2 = ((string)nicIdValue2);
                                                    vMNicDetailsInstance2.NicId = nicIdInstance2;
                                                }
                                                
                                                JToken vMSubnetNameValue2 = vmNicsValue2["vMSubnetName"];
                                                if (vMSubnetNameValue2 != null && vMSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance2 = ((string)vMSubnetNameValue2);
                                                    vMNicDetailsInstance2.VMSubnetName = vMSubnetNameInstance2;
                                                }
                                                
                                                JToken vMNetworkNameValue2 = vmNicsValue2["vMNetworkName"];
                                                if (vMNetworkNameValue2 != null && vMNetworkNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance2 = ((string)vMNetworkNameValue2);
                                                    vMNicDetailsInstance2.VMNetworkName = vMNetworkNameInstance2;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue2 = vmNicsValue2["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue2 != null && recoveryVMNetworkIdValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance2 = ((string)recoveryVMNetworkIdValue2);
                                                    vMNicDetailsInstance2.RecoveryVMNetworkId = recoveryVMNetworkIdInstance2;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue2 = vmNicsValue2["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue2 != null && recoveryVMSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance2 = ((string)recoveryVMSubnetNameValue2);
                                                    vMNicDetailsInstance2.RecoveryVMSubnetName = recoveryVMSubnetNameInstance2;
                                                }
                                                
                                                JToken ipAddressTypeValue2 = vmNicsValue2["ipAddressType"];
                                                if (ipAddressTypeValue2 != null && ipAddressTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance2 = ((string)ipAddressTypeValue2);
                                                    vMNicDetailsInstance2.IpAddressType = ipAddressTypeInstance2;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue2 = vmNicsValue2["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue2 != null && replicaNicStaticIPAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance2 = ((string)replicaNicStaticIPAddressValue2);
                                                    vMNicDetailsInstance2.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance2;
                                                }
                                                
                                                JToken selectionTypeValue2 = vmNicsValue2["selectionType"];
                                                if (selectionTypeValue2 != null && selectionTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance2 = ((string)selectionTypeValue2);
                                                    vMNicDetailsInstance2.SelectionType = selectionTypeInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken initialReplicationDetailsValue2 = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue2 != null && initialReplicationDetailsValue2.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance2 = new InitialReplicationDetails();
                                            hyperVReplica2012R2ReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance2;
                                            
                                            JToken initialReplicationTypeValue2 = initialReplicationDetailsValue2["initialReplicationType"];
                                            if (initialReplicationTypeValue2 != null && initialReplicationTypeValue2.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance2 = ((string)initialReplicationTypeValue2);
                                                initialReplicationDetailsInstance2.InitialReplicationType = initialReplicationTypeInstance2;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue2 = initialReplicationDetailsValue2["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue2 != null && initialReplicationProgressPercentageValue2.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance2 = ((string)initialReplicationProgressPercentageValue2);
                                                initialReplicationDetailsInstance2.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance2;
                                            }
                                        }
                                        
                                        JToken vMDiskDetailsArray2 = providerSpecificDetailsValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray2 != null && vMDiskDetailsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue2 in ((JArray)vMDiskDetailsArray2))
                                            {
                                                DiskDetails diskDetailsInstance2 = new DiskDetails();
                                                hyperVReplica2012R2ReplicationDetailsInstance.VMDiskDetails.Add(diskDetailsInstance2);
                                                
                                                JToken maxSizeMBValue2 = vMDiskDetailsValue2["maxSizeMB"];
                                                if (maxSizeMBValue2 != null && maxSizeMBValue2.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance2 = ((ulong)maxSizeMBValue2);
                                                    diskDetailsInstance2.MaxSizeMB = maxSizeMBInstance2;
                                                }
                                                
                                                JToken vhdTypeValue2 = vMDiskDetailsValue2["vhdType"];
                                                if (vhdTypeValue2 != null && vhdTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance2 = ((string)vhdTypeValue2);
                                                    diskDetailsInstance2.VhdType = vhdTypeInstance2;
                                                }
                                                
                                                JToken vhdIdValue2 = vMDiskDetailsValue2["vhdId"];
                                                if (vhdIdValue2 != null && vhdIdValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance2 = ((string)vhdIdValue2);
                                                    diskDetailsInstance2.VhdId = vhdIdInstance2;
                                                }
                                                
                                                JToken vhdNameValue2 = vMDiskDetailsValue2["vhdName"];
                                                if (vhdNameValue2 != null && vhdNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance2 = ((string)vhdNameValue2);
                                                    diskDetailsInstance2.VhdName = vhdNameInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue2 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                            hyperVReplica2012R2ReplicationDetailsInstance.InstanceType = instanceTypeInstance2;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplica2012R2ReplicationDetailsInstance;
                                    }
                                    if (typeName == "VMwareAzureV2")
                                    {
                                        VMwareAzureV2ProviderSpecificSettings vMwareAzureV2ProviderSpecificSettingsInstance = new VMwareAzureV2ProviderSpecificSettings();
                                        
                                        JToken infrastructureVmIdValue = providerSpecificDetailsValue["infrastructureVmId"];
                                        if (infrastructureVmIdValue != null && infrastructureVmIdValue.Type != JTokenType.Null)
                                        {
                                            string infrastructureVmIdInstance = ((string)infrastructureVmIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.InfrastructureVmId = infrastructureVmIdInstance;
                                        }
                                        
                                        JToken vCenterInfrastructureIdValue = providerSpecificDetailsValue["vCenterInfrastructureId"];
                                        if (vCenterInfrastructureIdValue != null && vCenterInfrastructureIdValue.Type != JTokenType.Null)
                                        {
                                            string vCenterInfrastructureIdInstance = ((string)vCenterInfrastructureIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VCenterInfrastructureId = vCenterInfrastructureIdInstance;
                                        }
                                        
                                        JToken protectionStageValue = providerSpecificDetailsValue["protectionStage"];
                                        if (protectionStageValue != null && protectionStageValue.Type != JTokenType.Null)
                                        {
                                            string protectionStageInstance = ((string)protectionStageValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ProtectionStage = protectionStageInstance;
                                        }
                                        
                                        JToken healthErrorCodeValue = providerSpecificDetailsValue["healthErrorCode"];
                                        if (healthErrorCodeValue != null && healthErrorCodeValue.Type != JTokenType.Null)
                                        {
                                            string healthErrorCodeInstance = ((string)healthErrorCodeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.HealthErrorCode = healthErrorCodeInstance;
                                        }
                                        
                                        JToken resyncRequiredValue = providerSpecificDetailsValue["resyncRequired"];
                                        if (resyncRequiredValue != null && resyncRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool resyncRequiredInstance = ((bool)resyncRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ResyncRequired = resyncRequiredInstance;
                                        }
                                        
                                        JToken resyncProgressPercentageValue = providerSpecificDetailsValue["resyncProgressPercentage"];
                                        if (resyncProgressPercentageValue != null && resyncProgressPercentageValue.Type != JTokenType.Null)
                                        {
                                            int resyncProgressPercentageInstance = ((int)resyncProgressPercentageValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ResyncProgressPercentage = resyncProgressPercentageInstance;
                                        }
                                        
                                        JToken rpoInSecondsValue = providerSpecificDetailsValue["rpoInSeconds"];
                                        if (rpoInSecondsValue != null && rpoInSecondsValue.Type != JTokenType.Null)
                                        {
                                            long rpoInSecondsInstance = ((long)rpoInSecondsValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RpoInSeconds = rpoInSecondsInstance;
                                        }
                                        
                                        JToken compressedDataRateInMBValue = providerSpecificDetailsValue["compressedDataRateInMB"];
                                        if (compressedDataRateInMBValue != null && compressedDataRateInMBValue.Type != JTokenType.Null)
                                        {
                                            double compressedDataRateInMBInstance = ((double)compressedDataRateInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.CompressedDataRateInMB = compressedDataRateInMBInstance;
                                        }
                                        
                                        JToken uncompressedDataRateInMBValue = providerSpecificDetailsValue["uncompressedDataRateInMB"];
                                        if (uncompressedDataRateInMBValue != null && uncompressedDataRateInMBValue.Type != JTokenType.Null)
                                        {
                                            double uncompressedDataRateInMBInstance = ((double)uncompressedDataRateInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.UncompressedDataRateInMB = uncompressedDataRateInMBInstance;
                                        }
                                        
                                        JToken ipAddressValue = providerSpecificDetailsValue["ipAddress"];
                                        if (ipAddressValue != null && ipAddressValue.Type != JTokenType.Null)
                                        {
                                            string ipAddressInstance = ((string)ipAddressValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IpAddress = ipAddressInstance;
                                        }
                                        
                                        JToken agentVersionValue = providerSpecificDetailsValue["agentVersion"];
                                        if (agentVersionValue != null && agentVersionValue.Type != JTokenType.Null)
                                        {
                                            string agentVersionInstance = ((string)agentVersionValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.AgentVersion = agentVersionInstance;
                                        }
                                        
                                        JToken latestUpdateVersionValue = providerSpecificDetailsValue["latestUpdateVersion"];
                                        if (latestUpdateVersionValue != null && latestUpdateVersionValue.Type != JTokenType.Null)
                                        {
                                            string latestUpdateVersionInstance = ((string)latestUpdateVersionValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.LatestUpdateVersion = latestUpdateVersionInstance;
                                        }
                                        
                                        JToken isAgentUpdateRequiredValue = providerSpecificDetailsValue["isAgentUpdateRequired"];
                                        if (isAgentUpdateRequiredValue != null && isAgentUpdateRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool isAgentUpdateRequiredInstance = ((bool)isAgentUpdateRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IsAgentUpdateRequired = isAgentUpdateRequiredInstance;
                                        }
                                        
                                        JToken isRebootAfterUpdateRequiredValue = providerSpecificDetailsValue["isRebootAfterUpdateRequired"];
                                        if (isRebootAfterUpdateRequiredValue != null && isRebootAfterUpdateRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool isRebootAfterUpdateRequiredInstance = ((bool)isRebootAfterUpdateRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IsRebootAfterUpdateRequired = isRebootAfterUpdateRequiredInstance;
                                        }
                                        
                                        JToken lastHeartbeatValue = providerSpecificDetailsValue["lastHeartbeat"];
                                        if (lastHeartbeatValue != null && lastHeartbeatValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastHeartbeatInstance = ((DateTime)lastHeartbeatValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.LastHeartbeat = lastHeartbeatInstance;
                                        }
                                        
                                        JToken processServerIdValue = providerSpecificDetailsValue["processServerId"];
                                        if (processServerIdValue != null && processServerIdValue.Type != JTokenType.Null)
                                        {
                                            string processServerIdInstance = ((string)processServerIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ProcessServerId = processServerIdInstance;
                                        }
                                        
                                        JToken multiVmGroupIdValue = providerSpecificDetailsValue["multiVmGroupId"];
                                        if (multiVmGroupIdValue != null && multiVmGroupIdValue.Type != JTokenType.Null)
                                        {
                                            string multiVmGroupIdInstance = ((string)multiVmGroupIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MultiVmGroupId = multiVmGroupIdInstance;
                                        }
                                        
                                        JToken multiVmGroupNameValue = providerSpecificDetailsValue["multiVmGroupName"];
                                        if (multiVmGroupNameValue != null && multiVmGroupNameValue.Type != JTokenType.Null)
                                        {
                                            string multiVmGroupNameInstance = ((string)multiVmGroupNameValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MultiVmGroupName = multiVmGroupNameInstance;
                                        }
                                        
                                        JToken protectedVolumesArray = providerSpecificDetailsValue["protectedVolumes"];
                                        if (protectedVolumesArray != null && protectedVolumesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken protectedVolumesValue in ((JArray)protectedVolumesArray))
                                            {
                                                VMwareAzureV2ProtectedVolumeDetails vMwareAzureV2ProtectedVolumeDetailsInstance = new VMwareAzureV2ProtectedVolumeDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.ProtectedVolumes.Add(vMwareAzureV2ProtectedVolumeDetailsInstance);
                                                
                                                JToken nameValue = protectedVolumesValue["name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.Name = nameInstance;
                                                }
                                                
                                                JToken protectionStageValue2 = protectedVolumesValue["protectionStage"];
                                                if (protectionStageValue2 != null && protectionStageValue2.Type != JTokenType.Null)
                                                {
                                                    string protectionStageInstance2 = ((string)protectionStageValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ProtectionStage = protectionStageInstance2;
                                                }
                                                
                                                JToken healthErrorCodeValue2 = protectedVolumesValue["healthErrorCode"];
                                                if (healthErrorCodeValue2 != null && healthErrorCodeValue2.Type != JTokenType.Null)
                                                {
                                                    string healthErrorCodeInstance2 = ((string)healthErrorCodeValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.HealthErrorCode = healthErrorCodeInstance2;
                                                }
                                                
                                                JToken rpoInSecondsValue2 = protectedVolumesValue["rpoInSeconds"];
                                                if (rpoInSecondsValue2 != null && rpoInSecondsValue2.Type != JTokenType.Null)
                                                {
                                                    long rpoInSecondsInstance2 = ((long)rpoInSecondsValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.RpoInSeconds = rpoInSecondsInstance2;
                                                }
                                                
                                                JToken resyncRequiredValue2 = protectedVolumesValue["resyncRequired"];
                                                if (resyncRequiredValue2 != null && resyncRequiredValue2.Type != JTokenType.Null)
                                                {
                                                    bool resyncRequiredInstance2 = ((bool)resyncRequiredValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncRequired = resyncRequiredInstance2;
                                                }
                                                
                                                JToken resyncProgressPercentageValue2 = protectedVolumesValue["resyncProgressPercentage"];
                                                if (resyncProgressPercentageValue2 != null && resyncProgressPercentageValue2.Type != JTokenType.Null)
                                                {
                                                    int resyncProgressPercentageInstance2 = ((int)resyncProgressPercentageValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncProgressPercentage = resyncProgressPercentageInstance2;
                                                }
                                                
                                                JToken resyncDurationInSecondsValue = protectedVolumesValue["resyncDurationInSeconds"];
                                                if (resyncDurationInSecondsValue != null && resyncDurationInSecondsValue.Type != JTokenType.Null)
                                                {
                                                    long resyncDurationInSecondsInstance = ((long)resyncDurationInSecondsValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncDurationInSeconds = resyncDurationInSecondsInstance;
                                                }
                                                
                                                JToken volumeCapacityInBytesValue = protectedVolumesValue["volumeCapacityInBytes"];
                                                if (volumeCapacityInBytesValue != null && volumeCapacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long volumeCapacityInBytesInstance = ((long)volumeCapacityInBytesValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.VolumeCapacityInBytes = volumeCapacityInBytesInstance;
                                                }
                                                
                                                JToken fileSystemCapacityInBytesValue = protectedVolumesValue["fileSystemCapacityInBytes"];
                                                if (fileSystemCapacityInBytesValue != null && fileSystemCapacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long fileSystemCapacityInBytesInstance = ((long)fileSystemCapacityInBytesValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.FileSystemCapacityInBytes = fileSystemCapacityInBytesInstance;
                                                }
                                                
                                                JToken sourceDataInMBValue = protectedVolumesValue["sourceDataInMB"];
                                                if (sourceDataInMBValue != null && sourceDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double sourceDataInMBInstance = ((double)sourceDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.SourceDataInMB = sourceDataInMBInstance;
                                                }
                                                
                                                JToken psDataInMBValue = protectedVolumesValue["psDataInMB"];
                                                if (psDataInMBValue != null && psDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double psDataInMBInstance = ((double)psDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.PSDataInMB = psDataInMBInstance;
                                                }
                                                
                                                JToken targetDataInMBValue = protectedVolumesValue["targetDataInMB"];
                                                if (targetDataInMBValue != null && targetDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double targetDataInMBInstance = ((double)targetDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.TargetDataInMB = targetDataInMBInstance;
                                                }
                                                
                                                JToken volumeResizedValue = protectedVolumesValue["volumeResized"];
                                                if (volumeResizedValue != null && volumeResizedValue.Type != JTokenType.Null)
                                                {
                                                    bool volumeResizedInstance = ((bool)volumeResizedValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.VolumeResized = volumeResizedInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken volumeResizedValue2 = providerSpecificDetailsValue["volumeResized"];
                                        if (volumeResizedValue2 != null && volumeResizedValue2.Type != JTokenType.Null)
                                        {
                                            bool volumeResizedInstance2 = ((bool)volumeResizedValue2);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VolumeResized = volumeResizedInstance2;
                                        }
                                        
                                        JToken masterTargetIdValue = providerSpecificDetailsValue["masterTargetId"];
                                        if (masterTargetIdValue != null && masterTargetIdValue.Type != JTokenType.Null)
                                        {
                                            string masterTargetIdInstance = ((string)masterTargetIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MasterTargetId = masterTargetIdInstance;
                                        }
                                        
                                        JToken sourceVmCPUCountValue = providerSpecificDetailsValue["sourceVmCPUCount"];
                                        if (sourceVmCPUCountValue != null && sourceVmCPUCountValue.Type != JTokenType.Null)
                                        {
                                            int sourceVmCPUCountInstance = ((int)sourceVmCPUCountValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SourceVmCPUCount = sourceVmCPUCountInstance;
                                        }
                                        
                                        JToken sourceVmRAMSizeInMBValue = providerSpecificDetailsValue["sourceVmRAMSizeInMB"];
                                        if (sourceVmRAMSizeInMBValue != null && sourceVmRAMSizeInMBValue.Type != JTokenType.Null)
                                        {
                                            int sourceVmRAMSizeInMBInstance = ((int)sourceVmRAMSizeInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SourceVmRAMSizeInMB = sourceVmRAMSizeInMBInstance;
                                        }
                                        
                                        JToken osTypeValue = providerSpecificDetailsValue["osType"];
                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance = ((string)osTypeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.OSType = osTypeInstance;
                                        }
                                        
                                        JToken vhdNameValue3 = providerSpecificDetailsValue["vhdName"];
                                        if (vhdNameValue3 != null && vhdNameValue3.Type != JTokenType.Null)
                                        {
                                            string vhdNameInstance3 = ((string)vhdNameValue3);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VHDName = vhdNameInstance3;
                                        }
                                        
                                        JToken osDiskIdValue = providerSpecificDetailsValue["osDiskId"];
                                        if (osDiskIdValue != null && osDiskIdValue.Type != JTokenType.Null)
                                        {
                                            string osDiskIdInstance = ((string)osDiskIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.OSDiskId = osDiskIdInstance;
                                        }
                                        
                                        JToken azureVMDiskDetailsArray = providerSpecificDetailsValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsArray != null && azureVMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken azureVMDiskDetailsValue in ((JArray)azureVMDiskDetailsArray))
                                            {
                                                AzureVmDiskDetails azureVmDiskDetailsInstance = new AzureVmDiskDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.AzureVMDiskDetails.Add(azureVmDiskDetailsInstance);
                                                
                                                JToken vhdTypeValue3 = azureVMDiskDetailsValue["vhdType"];
                                                if (vhdTypeValue3 != null && vhdTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance3 = ((string)vhdTypeValue3);
                                                    azureVmDiskDetailsInstance.VhdType = vhdTypeInstance3;
                                                }
                                                
                                                JToken vhdIdValue3 = azureVMDiskDetailsValue["vhdId"];
                                                if (vhdIdValue3 != null && vhdIdValue3.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance3 = ((string)vhdIdValue3);
                                                    azureVmDiskDetailsInstance.VhdId = vhdIdInstance3;
                                                }
                                                
                                                JToken vhdNameValue4 = azureVMDiskDetailsValue["vhdName"];
                                                if (vhdNameValue4 != null && vhdNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance4 = ((string)vhdNameValue4);
                                                    azureVmDiskDetailsInstance.VhdName = vhdNameInstance4;
                                                }
                                                
                                                JToken maxSizeMBValue3 = azureVMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue3 != null && maxSizeMBValue3.Type != JTokenType.Null)
                                                {
                                                    string maxSizeMBInstance3 = ((string)maxSizeMBValue3);
                                                    azureVmDiskDetailsInstance.MaxSizeMB = maxSizeMBInstance3;
                                                }
                                                
                                                JToken targetDiskLocationValue = azureVMDiskDetailsValue["targetDiskLocation"];
                                                if (targetDiskLocationValue != null && targetDiskLocationValue.Type != JTokenType.Null)
                                                {
                                                    string targetDiskLocationInstance = ((string)targetDiskLocationValue);
                                                    azureVmDiskDetailsInstance.TargetDiskLocation = targetDiskLocationInstance;
                                                }
                                                
                                                JToken lunIdValue = azureVMDiskDetailsValue["lunId"];
                                                if (lunIdValue != null && lunIdValue.Type != JTokenType.Null)
                                                {
                                                    string lunIdInstance = ((string)lunIdValue);
                                                    azureVmDiskDetailsInstance.LunId = lunIdInstance;
                                                }
                                                
                                                JToken targetDiskNameValue = azureVMDiskDetailsValue["targetDiskName"];
                                                if (targetDiskNameValue != null && targetDiskNameValue.Type != JTokenType.Null)
                                                {
                                                    string targetDiskNameInstance = ((string)targetDiskNameValue);
                                                    azureVmDiskDetailsInstance.TargetDiskName = targetDiskNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue = providerSpecificDetailsValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue != null && recoveryAzureVMNameValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance = ((string)recoveryAzureVMNameValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue = providerSpecificDetailsValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue != null && recoveryAzureVMSizeValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance = ((string)recoveryAzureVMSizeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance;
                                        }
                                        
                                        JToken recoveryAzureStorageAccountValue = providerSpecificDetailsValue["recoveryAzureStorageAccount"];
                                        if (recoveryAzureStorageAccountValue != null && recoveryAzureStorageAccountValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureStorageAccountInstance = ((string)recoveryAzureStorageAccountValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureStorageAccount = recoveryAzureStorageAccountInstance;
                                        }
                                        
                                        JToken vmNicsArray3 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray3 != null && vmNicsArray3.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue3 in ((JArray)vmNicsArray3))
                                            {
                                                VMNicDetails vMNicDetailsInstance3 = new VMNicDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.VMNics.Add(vMNicDetailsInstance3);
                                                
                                                JToken nicIdValue3 = vmNicsValue3["nicId"];
                                                if (nicIdValue3 != null && nicIdValue3.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance3 = ((string)nicIdValue3);
                                                    vMNicDetailsInstance3.NicId = nicIdInstance3;
                                                }
                                                
                                                JToken vMSubnetNameValue3 = vmNicsValue3["vMSubnetName"];
                                                if (vMSubnetNameValue3 != null && vMSubnetNameValue3.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance3 = ((string)vMSubnetNameValue3);
                                                    vMNicDetailsInstance3.VMSubnetName = vMSubnetNameInstance3;
                                                }
                                                
                                                JToken vMNetworkNameValue3 = vmNicsValue3["vMNetworkName"];
                                                if (vMNetworkNameValue3 != null && vMNetworkNameValue3.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance3 = ((string)vMNetworkNameValue3);
                                                    vMNicDetailsInstance3.VMNetworkName = vMNetworkNameInstance3;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue3 = vmNicsValue3["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue3 != null && recoveryVMNetworkIdValue3.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance3 = ((string)recoveryVMNetworkIdValue3);
                                                    vMNicDetailsInstance3.RecoveryVMNetworkId = recoveryVMNetworkIdInstance3;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue3 = vmNicsValue3["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue3 != null && recoveryVMSubnetNameValue3.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance3 = ((string)recoveryVMSubnetNameValue3);
                                                    vMNicDetailsInstance3.RecoveryVMSubnetName = recoveryVMSubnetNameInstance3;
                                                }
                                                
                                                JToken ipAddressTypeValue3 = vmNicsValue3["ipAddressType"];
                                                if (ipAddressTypeValue3 != null && ipAddressTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance3 = ((string)ipAddressTypeValue3);
                                                    vMNicDetailsInstance3.IpAddressType = ipAddressTypeInstance3;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue3 = vmNicsValue3["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue3 != null && replicaNicStaticIPAddressValue3.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance3 = ((string)replicaNicStaticIPAddressValue3);
                                                    vMNicDetailsInstance3.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance3;
                                                }
                                                
                                                JToken selectionTypeValue3 = vmNicsValue3["selectionType"];
                                                if (selectionTypeValue3 != null && selectionTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance3 = ((string)selectionTypeValue3);
                                                    vMNicDetailsInstance3.SelectionType = selectionTypeInstance3;
                                                }
                                            }
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue = providerSpecificDetailsValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue != null && selectedRecoveryAzureNetworkIdValue.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance = ((string)selectedRecoveryAzureNetworkIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance;
                                        }
                                        
                                        JToken discoveryTypeValue = providerSpecificDetailsValue["discoveryType"];
                                        if (discoveryTypeValue != null && discoveryTypeValue.Type != JTokenType.Null)
                                        {
                                            string discoveryTypeInstance = ((string)discoveryTypeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.DiscoveryType = discoveryTypeInstance;
                                        }
                                        
                                        JToken instanceTypeValue3 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.InstanceType = instanceTypeInstance3;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = vMwareAzureV2ProviderSpecificSettingsInstance;
                                    }
                                    if (typeName == "HyperVReplicaAzure")
                                    {
                                        HyperVReplicaAzureReplicationDetails hyperVReplicaAzureReplicationDetailsInstance = new HyperVReplicaAzureReplicationDetails();
                                        
                                        JToken azureVMDiskDetailsArray2 = providerSpecificDetailsValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsArray2 != null && azureVMDiskDetailsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken azureVMDiskDetailsValue2 in ((JArray)azureVMDiskDetailsArray2))
                                            {
                                                AzureVmDiskDetails azureVmDiskDetailsInstance2 = new AzureVmDiskDetails();
                                                hyperVReplicaAzureReplicationDetailsInstance.AzureVMDiskDetails.Add(azureVmDiskDetailsInstance2);
                                                
                                                JToken vhdTypeValue4 = azureVMDiskDetailsValue2["vhdType"];
                                                if (vhdTypeValue4 != null && vhdTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance4 = ((string)vhdTypeValue4);
                                                    azureVmDiskDetailsInstance2.VhdType = vhdTypeInstance4;
                                                }
                                                
                                                JToken vhdIdValue4 = azureVMDiskDetailsValue2["vhdId"];
                                                if (vhdIdValue4 != null && vhdIdValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance4 = ((string)vhdIdValue4);
                                                    azureVmDiskDetailsInstance2.VhdId = vhdIdInstance4;
                                                }
                                                
                                                JToken vhdNameValue5 = azureVMDiskDetailsValue2["vhdName"];
                                                if (vhdNameValue5 != null && vhdNameValue5.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance5 = ((string)vhdNameValue5);
                                                    azureVmDiskDetailsInstance2.VhdName = vhdNameInstance5;
                                                }
                                                
                                                JToken maxSizeMBValue4 = azureVMDiskDetailsValue2["maxSizeMB"];
                                                if (maxSizeMBValue4 != null && maxSizeMBValue4.Type != JTokenType.Null)
                                                {
                                                    string maxSizeMBInstance4 = ((string)maxSizeMBValue4);
                                                    azureVmDiskDetailsInstance2.MaxSizeMB = maxSizeMBInstance4;
                                                }
                                                
                                                JToken targetDiskLocationValue2 = azureVMDiskDetailsValue2["targetDiskLocation"];
                                                if (targetDiskLocationValue2 != null && targetDiskLocationValue2.Type != JTokenType.Null)
                                                {
                                                    string targetDiskLocationInstance2 = ((string)targetDiskLocationValue2);
                                                    azureVmDiskDetailsInstance2.TargetDiskLocation = targetDiskLocationInstance2;
                                                }
                                                
                                                JToken lunIdValue2 = azureVMDiskDetailsValue2["lunId"];
                                                if (lunIdValue2 != null && lunIdValue2.Type != JTokenType.Null)
                                                {
                                                    string lunIdInstance2 = ((string)lunIdValue2);
                                                    azureVmDiskDetailsInstance2.LunId = lunIdInstance2;
                                                }
                                                
                                                JToken targetDiskNameValue2 = azureVMDiskDetailsValue2["targetDiskName"];
                                                if (targetDiskNameValue2 != null && targetDiskNameValue2.Type != JTokenType.Null)
                                                {
                                                    string targetDiskNameInstance2 = ((string)targetDiskNameValue2);
                                                    azureVmDiskDetailsInstance2.TargetDiskName = targetDiskNameInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue2 = providerSpecificDetailsValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue2 != null && recoveryAzureVMNameValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance2 = ((string)recoveryAzureVMNameValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance2;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue2 = providerSpecificDetailsValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue2 != null && recoveryAzureVMSizeValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance2 = ((string)recoveryAzureVMSizeValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance2;
                                        }
                                        
                                        JToken recoveryAzureStorageAccountValue2 = providerSpecificDetailsValue["recoveryAzureStorageAccount"];
                                        if (recoveryAzureStorageAccountValue2 != null && recoveryAzureStorageAccountValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureStorageAccountInstance2 = ((string)recoveryAzureStorageAccountValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureStorageAccount = recoveryAzureStorageAccountInstance2;
                                        }
                                        
                                        JToken lastReplicatedTimeValue3 = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue3 != null && lastReplicatedTimeValue3.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance3 = ((string)lastReplicatedTimeValue3);
                                            hyperVReplicaAzureReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance3;
                                        }
                                        
                                        JToken initialReplicationDetailsValue3 = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue3 != null && initialReplicationDetailsValue3.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance3 = new InitialReplicationDetails();
                                            hyperVReplicaAzureReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance3;
                                            
                                            JToken initialReplicationTypeValue3 = initialReplicationDetailsValue3["initialReplicationType"];
                                            if (initialReplicationTypeValue3 != null && initialReplicationTypeValue3.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance3 = ((string)initialReplicationTypeValue3);
                                                initialReplicationDetailsInstance3.InitialReplicationType = initialReplicationTypeInstance3;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue3 = initialReplicationDetailsValue3["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue3 != null && initialReplicationProgressPercentageValue3.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance3 = ((string)initialReplicationProgressPercentageValue3);
                                                initialReplicationDetailsInstance3.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance3;
                                            }
                                        }
                                        
                                        JToken vmNicsArray4 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray4 != null && vmNicsArray4.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue4 in ((JArray)vmNicsArray4))
                                            {
                                                VMNicDetails vMNicDetailsInstance4 = new VMNicDetails();
                                                hyperVReplicaAzureReplicationDetailsInstance.VMNics.Add(vMNicDetailsInstance4);
                                                
                                                JToken nicIdValue4 = vmNicsValue4["nicId"];
                                                if (nicIdValue4 != null && nicIdValue4.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance4 = ((string)nicIdValue4);
                                                    vMNicDetailsInstance4.NicId = nicIdInstance4;
                                                }
                                                
                                                JToken vMSubnetNameValue4 = vmNicsValue4["vMSubnetName"];
                                                if (vMSubnetNameValue4 != null && vMSubnetNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance4 = ((string)vMSubnetNameValue4);
                                                    vMNicDetailsInstance4.VMSubnetName = vMSubnetNameInstance4;
                                                }
                                                
                                                JToken vMNetworkNameValue4 = vmNicsValue4["vMNetworkName"];
                                                if (vMNetworkNameValue4 != null && vMNetworkNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance4 = ((string)vMNetworkNameValue4);
                                                    vMNicDetailsInstance4.VMNetworkName = vMNetworkNameInstance4;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue4 = vmNicsValue4["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue4 != null && recoveryVMNetworkIdValue4.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance4 = ((string)recoveryVMNetworkIdValue4);
                                                    vMNicDetailsInstance4.RecoveryVMNetworkId = recoveryVMNetworkIdInstance4;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue4 = vmNicsValue4["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue4 != null && recoveryVMSubnetNameValue4.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance4 = ((string)recoveryVMSubnetNameValue4);
                                                    vMNicDetailsInstance4.RecoveryVMSubnetName = recoveryVMSubnetNameInstance4;
                                                }
                                                
                                                JToken ipAddressTypeValue4 = vmNicsValue4["ipAddressType"];
                                                if (ipAddressTypeValue4 != null && ipAddressTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance4 = ((string)ipAddressTypeValue4);
                                                    vMNicDetailsInstance4.IpAddressType = ipAddressTypeInstance4;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue4 = vmNicsValue4["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue4 != null && replicaNicStaticIPAddressValue4.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance4 = ((string)replicaNicStaticIPAddressValue4);
                                                    vMNicDetailsInstance4.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance4;
                                                }
                                                
                                                JToken selectionTypeValue4 = vmNicsValue4["selectionType"];
                                                if (selectionTypeValue4 != null && selectionTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance4 = ((string)selectionTypeValue4);
                                                    vMNicDetailsInstance4.SelectionType = selectionTypeInstance4;
                                                }
                                            }
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue2 = providerSpecificDetailsValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue2 != null && selectedRecoveryAzureNetworkIdValue2.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance2 = ((string)selectedRecoveryAzureNetworkIdValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance2;
                                        }
                                        
                                        JToken encryptionValue = providerSpecificDetailsValue["encryption"];
                                        if (encryptionValue != null && encryptionValue.Type != JTokenType.Null)
                                        {
                                            string encryptionInstance = ((string)encryptionValue);
                                            hyperVReplicaAzureReplicationDetailsInstance.Encryption = encryptionInstance;
                                        }
                                        
                                        JToken oSDetailsValue = providerSpecificDetailsValue["oSDetails"];
                                        if (oSDetailsValue != null && oSDetailsValue.Type != JTokenType.Null)
                                        {
                                            OSDetails oSDetailsInstance = new OSDetails();
                                            hyperVReplicaAzureReplicationDetailsInstance.OSDetails = oSDetailsInstance;
                                            
                                            JToken osTypeValue2 = oSDetailsValue["osType"];
                                            if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                            {
                                                string osTypeInstance2 = ((string)osTypeValue2);
                                                oSDetailsInstance.OsType = osTypeInstance2;
                                            }
                                            
                                            JToken productTypeValue = oSDetailsValue["productType"];
                                            if (productTypeValue != null && productTypeValue.Type != JTokenType.Null)
                                            {
                                                string productTypeInstance = ((string)productTypeValue);
                                                oSDetailsInstance.ProductType = productTypeInstance;
                                            }
                                            
                                            JToken osEditionValue = oSDetailsValue["osEdition"];
                                            if (osEditionValue != null && osEditionValue.Type != JTokenType.Null)
                                            {
                                                string osEditionInstance = ((string)osEditionValue);
                                                oSDetailsInstance.OSEdition = osEditionInstance;
                                            }
                                            
                                            JToken oSVersionValue = oSDetailsValue["oSVersion"];
                                            if (oSVersionValue != null && oSVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSVersionInstance = ((string)oSVersionValue);
                                                oSDetailsInstance.OSVersion = oSVersionInstance;
                                            }
                                            
                                            JToken oSMajorVersionValue = oSDetailsValue["oSMajorVersion"];
                                            if (oSMajorVersionValue != null && oSMajorVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSMajorVersionInstance = ((string)oSMajorVersionValue);
                                                oSDetailsInstance.OSMajorVersion = oSMajorVersionInstance;
                                            }
                                            
                                            JToken oSMinorVersionValue = oSDetailsValue["oSMinorVersion"];
                                            if (oSMinorVersionValue != null && oSMinorVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSMinorVersionInstance = ((string)oSMinorVersionValue);
                                                oSDetailsInstance.OSMinorVersion = oSMinorVersionInstance;
                                            }
                                        }
                                        
                                        JToken sourceVmRAMSizeInMBValue2 = providerSpecificDetailsValue["sourceVmRAMSizeInMB"];
                                        if (sourceVmRAMSizeInMBValue2 != null && sourceVmRAMSizeInMBValue2.Type != JTokenType.Null)
                                        {
                                            int sourceVmRAMSizeInMBInstance2 = ((int)sourceVmRAMSizeInMBValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SourceVmRAMSizeInMB = sourceVmRAMSizeInMBInstance2;
                                        }
                                        
                                        JToken sourceVmCPUCountValue2 = providerSpecificDetailsValue["sourceVmCPUCount"];
                                        if (sourceVmCPUCountValue2 != null && sourceVmCPUCountValue2.Type != JTokenType.Null)
                                        {
                                            int sourceVmCPUCountInstance2 = ((int)sourceVmCPUCountValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SourceVmCPUCount = sourceVmCPUCountInstance2;
                                        }
                                        
                                        JToken instanceTypeValue4 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue4 != null && instanceTypeValue4.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance4 = ((string)instanceTypeValue4);
                                            hyperVReplicaAzureReplicationDetailsInstance.InstanceType = instanceTypeInstance4;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplicaAzureReplicationDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                replicationProtectedItemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                replicationProtectedItemInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                replicationProtectedItemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                replicationProtectedItemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    replicationProtectedItemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Service response for replication protected items operation.
        /// </returns>
        public async Task<ReplicationProtectedItemOperationResponse> GetUnplannedFailoverStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetUnplannedFailoverStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ReplicationProtectedItemOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ReplicationProtectedItemOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ReplicationProtectedItem replicationProtectedItemInstance = new ReplicationProtectedItem();
                            result.ReplicationProtectedItem = replicationProtectedItemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ReplicationProtectedItemProperties propertiesInstance = new ReplicationProtectedItemProperties();
                                replicationProtectedItemInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken protectedItemTypeValue = propertiesValue["protectedItemType"];
                                if (protectedItemTypeValue != null && protectedItemTypeValue.Type != JTokenType.Null)
                                {
                                    string protectedItemTypeInstance = ((string)protectedItemTypeValue);
                                    propertiesInstance.ProtectedItemType = protectedItemTypeInstance;
                                }
                                
                                JToken protectableItemIdValue = propertiesValue["protectableItemId"];
                                if (protectableItemIdValue != null && protectableItemIdValue.Type != JTokenType.Null)
                                {
                                    string protectableItemIdInstance = ((string)protectableItemIdValue);
                                    propertiesInstance.ProtectableItemId = protectableItemIdInstance;
                                }
                                
                                JToken recoveryServicesProviderIdValue = propertiesValue["recoveryServicesProviderId"];
                                if (recoveryServicesProviderIdValue != null && recoveryServicesProviderIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryServicesProviderIdInstance = ((string)recoveryServicesProviderIdValue);
                                    propertiesInstance.RecoveryServicesProviderId = recoveryServicesProviderIdInstance;
                                }
                                
                                JToken primaryFabricFriendlyNameValue = propertiesValue["primaryFabricFriendlyName"];
                                if (primaryFabricFriendlyNameValue != null && primaryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricFriendlyNameInstance = ((string)primaryFabricFriendlyNameValue);
                                    propertiesInstance.PrimaryFabricFriendlyName = primaryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricFriendlyNameValue = propertiesValue["recoveryFabricFriendlyName"];
                                if (recoveryFabricFriendlyNameValue != null && recoveryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricFriendlyNameInstance = ((string)recoveryFabricFriendlyNameValue);
                                    propertiesInstance.RecoveryFabricFriendlyName = recoveryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricIdValue = propertiesValue["recoveryFabricId"];
                                if (recoveryFabricIdValue != null && recoveryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricIdInstance = ((string)recoveryFabricIdValue);
                                    propertiesInstance.RecoveryFabricId = recoveryFabricIdInstance;
                                }
                                
                                JToken primaryProtectionContainerFriendlyNameValue = propertiesValue["primaryProtectionContainerFriendlyName"];
                                if (primaryProtectionContainerFriendlyNameValue != null && primaryProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryProtectionContainerFriendlyNameInstance = ((string)primaryProtectionContainerFriendlyNameValue);
                                    propertiesInstance.PrimaryProtectionContainerFriendlyName = primaryProtectionContainerFriendlyNameInstance;
                                }
                                
                                JToken recoveryProtectionContainerFriendlyNameValue = propertiesValue["recoveryProtectionContainerFriendlyName"];
                                if (recoveryProtectionContainerFriendlyNameValue != null && recoveryProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryProtectionContainerFriendlyNameInstance = ((string)recoveryProtectionContainerFriendlyNameValue);
                                    propertiesInstance.RecoveryProtectionContainerFriendlyName = recoveryProtectionContainerFriendlyNameInstance;
                                }
                                
                                JToken protectionStateValue = propertiesValue["protectionState"];
                                if (protectionStateValue != null && protectionStateValue.Type != JTokenType.Null)
                                {
                                    string protectionStateInstance = ((string)protectionStateValue);
                                    propertiesInstance.ProtectionState = protectionStateInstance;
                                }
                                
                                JToken protectionStateDescriptionValue = propertiesValue["protectionStateDescription"];
                                if (protectionStateDescriptionValue != null && protectionStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string protectionStateDescriptionInstance = ((string)protectionStateDescriptionValue);
                                    propertiesInstance.ProtectionStateDescription = protectionStateDescriptionInstance;
                                }
                                
                                JToken activeLocationValue = propertiesValue["activeLocation"];
                                if (activeLocationValue != null && activeLocationValue.Type != JTokenType.Null)
                                {
                                    string activeLocationInstance = ((string)activeLocationValue);
                                    propertiesInstance.ActiveLocation = activeLocationInstance;
                                }
                                
                                JToken testFailoverStateValue = propertiesValue["testFailoverState"];
                                if (testFailoverStateValue != null && testFailoverStateValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateInstance = ((string)testFailoverStateValue);
                                    propertiesInstance.TestFailoverState = testFailoverStateInstance;
                                }
                                
                                JToken testFailoverStateDescriptionValue = propertiesValue["testFailoverStateDescription"];
                                if (testFailoverStateDescriptionValue != null && testFailoverStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateDescriptionInstance = ((string)testFailoverStateDescriptionValue);
                                    propertiesInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                    }
                                }
                                
                                JToken replicationHealthValue = propertiesValue["replicationHealth"];
                                if (replicationHealthValue != null && replicationHealthValue.Type != JTokenType.Null)
                                {
                                    string replicationHealthInstance = ((string)replicationHealthValue);
                                    propertiesInstance.ReplicationHealth = replicationHealthInstance;
                                }
                                
                                JToken replicationHealthErrorsArray = propertiesValue["replicationHealthErrors"];
                                if (replicationHealthErrorsArray != null && replicationHealthErrorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken replicationHealthErrorsValue in ((JArray)replicationHealthErrorsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.ReplicationHealthErrors.Add(healthErrorInstance);
                                        
                                        JToken errorLevelValue = replicationHealthErrorsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCodeValue = replicationHealthErrorsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = replicationHealthErrorsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = replicationHealthErrorsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = replicationHealthErrorsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = replicationHealthErrorsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            string creationTimeUtcInstance = ((string)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = replicationHealthErrorsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = replicationHealthErrorsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                    }
                                }
                                
                                JToken policyIdValue = propertiesValue["policyId"];
                                if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                {
                                    string policyIdInstance = ((string)policyIdValue);
                                    propertiesInstance.PolicyID = policyIdInstance;
                                }
                                
                                JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                    propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                }
                                
                                JToken lastSuccessfulFailoverTimeValue = propertiesValue["lastSuccessfulFailoverTime"];
                                if (lastSuccessfulFailoverTimeValue != null && lastSuccessfulFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSuccessfulFailoverTimeInstance = ((DateTime)lastSuccessfulFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulFailoverTime = lastSuccessfulFailoverTimeInstance;
                                }
                                
                                JToken lastSuccessfulTestFailoverTimeValue = propertiesValue["lastSuccessfulTestFailoverTime"];
                                if (lastSuccessfulTestFailoverTimeValue != null && lastSuccessfulTestFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSuccessfulTestFailoverTimeInstance = ((DateTime)lastSuccessfulTestFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulTestFailoverTime = lastSuccessfulTestFailoverTimeInstance;
                                }
                                
                                JToken currentScenarioValue = propertiesValue["currentScenario"];
                                if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                {
                                    CurrentScenarioDetails currentScenarioInstance = new CurrentScenarioDetails();
                                    propertiesInstance.CurrentScenario = currentScenarioInstance;
                                    
                                    JToken scenarioNameValue = currentScenarioValue["scenarioName"];
                                    if (scenarioNameValue != null && scenarioNameValue.Type != JTokenType.Null)
                                    {
                                        string scenarioNameInstance = ((string)scenarioNameValue);
                                        currentScenarioInstance.ScenarioName = scenarioNameInstance;
                                    }
                                    
                                    JToken jobIdValue = currentScenarioValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        currentScenarioInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken startTimeValue = currentScenarioValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        currentScenarioInstance.StartTime = startTimeInstance;
                                    }
                                }
                                
                                JToken failoverRecoveryPointIdValue = propertiesValue["failoverRecoveryPointId"];
                                if (failoverRecoveryPointIdValue != null && failoverRecoveryPointIdValue.Type != JTokenType.Null)
                                {
                                    string failoverRecoveryPointIdInstance = ((string)failoverRecoveryPointIdValue);
                                    propertiesInstance.FailoverRecoveryPointId = failoverRecoveryPointIdInstance;
                                }
                                
                                JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                    if (typeName == "HyperVReplica2012")
                                    {
                                        HyperVReplica2012ReplicationDetails hyperVReplica2012ReplicationDetailsInstance = new HyperVReplica2012ReplicationDetails();
                                        
                                        JToken lastReplicatedTimeValue = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue != null && lastReplicatedTimeValue.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance = ((string)lastReplicatedTimeValue);
                                            hyperVReplica2012ReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance;
                                        }
                                        
                                        JToken vmNicsArray = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray != null && vmNicsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue in ((JArray)vmNicsArray))
                                            {
                                                VMNicDetails vMNicDetailsInstance = new VMNicDetails();
                                                hyperVReplica2012ReplicationDetailsInstance.VmNics.Add(vMNicDetailsInstance);
                                                
                                                JToken nicIdValue = vmNicsValue["nicId"];
                                                if (nicIdValue != null && nicIdValue.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance = ((string)nicIdValue);
                                                    vMNicDetailsInstance.NicId = nicIdInstance;
                                                }
                                                
                                                JToken vMSubnetNameValue = vmNicsValue["vMSubnetName"];
                                                if (vMSubnetNameValue != null && vMSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance = ((string)vMSubnetNameValue);
                                                    vMNicDetailsInstance.VMSubnetName = vMSubnetNameInstance;
                                                }
                                                
                                                JToken vMNetworkNameValue = vmNicsValue["vMNetworkName"];
                                                if (vMNetworkNameValue != null && vMNetworkNameValue.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance = ((string)vMNetworkNameValue);
                                                    vMNicDetailsInstance.VMNetworkName = vMNetworkNameInstance;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue = vmNicsValue["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue != null && recoveryVMNetworkIdValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance = ((string)recoveryVMNetworkIdValue);
                                                    vMNicDetailsInstance.RecoveryVMNetworkId = recoveryVMNetworkIdInstance;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue = vmNicsValue["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue != null && recoveryVMSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance = ((string)recoveryVMSubnetNameValue);
                                                    vMNicDetailsInstance.RecoveryVMSubnetName = recoveryVMSubnetNameInstance;
                                                }
                                                
                                                JToken ipAddressTypeValue = vmNicsValue["ipAddressType"];
                                                if (ipAddressTypeValue != null && ipAddressTypeValue.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance = ((string)ipAddressTypeValue);
                                                    vMNicDetailsInstance.IpAddressType = ipAddressTypeInstance;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue = vmNicsValue["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue != null && replicaNicStaticIPAddressValue.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance = ((string)replicaNicStaticIPAddressValue);
                                                    vMNicDetailsInstance.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance;
                                                }
                                                
                                                JToken selectionTypeValue = vmNicsValue["selectionType"];
                                                if (selectionTypeValue != null && selectionTypeValue.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance = ((string)selectionTypeValue);
                                                    vMNicDetailsInstance.SelectionType = selectionTypeInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken initialReplicationDetailsValue = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue != null && initialReplicationDetailsValue.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance = new InitialReplicationDetails();
                                            hyperVReplica2012ReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance;
                                            
                                            JToken initialReplicationTypeValue = initialReplicationDetailsValue["initialReplicationType"];
                                            if (initialReplicationTypeValue != null && initialReplicationTypeValue.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance = ((string)initialReplicationTypeValue);
                                                initialReplicationDetailsInstance.InitialReplicationType = initialReplicationTypeInstance;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue = initialReplicationDetailsValue["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue != null && initialReplicationProgressPercentageValue.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance = ((string)initialReplicationProgressPercentageValue);
                                                initialReplicationDetailsInstance.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance;
                                            }
                                        }
                                        
                                        JToken vMDiskDetailsArray = providerSpecificDetailsValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray != null && vMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue in ((JArray)vMDiskDetailsArray))
                                            {
                                                DiskDetails diskDetailsInstance = new DiskDetails();
                                                hyperVReplica2012ReplicationDetailsInstance.VMDiskDetails.Add(diskDetailsInstance);
                                                
                                                JToken maxSizeMBValue = vMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue != null && maxSizeMBValue.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance = ((ulong)maxSizeMBValue);
                                                    diskDetailsInstance.MaxSizeMB = maxSizeMBInstance;
                                                }
                                                
                                                JToken vhdTypeValue = vMDiskDetailsValue["vhdType"];
                                                if (vhdTypeValue != null && vhdTypeValue.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance = ((string)vhdTypeValue);
                                                    diskDetailsInstance.VhdType = vhdTypeInstance;
                                                }
                                                
                                                JToken vhdIdValue = vMDiskDetailsValue["vhdId"];
                                                if (vhdIdValue != null && vhdIdValue.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance = ((string)vhdIdValue);
                                                    diskDetailsInstance.VhdId = vhdIdInstance;
                                                }
                                                
                                                JToken vhdNameValue = vMDiskDetailsValue["vhdName"];
                                                if (vhdNameValue != null && vhdNameValue.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance = ((string)vhdNameValue);
                                                    diskDetailsInstance.VhdName = vhdNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            hyperVReplica2012ReplicationDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplica2012ReplicationDetailsInstance;
                                    }
                                    if (typeName == "HyperVReplica2012R2")
                                    {
                                        HyperVReplica2012R2ReplicationDetails hyperVReplica2012R2ReplicationDetailsInstance = new HyperVReplica2012R2ReplicationDetails();
                                        
                                        JToken lastReplicatedTimeValue2 = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue2 != null && lastReplicatedTimeValue2.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance2 = ((string)lastReplicatedTimeValue2);
                                            hyperVReplica2012R2ReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance2;
                                        }
                                        
                                        JToken vmNicsArray2 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray2 != null && vmNicsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue2 in ((JArray)vmNicsArray2))
                                            {
                                                VMNicDetails vMNicDetailsInstance2 = new VMNicDetails();
                                                hyperVReplica2012R2ReplicationDetailsInstance.VmNics.Add(vMNicDetailsInstance2);
                                                
                                                JToken nicIdValue2 = vmNicsValue2["nicId"];
                                                if (nicIdValue2 != null && nicIdValue2.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance2 = ((string)nicIdValue2);
                                                    vMNicDetailsInstance2.NicId = nicIdInstance2;
                                                }
                                                
                                                JToken vMSubnetNameValue2 = vmNicsValue2["vMSubnetName"];
                                                if (vMSubnetNameValue2 != null && vMSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance2 = ((string)vMSubnetNameValue2);
                                                    vMNicDetailsInstance2.VMSubnetName = vMSubnetNameInstance2;
                                                }
                                                
                                                JToken vMNetworkNameValue2 = vmNicsValue2["vMNetworkName"];
                                                if (vMNetworkNameValue2 != null && vMNetworkNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance2 = ((string)vMNetworkNameValue2);
                                                    vMNicDetailsInstance2.VMNetworkName = vMNetworkNameInstance2;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue2 = vmNicsValue2["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue2 != null && recoveryVMNetworkIdValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance2 = ((string)recoveryVMNetworkIdValue2);
                                                    vMNicDetailsInstance2.RecoveryVMNetworkId = recoveryVMNetworkIdInstance2;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue2 = vmNicsValue2["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue2 != null && recoveryVMSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance2 = ((string)recoveryVMSubnetNameValue2);
                                                    vMNicDetailsInstance2.RecoveryVMSubnetName = recoveryVMSubnetNameInstance2;
                                                }
                                                
                                                JToken ipAddressTypeValue2 = vmNicsValue2["ipAddressType"];
                                                if (ipAddressTypeValue2 != null && ipAddressTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance2 = ((string)ipAddressTypeValue2);
                                                    vMNicDetailsInstance2.IpAddressType = ipAddressTypeInstance2;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue2 = vmNicsValue2["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue2 != null && replicaNicStaticIPAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance2 = ((string)replicaNicStaticIPAddressValue2);
                                                    vMNicDetailsInstance2.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance2;
                                                }
                                                
                                                JToken selectionTypeValue2 = vmNicsValue2["selectionType"];
                                                if (selectionTypeValue2 != null && selectionTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance2 = ((string)selectionTypeValue2);
                                                    vMNicDetailsInstance2.SelectionType = selectionTypeInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken initialReplicationDetailsValue2 = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue2 != null && initialReplicationDetailsValue2.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance2 = new InitialReplicationDetails();
                                            hyperVReplica2012R2ReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance2;
                                            
                                            JToken initialReplicationTypeValue2 = initialReplicationDetailsValue2["initialReplicationType"];
                                            if (initialReplicationTypeValue2 != null && initialReplicationTypeValue2.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance2 = ((string)initialReplicationTypeValue2);
                                                initialReplicationDetailsInstance2.InitialReplicationType = initialReplicationTypeInstance2;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue2 = initialReplicationDetailsValue2["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue2 != null && initialReplicationProgressPercentageValue2.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance2 = ((string)initialReplicationProgressPercentageValue2);
                                                initialReplicationDetailsInstance2.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance2;
                                            }
                                        }
                                        
                                        JToken vMDiskDetailsArray2 = providerSpecificDetailsValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray2 != null && vMDiskDetailsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue2 in ((JArray)vMDiskDetailsArray2))
                                            {
                                                DiskDetails diskDetailsInstance2 = new DiskDetails();
                                                hyperVReplica2012R2ReplicationDetailsInstance.VMDiskDetails.Add(diskDetailsInstance2);
                                                
                                                JToken maxSizeMBValue2 = vMDiskDetailsValue2["maxSizeMB"];
                                                if (maxSizeMBValue2 != null && maxSizeMBValue2.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance2 = ((ulong)maxSizeMBValue2);
                                                    diskDetailsInstance2.MaxSizeMB = maxSizeMBInstance2;
                                                }
                                                
                                                JToken vhdTypeValue2 = vMDiskDetailsValue2["vhdType"];
                                                if (vhdTypeValue2 != null && vhdTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance2 = ((string)vhdTypeValue2);
                                                    diskDetailsInstance2.VhdType = vhdTypeInstance2;
                                                }
                                                
                                                JToken vhdIdValue2 = vMDiskDetailsValue2["vhdId"];
                                                if (vhdIdValue2 != null && vhdIdValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance2 = ((string)vhdIdValue2);
                                                    diskDetailsInstance2.VhdId = vhdIdInstance2;
                                                }
                                                
                                                JToken vhdNameValue2 = vMDiskDetailsValue2["vhdName"];
                                                if (vhdNameValue2 != null && vhdNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance2 = ((string)vhdNameValue2);
                                                    diskDetailsInstance2.VhdName = vhdNameInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue2 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                            hyperVReplica2012R2ReplicationDetailsInstance.InstanceType = instanceTypeInstance2;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplica2012R2ReplicationDetailsInstance;
                                    }
                                    if (typeName == "VMwareAzureV2")
                                    {
                                        VMwareAzureV2ProviderSpecificSettings vMwareAzureV2ProviderSpecificSettingsInstance = new VMwareAzureV2ProviderSpecificSettings();
                                        
                                        JToken infrastructureVmIdValue = providerSpecificDetailsValue["infrastructureVmId"];
                                        if (infrastructureVmIdValue != null && infrastructureVmIdValue.Type != JTokenType.Null)
                                        {
                                            string infrastructureVmIdInstance = ((string)infrastructureVmIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.InfrastructureVmId = infrastructureVmIdInstance;
                                        }
                                        
                                        JToken vCenterInfrastructureIdValue = providerSpecificDetailsValue["vCenterInfrastructureId"];
                                        if (vCenterInfrastructureIdValue != null && vCenterInfrastructureIdValue.Type != JTokenType.Null)
                                        {
                                            string vCenterInfrastructureIdInstance = ((string)vCenterInfrastructureIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VCenterInfrastructureId = vCenterInfrastructureIdInstance;
                                        }
                                        
                                        JToken protectionStageValue = providerSpecificDetailsValue["protectionStage"];
                                        if (protectionStageValue != null && protectionStageValue.Type != JTokenType.Null)
                                        {
                                            string protectionStageInstance = ((string)protectionStageValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ProtectionStage = protectionStageInstance;
                                        }
                                        
                                        JToken healthErrorCodeValue = providerSpecificDetailsValue["healthErrorCode"];
                                        if (healthErrorCodeValue != null && healthErrorCodeValue.Type != JTokenType.Null)
                                        {
                                            string healthErrorCodeInstance = ((string)healthErrorCodeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.HealthErrorCode = healthErrorCodeInstance;
                                        }
                                        
                                        JToken resyncRequiredValue = providerSpecificDetailsValue["resyncRequired"];
                                        if (resyncRequiredValue != null && resyncRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool resyncRequiredInstance = ((bool)resyncRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ResyncRequired = resyncRequiredInstance;
                                        }
                                        
                                        JToken resyncProgressPercentageValue = providerSpecificDetailsValue["resyncProgressPercentage"];
                                        if (resyncProgressPercentageValue != null && resyncProgressPercentageValue.Type != JTokenType.Null)
                                        {
                                            int resyncProgressPercentageInstance = ((int)resyncProgressPercentageValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ResyncProgressPercentage = resyncProgressPercentageInstance;
                                        }
                                        
                                        JToken rpoInSecondsValue = providerSpecificDetailsValue["rpoInSeconds"];
                                        if (rpoInSecondsValue != null && rpoInSecondsValue.Type != JTokenType.Null)
                                        {
                                            long rpoInSecondsInstance = ((long)rpoInSecondsValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RpoInSeconds = rpoInSecondsInstance;
                                        }
                                        
                                        JToken compressedDataRateInMBValue = providerSpecificDetailsValue["compressedDataRateInMB"];
                                        if (compressedDataRateInMBValue != null && compressedDataRateInMBValue.Type != JTokenType.Null)
                                        {
                                            double compressedDataRateInMBInstance = ((double)compressedDataRateInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.CompressedDataRateInMB = compressedDataRateInMBInstance;
                                        }
                                        
                                        JToken uncompressedDataRateInMBValue = providerSpecificDetailsValue["uncompressedDataRateInMB"];
                                        if (uncompressedDataRateInMBValue != null && uncompressedDataRateInMBValue.Type != JTokenType.Null)
                                        {
                                            double uncompressedDataRateInMBInstance = ((double)uncompressedDataRateInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.UncompressedDataRateInMB = uncompressedDataRateInMBInstance;
                                        }
                                        
                                        JToken ipAddressValue = providerSpecificDetailsValue["ipAddress"];
                                        if (ipAddressValue != null && ipAddressValue.Type != JTokenType.Null)
                                        {
                                            string ipAddressInstance = ((string)ipAddressValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IpAddress = ipAddressInstance;
                                        }
                                        
                                        JToken agentVersionValue = providerSpecificDetailsValue["agentVersion"];
                                        if (agentVersionValue != null && agentVersionValue.Type != JTokenType.Null)
                                        {
                                            string agentVersionInstance = ((string)agentVersionValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.AgentVersion = agentVersionInstance;
                                        }
                                        
                                        JToken latestUpdateVersionValue = providerSpecificDetailsValue["latestUpdateVersion"];
                                        if (latestUpdateVersionValue != null && latestUpdateVersionValue.Type != JTokenType.Null)
                                        {
                                            string latestUpdateVersionInstance = ((string)latestUpdateVersionValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.LatestUpdateVersion = latestUpdateVersionInstance;
                                        }
                                        
                                        JToken isAgentUpdateRequiredValue = providerSpecificDetailsValue["isAgentUpdateRequired"];
                                        if (isAgentUpdateRequiredValue != null && isAgentUpdateRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool isAgentUpdateRequiredInstance = ((bool)isAgentUpdateRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IsAgentUpdateRequired = isAgentUpdateRequiredInstance;
                                        }
                                        
                                        JToken isRebootAfterUpdateRequiredValue = providerSpecificDetailsValue["isRebootAfterUpdateRequired"];
                                        if (isRebootAfterUpdateRequiredValue != null && isRebootAfterUpdateRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool isRebootAfterUpdateRequiredInstance = ((bool)isRebootAfterUpdateRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IsRebootAfterUpdateRequired = isRebootAfterUpdateRequiredInstance;
                                        }
                                        
                                        JToken lastHeartbeatValue = providerSpecificDetailsValue["lastHeartbeat"];
                                        if (lastHeartbeatValue != null && lastHeartbeatValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastHeartbeatInstance = ((DateTime)lastHeartbeatValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.LastHeartbeat = lastHeartbeatInstance;
                                        }
                                        
                                        JToken processServerIdValue = providerSpecificDetailsValue["processServerId"];
                                        if (processServerIdValue != null && processServerIdValue.Type != JTokenType.Null)
                                        {
                                            string processServerIdInstance = ((string)processServerIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ProcessServerId = processServerIdInstance;
                                        }
                                        
                                        JToken multiVmGroupIdValue = providerSpecificDetailsValue["multiVmGroupId"];
                                        if (multiVmGroupIdValue != null && multiVmGroupIdValue.Type != JTokenType.Null)
                                        {
                                            string multiVmGroupIdInstance = ((string)multiVmGroupIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MultiVmGroupId = multiVmGroupIdInstance;
                                        }
                                        
                                        JToken multiVmGroupNameValue = providerSpecificDetailsValue["multiVmGroupName"];
                                        if (multiVmGroupNameValue != null && multiVmGroupNameValue.Type != JTokenType.Null)
                                        {
                                            string multiVmGroupNameInstance = ((string)multiVmGroupNameValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MultiVmGroupName = multiVmGroupNameInstance;
                                        }
                                        
                                        JToken protectedVolumesArray = providerSpecificDetailsValue["protectedVolumes"];
                                        if (protectedVolumesArray != null && protectedVolumesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken protectedVolumesValue in ((JArray)protectedVolumesArray))
                                            {
                                                VMwareAzureV2ProtectedVolumeDetails vMwareAzureV2ProtectedVolumeDetailsInstance = new VMwareAzureV2ProtectedVolumeDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.ProtectedVolumes.Add(vMwareAzureV2ProtectedVolumeDetailsInstance);
                                                
                                                JToken nameValue = protectedVolumesValue["name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.Name = nameInstance;
                                                }
                                                
                                                JToken protectionStageValue2 = protectedVolumesValue["protectionStage"];
                                                if (protectionStageValue2 != null && protectionStageValue2.Type != JTokenType.Null)
                                                {
                                                    string protectionStageInstance2 = ((string)protectionStageValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ProtectionStage = protectionStageInstance2;
                                                }
                                                
                                                JToken healthErrorCodeValue2 = protectedVolumesValue["healthErrorCode"];
                                                if (healthErrorCodeValue2 != null && healthErrorCodeValue2.Type != JTokenType.Null)
                                                {
                                                    string healthErrorCodeInstance2 = ((string)healthErrorCodeValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.HealthErrorCode = healthErrorCodeInstance2;
                                                }
                                                
                                                JToken rpoInSecondsValue2 = protectedVolumesValue["rpoInSeconds"];
                                                if (rpoInSecondsValue2 != null && rpoInSecondsValue2.Type != JTokenType.Null)
                                                {
                                                    long rpoInSecondsInstance2 = ((long)rpoInSecondsValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.RpoInSeconds = rpoInSecondsInstance2;
                                                }
                                                
                                                JToken resyncRequiredValue2 = protectedVolumesValue["resyncRequired"];
                                                if (resyncRequiredValue2 != null && resyncRequiredValue2.Type != JTokenType.Null)
                                                {
                                                    bool resyncRequiredInstance2 = ((bool)resyncRequiredValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncRequired = resyncRequiredInstance2;
                                                }
                                                
                                                JToken resyncProgressPercentageValue2 = protectedVolumesValue["resyncProgressPercentage"];
                                                if (resyncProgressPercentageValue2 != null && resyncProgressPercentageValue2.Type != JTokenType.Null)
                                                {
                                                    int resyncProgressPercentageInstance2 = ((int)resyncProgressPercentageValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncProgressPercentage = resyncProgressPercentageInstance2;
                                                }
                                                
                                                JToken resyncDurationInSecondsValue = protectedVolumesValue["resyncDurationInSeconds"];
                                                if (resyncDurationInSecondsValue != null && resyncDurationInSecondsValue.Type != JTokenType.Null)
                                                {
                                                    long resyncDurationInSecondsInstance = ((long)resyncDurationInSecondsValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncDurationInSeconds = resyncDurationInSecondsInstance;
                                                }
                                                
                                                JToken volumeCapacityInBytesValue = protectedVolumesValue["volumeCapacityInBytes"];
                                                if (volumeCapacityInBytesValue != null && volumeCapacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long volumeCapacityInBytesInstance = ((long)volumeCapacityInBytesValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.VolumeCapacityInBytes = volumeCapacityInBytesInstance;
                                                }
                                                
                                                JToken fileSystemCapacityInBytesValue = protectedVolumesValue["fileSystemCapacityInBytes"];
                                                if (fileSystemCapacityInBytesValue != null && fileSystemCapacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long fileSystemCapacityInBytesInstance = ((long)fileSystemCapacityInBytesValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.FileSystemCapacityInBytes = fileSystemCapacityInBytesInstance;
                                                }
                                                
                                                JToken sourceDataInMBValue = protectedVolumesValue["sourceDataInMB"];
                                                if (sourceDataInMBValue != null && sourceDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double sourceDataInMBInstance = ((double)sourceDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.SourceDataInMB = sourceDataInMBInstance;
                                                }
                                                
                                                JToken psDataInMBValue = protectedVolumesValue["psDataInMB"];
                                                if (psDataInMBValue != null && psDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double psDataInMBInstance = ((double)psDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.PSDataInMB = psDataInMBInstance;
                                                }
                                                
                                                JToken targetDataInMBValue = protectedVolumesValue["targetDataInMB"];
                                                if (targetDataInMBValue != null && targetDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double targetDataInMBInstance = ((double)targetDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.TargetDataInMB = targetDataInMBInstance;
                                                }
                                                
                                                JToken volumeResizedValue = protectedVolumesValue["volumeResized"];
                                                if (volumeResizedValue != null && volumeResizedValue.Type != JTokenType.Null)
                                                {
                                                    bool volumeResizedInstance = ((bool)volumeResizedValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.VolumeResized = volumeResizedInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken volumeResizedValue2 = providerSpecificDetailsValue["volumeResized"];
                                        if (volumeResizedValue2 != null && volumeResizedValue2.Type != JTokenType.Null)
                                        {
                                            bool volumeResizedInstance2 = ((bool)volumeResizedValue2);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VolumeResized = volumeResizedInstance2;
                                        }
                                        
                                        JToken masterTargetIdValue = providerSpecificDetailsValue["masterTargetId"];
                                        if (masterTargetIdValue != null && masterTargetIdValue.Type != JTokenType.Null)
                                        {
                                            string masterTargetIdInstance = ((string)masterTargetIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MasterTargetId = masterTargetIdInstance;
                                        }
                                        
                                        JToken sourceVmCPUCountValue = providerSpecificDetailsValue["sourceVmCPUCount"];
                                        if (sourceVmCPUCountValue != null && sourceVmCPUCountValue.Type != JTokenType.Null)
                                        {
                                            int sourceVmCPUCountInstance = ((int)sourceVmCPUCountValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SourceVmCPUCount = sourceVmCPUCountInstance;
                                        }
                                        
                                        JToken sourceVmRAMSizeInMBValue = providerSpecificDetailsValue["sourceVmRAMSizeInMB"];
                                        if (sourceVmRAMSizeInMBValue != null && sourceVmRAMSizeInMBValue.Type != JTokenType.Null)
                                        {
                                            int sourceVmRAMSizeInMBInstance = ((int)sourceVmRAMSizeInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SourceVmRAMSizeInMB = sourceVmRAMSizeInMBInstance;
                                        }
                                        
                                        JToken osTypeValue = providerSpecificDetailsValue["osType"];
                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance = ((string)osTypeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.OSType = osTypeInstance;
                                        }
                                        
                                        JToken vhdNameValue3 = providerSpecificDetailsValue["vhdName"];
                                        if (vhdNameValue3 != null && vhdNameValue3.Type != JTokenType.Null)
                                        {
                                            string vhdNameInstance3 = ((string)vhdNameValue3);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VHDName = vhdNameInstance3;
                                        }
                                        
                                        JToken osDiskIdValue = providerSpecificDetailsValue["osDiskId"];
                                        if (osDiskIdValue != null && osDiskIdValue.Type != JTokenType.Null)
                                        {
                                            string osDiskIdInstance = ((string)osDiskIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.OSDiskId = osDiskIdInstance;
                                        }
                                        
                                        JToken azureVMDiskDetailsArray = providerSpecificDetailsValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsArray != null && azureVMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken azureVMDiskDetailsValue in ((JArray)azureVMDiskDetailsArray))
                                            {
                                                AzureVmDiskDetails azureVmDiskDetailsInstance = new AzureVmDiskDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.AzureVMDiskDetails.Add(azureVmDiskDetailsInstance);
                                                
                                                JToken vhdTypeValue3 = azureVMDiskDetailsValue["vhdType"];
                                                if (vhdTypeValue3 != null && vhdTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance3 = ((string)vhdTypeValue3);
                                                    azureVmDiskDetailsInstance.VhdType = vhdTypeInstance3;
                                                }
                                                
                                                JToken vhdIdValue3 = azureVMDiskDetailsValue["vhdId"];
                                                if (vhdIdValue3 != null && vhdIdValue3.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance3 = ((string)vhdIdValue3);
                                                    azureVmDiskDetailsInstance.VhdId = vhdIdInstance3;
                                                }
                                                
                                                JToken vhdNameValue4 = azureVMDiskDetailsValue["vhdName"];
                                                if (vhdNameValue4 != null && vhdNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance4 = ((string)vhdNameValue4);
                                                    azureVmDiskDetailsInstance.VhdName = vhdNameInstance4;
                                                }
                                                
                                                JToken maxSizeMBValue3 = azureVMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue3 != null && maxSizeMBValue3.Type != JTokenType.Null)
                                                {
                                                    string maxSizeMBInstance3 = ((string)maxSizeMBValue3);
                                                    azureVmDiskDetailsInstance.MaxSizeMB = maxSizeMBInstance3;
                                                }
                                                
                                                JToken targetDiskLocationValue = azureVMDiskDetailsValue["targetDiskLocation"];
                                                if (targetDiskLocationValue != null && targetDiskLocationValue.Type != JTokenType.Null)
                                                {
                                                    string targetDiskLocationInstance = ((string)targetDiskLocationValue);
                                                    azureVmDiskDetailsInstance.TargetDiskLocation = targetDiskLocationInstance;
                                                }
                                                
                                                JToken lunIdValue = azureVMDiskDetailsValue["lunId"];
                                                if (lunIdValue != null && lunIdValue.Type != JTokenType.Null)
                                                {
                                                    string lunIdInstance = ((string)lunIdValue);
                                                    azureVmDiskDetailsInstance.LunId = lunIdInstance;
                                                }
                                                
                                                JToken targetDiskNameValue = azureVMDiskDetailsValue["targetDiskName"];
                                                if (targetDiskNameValue != null && targetDiskNameValue.Type != JTokenType.Null)
                                                {
                                                    string targetDiskNameInstance = ((string)targetDiskNameValue);
                                                    azureVmDiskDetailsInstance.TargetDiskName = targetDiskNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue = providerSpecificDetailsValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue != null && recoveryAzureVMNameValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance = ((string)recoveryAzureVMNameValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue = providerSpecificDetailsValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue != null && recoveryAzureVMSizeValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance = ((string)recoveryAzureVMSizeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance;
                                        }
                                        
                                        JToken recoveryAzureStorageAccountValue = providerSpecificDetailsValue["recoveryAzureStorageAccount"];
                                        if (recoveryAzureStorageAccountValue != null && recoveryAzureStorageAccountValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureStorageAccountInstance = ((string)recoveryAzureStorageAccountValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureStorageAccount = recoveryAzureStorageAccountInstance;
                                        }
                                        
                                        JToken vmNicsArray3 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray3 != null && vmNicsArray3.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue3 in ((JArray)vmNicsArray3))
                                            {
                                                VMNicDetails vMNicDetailsInstance3 = new VMNicDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.VMNics.Add(vMNicDetailsInstance3);
                                                
                                                JToken nicIdValue3 = vmNicsValue3["nicId"];
                                                if (nicIdValue3 != null && nicIdValue3.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance3 = ((string)nicIdValue3);
                                                    vMNicDetailsInstance3.NicId = nicIdInstance3;
                                                }
                                                
                                                JToken vMSubnetNameValue3 = vmNicsValue3["vMSubnetName"];
                                                if (vMSubnetNameValue3 != null && vMSubnetNameValue3.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance3 = ((string)vMSubnetNameValue3);
                                                    vMNicDetailsInstance3.VMSubnetName = vMSubnetNameInstance3;
                                                }
                                                
                                                JToken vMNetworkNameValue3 = vmNicsValue3["vMNetworkName"];
                                                if (vMNetworkNameValue3 != null && vMNetworkNameValue3.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance3 = ((string)vMNetworkNameValue3);
                                                    vMNicDetailsInstance3.VMNetworkName = vMNetworkNameInstance3;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue3 = vmNicsValue3["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue3 != null && recoveryVMNetworkIdValue3.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance3 = ((string)recoveryVMNetworkIdValue3);
                                                    vMNicDetailsInstance3.RecoveryVMNetworkId = recoveryVMNetworkIdInstance3;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue3 = vmNicsValue3["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue3 != null && recoveryVMSubnetNameValue3.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance3 = ((string)recoveryVMSubnetNameValue3);
                                                    vMNicDetailsInstance3.RecoveryVMSubnetName = recoveryVMSubnetNameInstance3;
                                                }
                                                
                                                JToken ipAddressTypeValue3 = vmNicsValue3["ipAddressType"];
                                                if (ipAddressTypeValue3 != null && ipAddressTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance3 = ((string)ipAddressTypeValue3);
                                                    vMNicDetailsInstance3.IpAddressType = ipAddressTypeInstance3;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue3 = vmNicsValue3["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue3 != null && replicaNicStaticIPAddressValue3.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance3 = ((string)replicaNicStaticIPAddressValue3);
                                                    vMNicDetailsInstance3.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance3;
                                                }
                                                
                                                JToken selectionTypeValue3 = vmNicsValue3["selectionType"];
                                                if (selectionTypeValue3 != null && selectionTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance3 = ((string)selectionTypeValue3);
                                                    vMNicDetailsInstance3.SelectionType = selectionTypeInstance3;
                                                }
                                            }
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue = providerSpecificDetailsValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue != null && selectedRecoveryAzureNetworkIdValue.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance = ((string)selectedRecoveryAzureNetworkIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance;
                                        }
                                        
                                        JToken discoveryTypeValue = providerSpecificDetailsValue["discoveryType"];
                                        if (discoveryTypeValue != null && discoveryTypeValue.Type != JTokenType.Null)
                                        {
                                            string discoveryTypeInstance = ((string)discoveryTypeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.DiscoveryType = discoveryTypeInstance;
                                        }
                                        
                                        JToken instanceTypeValue3 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.InstanceType = instanceTypeInstance3;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = vMwareAzureV2ProviderSpecificSettingsInstance;
                                    }
                                    if (typeName == "HyperVReplicaAzure")
                                    {
                                        HyperVReplicaAzureReplicationDetails hyperVReplicaAzureReplicationDetailsInstance = new HyperVReplicaAzureReplicationDetails();
                                        
                                        JToken azureVMDiskDetailsArray2 = providerSpecificDetailsValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsArray2 != null && azureVMDiskDetailsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken azureVMDiskDetailsValue2 in ((JArray)azureVMDiskDetailsArray2))
                                            {
                                                AzureVmDiskDetails azureVmDiskDetailsInstance2 = new AzureVmDiskDetails();
                                                hyperVReplicaAzureReplicationDetailsInstance.AzureVMDiskDetails.Add(azureVmDiskDetailsInstance2);
                                                
                                                JToken vhdTypeValue4 = azureVMDiskDetailsValue2["vhdType"];
                                                if (vhdTypeValue4 != null && vhdTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance4 = ((string)vhdTypeValue4);
                                                    azureVmDiskDetailsInstance2.VhdType = vhdTypeInstance4;
                                                }
                                                
                                                JToken vhdIdValue4 = azureVMDiskDetailsValue2["vhdId"];
                                                if (vhdIdValue4 != null && vhdIdValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance4 = ((string)vhdIdValue4);
                                                    azureVmDiskDetailsInstance2.VhdId = vhdIdInstance4;
                                                }
                                                
                                                JToken vhdNameValue5 = azureVMDiskDetailsValue2["vhdName"];
                                                if (vhdNameValue5 != null && vhdNameValue5.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance5 = ((string)vhdNameValue5);
                                                    azureVmDiskDetailsInstance2.VhdName = vhdNameInstance5;
                                                }
                                                
                                                JToken maxSizeMBValue4 = azureVMDiskDetailsValue2["maxSizeMB"];
                                                if (maxSizeMBValue4 != null && maxSizeMBValue4.Type != JTokenType.Null)
                                                {
                                                    string maxSizeMBInstance4 = ((string)maxSizeMBValue4);
                                                    azureVmDiskDetailsInstance2.MaxSizeMB = maxSizeMBInstance4;
                                                }
                                                
                                                JToken targetDiskLocationValue2 = azureVMDiskDetailsValue2["targetDiskLocation"];
                                                if (targetDiskLocationValue2 != null && targetDiskLocationValue2.Type != JTokenType.Null)
                                                {
                                                    string targetDiskLocationInstance2 = ((string)targetDiskLocationValue2);
                                                    azureVmDiskDetailsInstance2.TargetDiskLocation = targetDiskLocationInstance2;
                                                }
                                                
                                                JToken lunIdValue2 = azureVMDiskDetailsValue2["lunId"];
                                                if (lunIdValue2 != null && lunIdValue2.Type != JTokenType.Null)
                                                {
                                                    string lunIdInstance2 = ((string)lunIdValue2);
                                                    azureVmDiskDetailsInstance2.LunId = lunIdInstance2;
                                                }
                                                
                                                JToken targetDiskNameValue2 = azureVMDiskDetailsValue2["targetDiskName"];
                                                if (targetDiskNameValue2 != null && targetDiskNameValue2.Type != JTokenType.Null)
                                                {
                                                    string targetDiskNameInstance2 = ((string)targetDiskNameValue2);
                                                    azureVmDiskDetailsInstance2.TargetDiskName = targetDiskNameInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue2 = providerSpecificDetailsValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue2 != null && recoveryAzureVMNameValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance2 = ((string)recoveryAzureVMNameValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance2;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue2 = providerSpecificDetailsValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue2 != null && recoveryAzureVMSizeValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance2 = ((string)recoveryAzureVMSizeValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance2;
                                        }
                                        
                                        JToken recoveryAzureStorageAccountValue2 = providerSpecificDetailsValue["recoveryAzureStorageAccount"];
                                        if (recoveryAzureStorageAccountValue2 != null && recoveryAzureStorageAccountValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureStorageAccountInstance2 = ((string)recoveryAzureStorageAccountValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureStorageAccount = recoveryAzureStorageAccountInstance2;
                                        }
                                        
                                        JToken lastReplicatedTimeValue3 = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue3 != null && lastReplicatedTimeValue3.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance3 = ((string)lastReplicatedTimeValue3);
                                            hyperVReplicaAzureReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance3;
                                        }
                                        
                                        JToken initialReplicationDetailsValue3 = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue3 != null && initialReplicationDetailsValue3.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance3 = new InitialReplicationDetails();
                                            hyperVReplicaAzureReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance3;
                                            
                                            JToken initialReplicationTypeValue3 = initialReplicationDetailsValue3["initialReplicationType"];
                                            if (initialReplicationTypeValue3 != null && initialReplicationTypeValue3.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance3 = ((string)initialReplicationTypeValue3);
                                                initialReplicationDetailsInstance3.InitialReplicationType = initialReplicationTypeInstance3;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue3 = initialReplicationDetailsValue3["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue3 != null && initialReplicationProgressPercentageValue3.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance3 = ((string)initialReplicationProgressPercentageValue3);
                                                initialReplicationDetailsInstance3.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance3;
                                            }
                                        }
                                        
                                        JToken vmNicsArray4 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray4 != null && vmNicsArray4.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue4 in ((JArray)vmNicsArray4))
                                            {
                                                VMNicDetails vMNicDetailsInstance4 = new VMNicDetails();
                                                hyperVReplicaAzureReplicationDetailsInstance.VMNics.Add(vMNicDetailsInstance4);
                                                
                                                JToken nicIdValue4 = vmNicsValue4["nicId"];
                                                if (nicIdValue4 != null && nicIdValue4.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance4 = ((string)nicIdValue4);
                                                    vMNicDetailsInstance4.NicId = nicIdInstance4;
                                                }
                                                
                                                JToken vMSubnetNameValue4 = vmNicsValue4["vMSubnetName"];
                                                if (vMSubnetNameValue4 != null && vMSubnetNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance4 = ((string)vMSubnetNameValue4);
                                                    vMNicDetailsInstance4.VMSubnetName = vMSubnetNameInstance4;
                                                }
                                                
                                                JToken vMNetworkNameValue4 = vmNicsValue4["vMNetworkName"];
                                                if (vMNetworkNameValue4 != null && vMNetworkNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance4 = ((string)vMNetworkNameValue4);
                                                    vMNicDetailsInstance4.VMNetworkName = vMNetworkNameInstance4;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue4 = vmNicsValue4["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue4 != null && recoveryVMNetworkIdValue4.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance4 = ((string)recoveryVMNetworkIdValue4);
                                                    vMNicDetailsInstance4.RecoveryVMNetworkId = recoveryVMNetworkIdInstance4;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue4 = vmNicsValue4["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue4 != null && recoveryVMSubnetNameValue4.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance4 = ((string)recoveryVMSubnetNameValue4);
                                                    vMNicDetailsInstance4.RecoveryVMSubnetName = recoveryVMSubnetNameInstance4;
                                                }
                                                
                                                JToken ipAddressTypeValue4 = vmNicsValue4["ipAddressType"];
                                                if (ipAddressTypeValue4 != null && ipAddressTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance4 = ((string)ipAddressTypeValue4);
                                                    vMNicDetailsInstance4.IpAddressType = ipAddressTypeInstance4;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue4 = vmNicsValue4["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue4 != null && replicaNicStaticIPAddressValue4.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance4 = ((string)replicaNicStaticIPAddressValue4);
                                                    vMNicDetailsInstance4.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance4;
                                                }
                                                
                                                JToken selectionTypeValue4 = vmNicsValue4["selectionType"];
                                                if (selectionTypeValue4 != null && selectionTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance4 = ((string)selectionTypeValue4);
                                                    vMNicDetailsInstance4.SelectionType = selectionTypeInstance4;
                                                }
                                            }
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue2 = providerSpecificDetailsValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue2 != null && selectedRecoveryAzureNetworkIdValue2.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance2 = ((string)selectedRecoveryAzureNetworkIdValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance2;
                                        }
                                        
                                        JToken encryptionValue = providerSpecificDetailsValue["encryption"];
                                        if (encryptionValue != null && encryptionValue.Type != JTokenType.Null)
                                        {
                                            string encryptionInstance = ((string)encryptionValue);
                                            hyperVReplicaAzureReplicationDetailsInstance.Encryption = encryptionInstance;
                                        }
                                        
                                        JToken oSDetailsValue = providerSpecificDetailsValue["oSDetails"];
                                        if (oSDetailsValue != null && oSDetailsValue.Type != JTokenType.Null)
                                        {
                                            OSDetails oSDetailsInstance = new OSDetails();
                                            hyperVReplicaAzureReplicationDetailsInstance.OSDetails = oSDetailsInstance;
                                            
                                            JToken osTypeValue2 = oSDetailsValue["osType"];
                                            if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                            {
                                                string osTypeInstance2 = ((string)osTypeValue2);
                                                oSDetailsInstance.OsType = osTypeInstance2;
                                            }
                                            
                                            JToken productTypeValue = oSDetailsValue["productType"];
                                            if (productTypeValue != null && productTypeValue.Type != JTokenType.Null)
                                            {
                                                string productTypeInstance = ((string)productTypeValue);
                                                oSDetailsInstance.ProductType = productTypeInstance;
                                            }
                                            
                                            JToken osEditionValue = oSDetailsValue["osEdition"];
                                            if (osEditionValue != null && osEditionValue.Type != JTokenType.Null)
                                            {
                                                string osEditionInstance = ((string)osEditionValue);
                                                oSDetailsInstance.OSEdition = osEditionInstance;
                                            }
                                            
                                            JToken oSVersionValue = oSDetailsValue["oSVersion"];
                                            if (oSVersionValue != null && oSVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSVersionInstance = ((string)oSVersionValue);
                                                oSDetailsInstance.OSVersion = oSVersionInstance;
                                            }
                                            
                                            JToken oSMajorVersionValue = oSDetailsValue["oSMajorVersion"];
                                            if (oSMajorVersionValue != null && oSMajorVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSMajorVersionInstance = ((string)oSMajorVersionValue);
                                                oSDetailsInstance.OSMajorVersion = oSMajorVersionInstance;
                                            }
                                            
                                            JToken oSMinorVersionValue = oSDetailsValue["oSMinorVersion"];
                                            if (oSMinorVersionValue != null && oSMinorVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSMinorVersionInstance = ((string)oSMinorVersionValue);
                                                oSDetailsInstance.OSMinorVersion = oSMinorVersionInstance;
                                            }
                                        }
                                        
                                        JToken sourceVmRAMSizeInMBValue2 = providerSpecificDetailsValue["sourceVmRAMSizeInMB"];
                                        if (sourceVmRAMSizeInMBValue2 != null && sourceVmRAMSizeInMBValue2.Type != JTokenType.Null)
                                        {
                                            int sourceVmRAMSizeInMBInstance2 = ((int)sourceVmRAMSizeInMBValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SourceVmRAMSizeInMB = sourceVmRAMSizeInMBInstance2;
                                        }
                                        
                                        JToken sourceVmCPUCountValue2 = providerSpecificDetailsValue["sourceVmCPUCount"];
                                        if (sourceVmCPUCountValue2 != null && sourceVmCPUCountValue2.Type != JTokenType.Null)
                                        {
                                            int sourceVmCPUCountInstance2 = ((int)sourceVmCPUCountValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SourceVmCPUCount = sourceVmCPUCountInstance2;
                                        }
                                        
                                        JToken instanceTypeValue4 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue4 != null && instanceTypeValue4.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance4 = ((string)instanceTypeValue4);
                                            hyperVReplicaAzureReplicationDetailsInstance.InstanceType = instanceTypeInstance4;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplicaAzureReplicationDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                replicationProtectedItemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                replicationProtectedItemInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                replicationProtectedItemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                replicationProtectedItemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    replicationProtectedItemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Service response for replication protected items operation.
        /// </returns>
        public async Task<ReplicationProtectedItemOperationResponse> GetUpdateMobilityServiceStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetUpdateMobilityServiceStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ReplicationProtectedItemOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ReplicationProtectedItemOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ReplicationProtectedItem replicationProtectedItemInstance = new ReplicationProtectedItem();
                            result.ReplicationProtectedItem = replicationProtectedItemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ReplicationProtectedItemProperties propertiesInstance = new ReplicationProtectedItemProperties();
                                replicationProtectedItemInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken protectedItemTypeValue = propertiesValue["protectedItemType"];
                                if (protectedItemTypeValue != null && protectedItemTypeValue.Type != JTokenType.Null)
                                {
                                    string protectedItemTypeInstance = ((string)protectedItemTypeValue);
                                    propertiesInstance.ProtectedItemType = protectedItemTypeInstance;
                                }
                                
                                JToken protectableItemIdValue = propertiesValue["protectableItemId"];
                                if (protectableItemIdValue != null && protectableItemIdValue.Type != JTokenType.Null)
                                {
                                    string protectableItemIdInstance = ((string)protectableItemIdValue);
                                    propertiesInstance.ProtectableItemId = protectableItemIdInstance;
                                }
                                
                                JToken recoveryServicesProviderIdValue = propertiesValue["recoveryServicesProviderId"];
                                if (recoveryServicesProviderIdValue != null && recoveryServicesProviderIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryServicesProviderIdInstance = ((string)recoveryServicesProviderIdValue);
                                    propertiesInstance.RecoveryServicesProviderId = recoveryServicesProviderIdInstance;
                                }
                                
                                JToken primaryFabricFriendlyNameValue = propertiesValue["primaryFabricFriendlyName"];
                                if (primaryFabricFriendlyNameValue != null && primaryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricFriendlyNameInstance = ((string)primaryFabricFriendlyNameValue);
                                    propertiesInstance.PrimaryFabricFriendlyName = primaryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricFriendlyNameValue = propertiesValue["recoveryFabricFriendlyName"];
                                if (recoveryFabricFriendlyNameValue != null && recoveryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricFriendlyNameInstance = ((string)recoveryFabricFriendlyNameValue);
                                    propertiesInstance.RecoveryFabricFriendlyName = recoveryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricIdValue = propertiesValue["recoveryFabricId"];
                                if (recoveryFabricIdValue != null && recoveryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricIdInstance = ((string)recoveryFabricIdValue);
                                    propertiesInstance.RecoveryFabricId = recoveryFabricIdInstance;
                                }
                                
                                JToken primaryProtectionContainerFriendlyNameValue = propertiesValue["primaryProtectionContainerFriendlyName"];
                                if (primaryProtectionContainerFriendlyNameValue != null && primaryProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryProtectionContainerFriendlyNameInstance = ((string)primaryProtectionContainerFriendlyNameValue);
                                    propertiesInstance.PrimaryProtectionContainerFriendlyName = primaryProtectionContainerFriendlyNameInstance;
                                }
                                
                                JToken recoveryProtectionContainerFriendlyNameValue = propertiesValue["recoveryProtectionContainerFriendlyName"];
                                if (recoveryProtectionContainerFriendlyNameValue != null && recoveryProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryProtectionContainerFriendlyNameInstance = ((string)recoveryProtectionContainerFriendlyNameValue);
                                    propertiesInstance.RecoveryProtectionContainerFriendlyName = recoveryProtectionContainerFriendlyNameInstance;
                                }
                                
                                JToken protectionStateValue = propertiesValue["protectionState"];
                                if (protectionStateValue != null && protectionStateValue.Type != JTokenType.Null)
                                {
                                    string protectionStateInstance = ((string)protectionStateValue);
                                    propertiesInstance.ProtectionState = protectionStateInstance;
                                }
                                
                                JToken protectionStateDescriptionValue = propertiesValue["protectionStateDescription"];
                                if (protectionStateDescriptionValue != null && protectionStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string protectionStateDescriptionInstance = ((string)protectionStateDescriptionValue);
                                    propertiesInstance.ProtectionStateDescription = protectionStateDescriptionInstance;
                                }
                                
                                JToken activeLocationValue = propertiesValue["activeLocation"];
                                if (activeLocationValue != null && activeLocationValue.Type != JTokenType.Null)
                                {
                                    string activeLocationInstance = ((string)activeLocationValue);
                                    propertiesInstance.ActiveLocation = activeLocationInstance;
                                }
                                
                                JToken testFailoverStateValue = propertiesValue["testFailoverState"];
                                if (testFailoverStateValue != null && testFailoverStateValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateInstance = ((string)testFailoverStateValue);
                                    propertiesInstance.TestFailoverState = testFailoverStateInstance;
                                }
                                
                                JToken testFailoverStateDescriptionValue = propertiesValue["testFailoverStateDescription"];
                                if (testFailoverStateDescriptionValue != null && testFailoverStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateDescriptionInstance = ((string)testFailoverStateDescriptionValue);
                                    propertiesInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                    }
                                }
                                
                                JToken replicationHealthValue = propertiesValue["replicationHealth"];
                                if (replicationHealthValue != null && replicationHealthValue.Type != JTokenType.Null)
                                {
                                    string replicationHealthInstance = ((string)replicationHealthValue);
                                    propertiesInstance.ReplicationHealth = replicationHealthInstance;
                                }
                                
                                JToken replicationHealthErrorsArray = propertiesValue["replicationHealthErrors"];
                                if (replicationHealthErrorsArray != null && replicationHealthErrorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken replicationHealthErrorsValue in ((JArray)replicationHealthErrorsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.ReplicationHealthErrors.Add(healthErrorInstance);
                                        
                                        JToken errorLevelValue = replicationHealthErrorsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCodeValue = replicationHealthErrorsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = replicationHealthErrorsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = replicationHealthErrorsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = replicationHealthErrorsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = replicationHealthErrorsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            string creationTimeUtcInstance = ((string)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = replicationHealthErrorsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = replicationHealthErrorsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                    }
                                }
                                
                                JToken policyIdValue = propertiesValue["policyId"];
                                if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                {
                                    string policyIdInstance = ((string)policyIdValue);
                                    propertiesInstance.PolicyID = policyIdInstance;
                                }
                                
                                JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                    propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                }
                                
                                JToken lastSuccessfulFailoverTimeValue = propertiesValue["lastSuccessfulFailoverTime"];
                                if (lastSuccessfulFailoverTimeValue != null && lastSuccessfulFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSuccessfulFailoverTimeInstance = ((DateTime)lastSuccessfulFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulFailoverTime = lastSuccessfulFailoverTimeInstance;
                                }
                                
                                JToken lastSuccessfulTestFailoverTimeValue = propertiesValue["lastSuccessfulTestFailoverTime"];
                                if (lastSuccessfulTestFailoverTimeValue != null && lastSuccessfulTestFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSuccessfulTestFailoverTimeInstance = ((DateTime)lastSuccessfulTestFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulTestFailoverTime = lastSuccessfulTestFailoverTimeInstance;
                                }
                                
                                JToken currentScenarioValue = propertiesValue["currentScenario"];
                                if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                {
                                    CurrentScenarioDetails currentScenarioInstance = new CurrentScenarioDetails();
                                    propertiesInstance.CurrentScenario = currentScenarioInstance;
                                    
                                    JToken scenarioNameValue = currentScenarioValue["scenarioName"];
                                    if (scenarioNameValue != null && scenarioNameValue.Type != JTokenType.Null)
                                    {
                                        string scenarioNameInstance = ((string)scenarioNameValue);
                                        currentScenarioInstance.ScenarioName = scenarioNameInstance;
                                    }
                                    
                                    JToken jobIdValue = currentScenarioValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        currentScenarioInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken startTimeValue = currentScenarioValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        currentScenarioInstance.StartTime = startTimeInstance;
                                    }
                                }
                                
                                JToken failoverRecoveryPointIdValue = propertiesValue["failoverRecoveryPointId"];
                                if (failoverRecoveryPointIdValue != null && failoverRecoveryPointIdValue.Type != JTokenType.Null)
                                {
                                    string failoverRecoveryPointIdInstance = ((string)failoverRecoveryPointIdValue);
                                    propertiesInstance.FailoverRecoveryPointId = failoverRecoveryPointIdInstance;
                                }
                                
                                JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                    if (typeName == "HyperVReplica2012")
                                    {
                                        HyperVReplica2012ReplicationDetails hyperVReplica2012ReplicationDetailsInstance = new HyperVReplica2012ReplicationDetails();
                                        
                                        JToken lastReplicatedTimeValue = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue != null && lastReplicatedTimeValue.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance = ((string)lastReplicatedTimeValue);
                                            hyperVReplica2012ReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance;
                                        }
                                        
                                        JToken vmNicsArray = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray != null && vmNicsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue in ((JArray)vmNicsArray))
                                            {
                                                VMNicDetails vMNicDetailsInstance = new VMNicDetails();
                                                hyperVReplica2012ReplicationDetailsInstance.VmNics.Add(vMNicDetailsInstance);
                                                
                                                JToken nicIdValue = vmNicsValue["nicId"];
                                                if (nicIdValue != null && nicIdValue.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance = ((string)nicIdValue);
                                                    vMNicDetailsInstance.NicId = nicIdInstance;
                                                }
                                                
                                                JToken vMSubnetNameValue = vmNicsValue["vMSubnetName"];
                                                if (vMSubnetNameValue != null && vMSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance = ((string)vMSubnetNameValue);
                                                    vMNicDetailsInstance.VMSubnetName = vMSubnetNameInstance;
                                                }
                                                
                                                JToken vMNetworkNameValue = vmNicsValue["vMNetworkName"];
                                                if (vMNetworkNameValue != null && vMNetworkNameValue.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance = ((string)vMNetworkNameValue);
                                                    vMNicDetailsInstance.VMNetworkName = vMNetworkNameInstance;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue = vmNicsValue["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue != null && recoveryVMNetworkIdValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance = ((string)recoveryVMNetworkIdValue);
                                                    vMNicDetailsInstance.RecoveryVMNetworkId = recoveryVMNetworkIdInstance;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue = vmNicsValue["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue != null && recoveryVMSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance = ((string)recoveryVMSubnetNameValue);
                                                    vMNicDetailsInstance.RecoveryVMSubnetName = recoveryVMSubnetNameInstance;
                                                }
                                                
                                                JToken ipAddressTypeValue = vmNicsValue["ipAddressType"];
                                                if (ipAddressTypeValue != null && ipAddressTypeValue.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance = ((string)ipAddressTypeValue);
                                                    vMNicDetailsInstance.IpAddressType = ipAddressTypeInstance;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue = vmNicsValue["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue != null && replicaNicStaticIPAddressValue.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance = ((string)replicaNicStaticIPAddressValue);
                                                    vMNicDetailsInstance.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance;
                                                }
                                                
                                                JToken selectionTypeValue = vmNicsValue["selectionType"];
                                                if (selectionTypeValue != null && selectionTypeValue.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance = ((string)selectionTypeValue);
                                                    vMNicDetailsInstance.SelectionType = selectionTypeInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken initialReplicationDetailsValue = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue != null && initialReplicationDetailsValue.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance = new InitialReplicationDetails();
                                            hyperVReplica2012ReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance;
                                            
                                            JToken initialReplicationTypeValue = initialReplicationDetailsValue["initialReplicationType"];
                                            if (initialReplicationTypeValue != null && initialReplicationTypeValue.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance = ((string)initialReplicationTypeValue);
                                                initialReplicationDetailsInstance.InitialReplicationType = initialReplicationTypeInstance;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue = initialReplicationDetailsValue["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue != null && initialReplicationProgressPercentageValue.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance = ((string)initialReplicationProgressPercentageValue);
                                                initialReplicationDetailsInstance.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance;
                                            }
                                        }
                                        
                                        JToken vMDiskDetailsArray = providerSpecificDetailsValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray != null && vMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue in ((JArray)vMDiskDetailsArray))
                                            {
                                                DiskDetails diskDetailsInstance = new DiskDetails();
                                                hyperVReplica2012ReplicationDetailsInstance.VMDiskDetails.Add(diskDetailsInstance);
                                                
                                                JToken maxSizeMBValue = vMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue != null && maxSizeMBValue.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance = ((ulong)maxSizeMBValue);
                                                    diskDetailsInstance.MaxSizeMB = maxSizeMBInstance;
                                                }
                                                
                                                JToken vhdTypeValue = vMDiskDetailsValue["vhdType"];
                                                if (vhdTypeValue != null && vhdTypeValue.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance = ((string)vhdTypeValue);
                                                    diskDetailsInstance.VhdType = vhdTypeInstance;
                                                }
                                                
                                                JToken vhdIdValue = vMDiskDetailsValue["vhdId"];
                                                if (vhdIdValue != null && vhdIdValue.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance = ((string)vhdIdValue);
                                                    diskDetailsInstance.VhdId = vhdIdInstance;
                                                }
                                                
                                                JToken vhdNameValue = vMDiskDetailsValue["vhdName"];
                                                if (vhdNameValue != null && vhdNameValue.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance = ((string)vhdNameValue);
                                                    diskDetailsInstance.VhdName = vhdNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            hyperVReplica2012ReplicationDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplica2012ReplicationDetailsInstance;
                                    }
                                    if (typeName == "HyperVReplica2012R2")
                                    {
                                        HyperVReplica2012R2ReplicationDetails hyperVReplica2012R2ReplicationDetailsInstance = new HyperVReplica2012R2ReplicationDetails();
                                        
                                        JToken lastReplicatedTimeValue2 = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue2 != null && lastReplicatedTimeValue2.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance2 = ((string)lastReplicatedTimeValue2);
                                            hyperVReplica2012R2ReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance2;
                                        }
                                        
                                        JToken vmNicsArray2 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray2 != null && vmNicsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue2 in ((JArray)vmNicsArray2))
                                            {
                                                VMNicDetails vMNicDetailsInstance2 = new VMNicDetails();
                                                hyperVReplica2012R2ReplicationDetailsInstance.VmNics.Add(vMNicDetailsInstance2);
                                                
                                                JToken nicIdValue2 = vmNicsValue2["nicId"];
                                                if (nicIdValue2 != null && nicIdValue2.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance2 = ((string)nicIdValue2);
                                                    vMNicDetailsInstance2.NicId = nicIdInstance2;
                                                }
                                                
                                                JToken vMSubnetNameValue2 = vmNicsValue2["vMSubnetName"];
                                                if (vMSubnetNameValue2 != null && vMSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance2 = ((string)vMSubnetNameValue2);
                                                    vMNicDetailsInstance2.VMSubnetName = vMSubnetNameInstance2;
                                                }
                                                
                                                JToken vMNetworkNameValue2 = vmNicsValue2["vMNetworkName"];
                                                if (vMNetworkNameValue2 != null && vMNetworkNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance2 = ((string)vMNetworkNameValue2);
                                                    vMNicDetailsInstance2.VMNetworkName = vMNetworkNameInstance2;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue2 = vmNicsValue2["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue2 != null && recoveryVMNetworkIdValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance2 = ((string)recoveryVMNetworkIdValue2);
                                                    vMNicDetailsInstance2.RecoveryVMNetworkId = recoveryVMNetworkIdInstance2;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue2 = vmNicsValue2["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue2 != null && recoveryVMSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance2 = ((string)recoveryVMSubnetNameValue2);
                                                    vMNicDetailsInstance2.RecoveryVMSubnetName = recoveryVMSubnetNameInstance2;
                                                }
                                                
                                                JToken ipAddressTypeValue2 = vmNicsValue2["ipAddressType"];
                                                if (ipAddressTypeValue2 != null && ipAddressTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance2 = ((string)ipAddressTypeValue2);
                                                    vMNicDetailsInstance2.IpAddressType = ipAddressTypeInstance2;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue2 = vmNicsValue2["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue2 != null && replicaNicStaticIPAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance2 = ((string)replicaNicStaticIPAddressValue2);
                                                    vMNicDetailsInstance2.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance2;
                                                }
                                                
                                                JToken selectionTypeValue2 = vmNicsValue2["selectionType"];
                                                if (selectionTypeValue2 != null && selectionTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance2 = ((string)selectionTypeValue2);
                                                    vMNicDetailsInstance2.SelectionType = selectionTypeInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken initialReplicationDetailsValue2 = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue2 != null && initialReplicationDetailsValue2.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance2 = new InitialReplicationDetails();
                                            hyperVReplica2012R2ReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance2;
                                            
                                            JToken initialReplicationTypeValue2 = initialReplicationDetailsValue2["initialReplicationType"];
                                            if (initialReplicationTypeValue2 != null && initialReplicationTypeValue2.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance2 = ((string)initialReplicationTypeValue2);
                                                initialReplicationDetailsInstance2.InitialReplicationType = initialReplicationTypeInstance2;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue2 = initialReplicationDetailsValue2["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue2 != null && initialReplicationProgressPercentageValue2.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance2 = ((string)initialReplicationProgressPercentageValue2);
                                                initialReplicationDetailsInstance2.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance2;
                                            }
                                        }
                                        
                                        JToken vMDiskDetailsArray2 = providerSpecificDetailsValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray2 != null && vMDiskDetailsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue2 in ((JArray)vMDiskDetailsArray2))
                                            {
                                                DiskDetails diskDetailsInstance2 = new DiskDetails();
                                                hyperVReplica2012R2ReplicationDetailsInstance.VMDiskDetails.Add(diskDetailsInstance2);
                                                
                                                JToken maxSizeMBValue2 = vMDiskDetailsValue2["maxSizeMB"];
                                                if (maxSizeMBValue2 != null && maxSizeMBValue2.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance2 = ((ulong)maxSizeMBValue2);
                                                    diskDetailsInstance2.MaxSizeMB = maxSizeMBInstance2;
                                                }
                                                
                                                JToken vhdTypeValue2 = vMDiskDetailsValue2["vhdType"];
                                                if (vhdTypeValue2 != null && vhdTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance2 = ((string)vhdTypeValue2);
                                                    diskDetailsInstance2.VhdType = vhdTypeInstance2;
                                                }
                                                
                                                JToken vhdIdValue2 = vMDiskDetailsValue2["vhdId"];
                                                if (vhdIdValue2 != null && vhdIdValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance2 = ((string)vhdIdValue2);
                                                    diskDetailsInstance2.VhdId = vhdIdInstance2;
                                                }
                                                
                                                JToken vhdNameValue2 = vMDiskDetailsValue2["vhdName"];
                                                if (vhdNameValue2 != null && vhdNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance2 = ((string)vhdNameValue2);
                                                    diskDetailsInstance2.VhdName = vhdNameInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue2 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                            hyperVReplica2012R2ReplicationDetailsInstance.InstanceType = instanceTypeInstance2;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplica2012R2ReplicationDetailsInstance;
                                    }
                                    if (typeName == "VMwareAzureV2")
                                    {
                                        VMwareAzureV2ProviderSpecificSettings vMwareAzureV2ProviderSpecificSettingsInstance = new VMwareAzureV2ProviderSpecificSettings();
                                        
                                        JToken infrastructureVmIdValue = providerSpecificDetailsValue["infrastructureVmId"];
                                        if (infrastructureVmIdValue != null && infrastructureVmIdValue.Type != JTokenType.Null)
                                        {
                                            string infrastructureVmIdInstance = ((string)infrastructureVmIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.InfrastructureVmId = infrastructureVmIdInstance;
                                        }
                                        
                                        JToken vCenterInfrastructureIdValue = providerSpecificDetailsValue["vCenterInfrastructureId"];
                                        if (vCenterInfrastructureIdValue != null && vCenterInfrastructureIdValue.Type != JTokenType.Null)
                                        {
                                            string vCenterInfrastructureIdInstance = ((string)vCenterInfrastructureIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VCenterInfrastructureId = vCenterInfrastructureIdInstance;
                                        }
                                        
                                        JToken protectionStageValue = providerSpecificDetailsValue["protectionStage"];
                                        if (protectionStageValue != null && protectionStageValue.Type != JTokenType.Null)
                                        {
                                            string protectionStageInstance = ((string)protectionStageValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ProtectionStage = protectionStageInstance;
                                        }
                                        
                                        JToken healthErrorCodeValue = providerSpecificDetailsValue["healthErrorCode"];
                                        if (healthErrorCodeValue != null && healthErrorCodeValue.Type != JTokenType.Null)
                                        {
                                            string healthErrorCodeInstance = ((string)healthErrorCodeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.HealthErrorCode = healthErrorCodeInstance;
                                        }
                                        
                                        JToken resyncRequiredValue = providerSpecificDetailsValue["resyncRequired"];
                                        if (resyncRequiredValue != null && resyncRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool resyncRequiredInstance = ((bool)resyncRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ResyncRequired = resyncRequiredInstance;
                                        }
                                        
                                        JToken resyncProgressPercentageValue = providerSpecificDetailsValue["resyncProgressPercentage"];
                                        if (resyncProgressPercentageValue != null && resyncProgressPercentageValue.Type != JTokenType.Null)
                                        {
                                            int resyncProgressPercentageInstance = ((int)resyncProgressPercentageValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ResyncProgressPercentage = resyncProgressPercentageInstance;
                                        }
                                        
                                        JToken rpoInSecondsValue = providerSpecificDetailsValue["rpoInSeconds"];
                                        if (rpoInSecondsValue != null && rpoInSecondsValue.Type != JTokenType.Null)
                                        {
                                            long rpoInSecondsInstance = ((long)rpoInSecondsValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RpoInSeconds = rpoInSecondsInstance;
                                        }
                                        
                                        JToken compressedDataRateInMBValue = providerSpecificDetailsValue["compressedDataRateInMB"];
                                        if (compressedDataRateInMBValue != null && compressedDataRateInMBValue.Type != JTokenType.Null)
                                        {
                                            double compressedDataRateInMBInstance = ((double)compressedDataRateInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.CompressedDataRateInMB = compressedDataRateInMBInstance;
                                        }
                                        
                                        JToken uncompressedDataRateInMBValue = providerSpecificDetailsValue["uncompressedDataRateInMB"];
                                        if (uncompressedDataRateInMBValue != null && uncompressedDataRateInMBValue.Type != JTokenType.Null)
                                        {
                                            double uncompressedDataRateInMBInstance = ((double)uncompressedDataRateInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.UncompressedDataRateInMB = uncompressedDataRateInMBInstance;
                                        }
                                        
                                        JToken ipAddressValue = providerSpecificDetailsValue["ipAddress"];
                                        if (ipAddressValue != null && ipAddressValue.Type != JTokenType.Null)
                                        {
                                            string ipAddressInstance = ((string)ipAddressValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IpAddress = ipAddressInstance;
                                        }
                                        
                                        JToken agentVersionValue = providerSpecificDetailsValue["agentVersion"];
                                        if (agentVersionValue != null && agentVersionValue.Type != JTokenType.Null)
                                        {
                                            string agentVersionInstance = ((string)agentVersionValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.AgentVersion = agentVersionInstance;
                                        }
                                        
                                        JToken latestUpdateVersionValue = providerSpecificDetailsValue["latestUpdateVersion"];
                                        if (latestUpdateVersionValue != null && latestUpdateVersionValue.Type != JTokenType.Null)
                                        {
                                            string latestUpdateVersionInstance = ((string)latestUpdateVersionValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.LatestUpdateVersion = latestUpdateVersionInstance;
                                        }
                                        
                                        JToken isAgentUpdateRequiredValue = providerSpecificDetailsValue["isAgentUpdateRequired"];
                                        if (isAgentUpdateRequiredValue != null && isAgentUpdateRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool isAgentUpdateRequiredInstance = ((bool)isAgentUpdateRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IsAgentUpdateRequired = isAgentUpdateRequiredInstance;
                                        }
                                        
                                        JToken isRebootAfterUpdateRequiredValue = providerSpecificDetailsValue["isRebootAfterUpdateRequired"];
                                        if (isRebootAfterUpdateRequiredValue != null && isRebootAfterUpdateRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool isRebootAfterUpdateRequiredInstance = ((bool)isRebootAfterUpdateRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IsRebootAfterUpdateRequired = isRebootAfterUpdateRequiredInstance;
                                        }
                                        
                                        JToken lastHeartbeatValue = providerSpecificDetailsValue["lastHeartbeat"];
                                        if (lastHeartbeatValue != null && lastHeartbeatValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastHeartbeatInstance = ((DateTime)lastHeartbeatValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.LastHeartbeat = lastHeartbeatInstance;
                                        }
                                        
                                        JToken processServerIdValue = providerSpecificDetailsValue["processServerId"];
                                        if (processServerIdValue != null && processServerIdValue.Type != JTokenType.Null)
                                        {
                                            string processServerIdInstance = ((string)processServerIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ProcessServerId = processServerIdInstance;
                                        }
                                        
                                        JToken multiVmGroupIdValue = providerSpecificDetailsValue["multiVmGroupId"];
                                        if (multiVmGroupIdValue != null && multiVmGroupIdValue.Type != JTokenType.Null)
                                        {
                                            string multiVmGroupIdInstance = ((string)multiVmGroupIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MultiVmGroupId = multiVmGroupIdInstance;
                                        }
                                        
                                        JToken multiVmGroupNameValue = providerSpecificDetailsValue["multiVmGroupName"];
                                        if (multiVmGroupNameValue != null && multiVmGroupNameValue.Type != JTokenType.Null)
                                        {
                                            string multiVmGroupNameInstance = ((string)multiVmGroupNameValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MultiVmGroupName = multiVmGroupNameInstance;
                                        }
                                        
                                        JToken protectedVolumesArray = providerSpecificDetailsValue["protectedVolumes"];
                                        if (protectedVolumesArray != null && protectedVolumesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken protectedVolumesValue in ((JArray)protectedVolumesArray))
                                            {
                                                VMwareAzureV2ProtectedVolumeDetails vMwareAzureV2ProtectedVolumeDetailsInstance = new VMwareAzureV2ProtectedVolumeDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.ProtectedVolumes.Add(vMwareAzureV2ProtectedVolumeDetailsInstance);
                                                
                                                JToken nameValue = protectedVolumesValue["name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.Name = nameInstance;
                                                }
                                                
                                                JToken protectionStageValue2 = protectedVolumesValue["protectionStage"];
                                                if (protectionStageValue2 != null && protectionStageValue2.Type != JTokenType.Null)
                                                {
                                                    string protectionStageInstance2 = ((string)protectionStageValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ProtectionStage = protectionStageInstance2;
                                                }
                                                
                                                JToken healthErrorCodeValue2 = protectedVolumesValue["healthErrorCode"];
                                                if (healthErrorCodeValue2 != null && healthErrorCodeValue2.Type != JTokenType.Null)
                                                {
                                                    string healthErrorCodeInstance2 = ((string)healthErrorCodeValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.HealthErrorCode = healthErrorCodeInstance2;
                                                }
                                                
                                                JToken rpoInSecondsValue2 = protectedVolumesValue["rpoInSeconds"];
                                                if (rpoInSecondsValue2 != null && rpoInSecondsValue2.Type != JTokenType.Null)
                                                {
                                                    long rpoInSecondsInstance2 = ((long)rpoInSecondsValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.RpoInSeconds = rpoInSecondsInstance2;
                                                }
                                                
                                                JToken resyncRequiredValue2 = protectedVolumesValue["resyncRequired"];
                                                if (resyncRequiredValue2 != null && resyncRequiredValue2.Type != JTokenType.Null)
                                                {
                                                    bool resyncRequiredInstance2 = ((bool)resyncRequiredValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncRequired = resyncRequiredInstance2;
                                                }
                                                
                                                JToken resyncProgressPercentageValue2 = protectedVolumesValue["resyncProgressPercentage"];
                                                if (resyncProgressPercentageValue2 != null && resyncProgressPercentageValue2.Type != JTokenType.Null)
                                                {
                                                    int resyncProgressPercentageInstance2 = ((int)resyncProgressPercentageValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncProgressPercentage = resyncProgressPercentageInstance2;
                                                }
                                                
                                                JToken resyncDurationInSecondsValue = protectedVolumesValue["resyncDurationInSeconds"];
                                                if (resyncDurationInSecondsValue != null && resyncDurationInSecondsValue.Type != JTokenType.Null)
                                                {
                                                    long resyncDurationInSecondsInstance = ((long)resyncDurationInSecondsValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncDurationInSeconds = resyncDurationInSecondsInstance;
                                                }
                                                
                                                JToken volumeCapacityInBytesValue = protectedVolumesValue["volumeCapacityInBytes"];
                                                if (volumeCapacityInBytesValue != null && volumeCapacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long volumeCapacityInBytesInstance = ((long)volumeCapacityInBytesValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.VolumeCapacityInBytes = volumeCapacityInBytesInstance;
                                                }
                                                
                                                JToken fileSystemCapacityInBytesValue = protectedVolumesValue["fileSystemCapacityInBytes"];
                                                if (fileSystemCapacityInBytesValue != null && fileSystemCapacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long fileSystemCapacityInBytesInstance = ((long)fileSystemCapacityInBytesValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.FileSystemCapacityInBytes = fileSystemCapacityInBytesInstance;
                                                }
                                                
                                                JToken sourceDataInMBValue = protectedVolumesValue["sourceDataInMB"];
                                                if (sourceDataInMBValue != null && sourceDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double sourceDataInMBInstance = ((double)sourceDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.SourceDataInMB = sourceDataInMBInstance;
                                                }
                                                
                                                JToken psDataInMBValue = protectedVolumesValue["psDataInMB"];
                                                if (psDataInMBValue != null && psDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double psDataInMBInstance = ((double)psDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.PSDataInMB = psDataInMBInstance;
                                                }
                                                
                                                JToken targetDataInMBValue = protectedVolumesValue["targetDataInMB"];
                                                if (targetDataInMBValue != null && targetDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double targetDataInMBInstance = ((double)targetDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.TargetDataInMB = targetDataInMBInstance;
                                                }
                                                
                                                JToken volumeResizedValue = protectedVolumesValue["volumeResized"];
                                                if (volumeResizedValue != null && volumeResizedValue.Type != JTokenType.Null)
                                                {
                                                    bool volumeResizedInstance = ((bool)volumeResizedValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.VolumeResized = volumeResizedInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken volumeResizedValue2 = providerSpecificDetailsValue["volumeResized"];
                                        if (volumeResizedValue2 != null && volumeResizedValue2.Type != JTokenType.Null)
                                        {
                                            bool volumeResizedInstance2 = ((bool)volumeResizedValue2);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VolumeResized = volumeResizedInstance2;
                                        }
                                        
                                        JToken masterTargetIdValue = providerSpecificDetailsValue["masterTargetId"];
                                        if (masterTargetIdValue != null && masterTargetIdValue.Type != JTokenType.Null)
                                        {
                                            string masterTargetIdInstance = ((string)masterTargetIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MasterTargetId = masterTargetIdInstance;
                                        }
                                        
                                        JToken sourceVmCPUCountValue = providerSpecificDetailsValue["sourceVmCPUCount"];
                                        if (sourceVmCPUCountValue != null && sourceVmCPUCountValue.Type != JTokenType.Null)
                                        {
                                            int sourceVmCPUCountInstance = ((int)sourceVmCPUCountValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SourceVmCPUCount = sourceVmCPUCountInstance;
                                        }
                                        
                                        JToken sourceVmRAMSizeInMBValue = providerSpecificDetailsValue["sourceVmRAMSizeInMB"];
                                        if (sourceVmRAMSizeInMBValue != null && sourceVmRAMSizeInMBValue.Type != JTokenType.Null)
                                        {
                                            int sourceVmRAMSizeInMBInstance = ((int)sourceVmRAMSizeInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SourceVmRAMSizeInMB = sourceVmRAMSizeInMBInstance;
                                        }
                                        
                                        JToken osTypeValue = providerSpecificDetailsValue["osType"];
                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance = ((string)osTypeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.OSType = osTypeInstance;
                                        }
                                        
                                        JToken vhdNameValue3 = providerSpecificDetailsValue["vhdName"];
                                        if (vhdNameValue3 != null && vhdNameValue3.Type != JTokenType.Null)
                                        {
                                            string vhdNameInstance3 = ((string)vhdNameValue3);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VHDName = vhdNameInstance3;
                                        }
                                        
                                        JToken osDiskIdValue = providerSpecificDetailsValue["osDiskId"];
                                        if (osDiskIdValue != null && osDiskIdValue.Type != JTokenType.Null)
                                        {
                                            string osDiskIdInstance = ((string)osDiskIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.OSDiskId = osDiskIdInstance;
                                        }
                                        
                                        JToken azureVMDiskDetailsArray = providerSpecificDetailsValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsArray != null && azureVMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken azureVMDiskDetailsValue in ((JArray)azureVMDiskDetailsArray))
                                            {
                                                AzureVmDiskDetails azureVmDiskDetailsInstance = new AzureVmDiskDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.AzureVMDiskDetails.Add(azureVmDiskDetailsInstance);
                                                
                                                JToken vhdTypeValue3 = azureVMDiskDetailsValue["vhdType"];
                                                if (vhdTypeValue3 != null && vhdTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance3 = ((string)vhdTypeValue3);
                                                    azureVmDiskDetailsInstance.VhdType = vhdTypeInstance3;
                                                }
                                                
                                                JToken vhdIdValue3 = azureVMDiskDetailsValue["vhdId"];
                                                if (vhdIdValue3 != null && vhdIdValue3.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance3 = ((string)vhdIdValue3);
                                                    azureVmDiskDetailsInstance.VhdId = vhdIdInstance3;
                                                }
                                                
                                                JToken vhdNameValue4 = azureVMDiskDetailsValue["vhdName"];
                                                if (vhdNameValue4 != null && vhdNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance4 = ((string)vhdNameValue4);
                                                    azureVmDiskDetailsInstance.VhdName = vhdNameInstance4;
                                                }
                                                
                                                JToken maxSizeMBValue3 = azureVMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue3 != null && maxSizeMBValue3.Type != JTokenType.Null)
                                                {
                                                    string maxSizeMBInstance3 = ((string)maxSizeMBValue3);
                                                    azureVmDiskDetailsInstance.MaxSizeMB = maxSizeMBInstance3;
                                                }
                                                
                                                JToken targetDiskLocationValue = azureVMDiskDetailsValue["targetDiskLocation"];
                                                if (targetDiskLocationValue != null && targetDiskLocationValue.Type != JTokenType.Null)
                                                {
                                                    string targetDiskLocationInstance = ((string)targetDiskLocationValue);
                                                    azureVmDiskDetailsInstance.TargetDiskLocation = targetDiskLocationInstance;
                                                }
                                                
                                                JToken lunIdValue = azureVMDiskDetailsValue["lunId"];
                                                if (lunIdValue != null && lunIdValue.Type != JTokenType.Null)
                                                {
                                                    string lunIdInstance = ((string)lunIdValue);
                                                    azureVmDiskDetailsInstance.LunId = lunIdInstance;
                                                }
                                                
                                                JToken targetDiskNameValue = azureVMDiskDetailsValue["targetDiskName"];
                                                if (targetDiskNameValue != null && targetDiskNameValue.Type != JTokenType.Null)
                                                {
                                                    string targetDiskNameInstance = ((string)targetDiskNameValue);
                                                    azureVmDiskDetailsInstance.TargetDiskName = targetDiskNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue = providerSpecificDetailsValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue != null && recoveryAzureVMNameValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance = ((string)recoveryAzureVMNameValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue = providerSpecificDetailsValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue != null && recoveryAzureVMSizeValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance = ((string)recoveryAzureVMSizeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance;
                                        }
                                        
                                        JToken recoveryAzureStorageAccountValue = providerSpecificDetailsValue["recoveryAzureStorageAccount"];
                                        if (recoveryAzureStorageAccountValue != null && recoveryAzureStorageAccountValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureStorageAccountInstance = ((string)recoveryAzureStorageAccountValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureStorageAccount = recoveryAzureStorageAccountInstance;
                                        }
                                        
                                        JToken vmNicsArray3 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray3 != null && vmNicsArray3.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue3 in ((JArray)vmNicsArray3))
                                            {
                                                VMNicDetails vMNicDetailsInstance3 = new VMNicDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.VMNics.Add(vMNicDetailsInstance3);
                                                
                                                JToken nicIdValue3 = vmNicsValue3["nicId"];
                                                if (nicIdValue3 != null && nicIdValue3.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance3 = ((string)nicIdValue3);
                                                    vMNicDetailsInstance3.NicId = nicIdInstance3;
                                                }
                                                
                                                JToken vMSubnetNameValue3 = vmNicsValue3["vMSubnetName"];
                                                if (vMSubnetNameValue3 != null && vMSubnetNameValue3.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance3 = ((string)vMSubnetNameValue3);
                                                    vMNicDetailsInstance3.VMSubnetName = vMSubnetNameInstance3;
                                                }
                                                
                                                JToken vMNetworkNameValue3 = vmNicsValue3["vMNetworkName"];
                                                if (vMNetworkNameValue3 != null && vMNetworkNameValue3.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance3 = ((string)vMNetworkNameValue3);
                                                    vMNicDetailsInstance3.VMNetworkName = vMNetworkNameInstance3;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue3 = vmNicsValue3["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue3 != null && recoveryVMNetworkIdValue3.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance3 = ((string)recoveryVMNetworkIdValue3);
                                                    vMNicDetailsInstance3.RecoveryVMNetworkId = recoveryVMNetworkIdInstance3;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue3 = vmNicsValue3["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue3 != null && recoveryVMSubnetNameValue3.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance3 = ((string)recoveryVMSubnetNameValue3);
                                                    vMNicDetailsInstance3.RecoveryVMSubnetName = recoveryVMSubnetNameInstance3;
                                                }
                                                
                                                JToken ipAddressTypeValue3 = vmNicsValue3["ipAddressType"];
                                                if (ipAddressTypeValue3 != null && ipAddressTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance3 = ((string)ipAddressTypeValue3);
                                                    vMNicDetailsInstance3.IpAddressType = ipAddressTypeInstance3;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue3 = vmNicsValue3["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue3 != null && replicaNicStaticIPAddressValue3.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance3 = ((string)replicaNicStaticIPAddressValue3);
                                                    vMNicDetailsInstance3.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance3;
                                                }
                                                
                                                JToken selectionTypeValue3 = vmNicsValue3["selectionType"];
                                                if (selectionTypeValue3 != null && selectionTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance3 = ((string)selectionTypeValue3);
                                                    vMNicDetailsInstance3.SelectionType = selectionTypeInstance3;
                                                }
                                            }
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue = providerSpecificDetailsValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue != null && selectedRecoveryAzureNetworkIdValue.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance = ((string)selectedRecoveryAzureNetworkIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance;
                                        }
                                        
                                        JToken discoveryTypeValue = providerSpecificDetailsValue["discoveryType"];
                                        if (discoveryTypeValue != null && discoveryTypeValue.Type != JTokenType.Null)
                                        {
                                            string discoveryTypeInstance = ((string)discoveryTypeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.DiscoveryType = discoveryTypeInstance;
                                        }
                                        
                                        JToken instanceTypeValue3 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.InstanceType = instanceTypeInstance3;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = vMwareAzureV2ProviderSpecificSettingsInstance;
                                    }
                                    if (typeName == "HyperVReplicaAzure")
                                    {
                                        HyperVReplicaAzureReplicationDetails hyperVReplicaAzureReplicationDetailsInstance = new HyperVReplicaAzureReplicationDetails();
                                        
                                        JToken azureVMDiskDetailsArray2 = providerSpecificDetailsValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsArray2 != null && azureVMDiskDetailsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken azureVMDiskDetailsValue2 in ((JArray)azureVMDiskDetailsArray2))
                                            {
                                                AzureVmDiskDetails azureVmDiskDetailsInstance2 = new AzureVmDiskDetails();
                                                hyperVReplicaAzureReplicationDetailsInstance.AzureVMDiskDetails.Add(azureVmDiskDetailsInstance2);
                                                
                                                JToken vhdTypeValue4 = azureVMDiskDetailsValue2["vhdType"];
                                                if (vhdTypeValue4 != null && vhdTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance4 = ((string)vhdTypeValue4);
                                                    azureVmDiskDetailsInstance2.VhdType = vhdTypeInstance4;
                                                }
                                                
                                                JToken vhdIdValue4 = azureVMDiskDetailsValue2["vhdId"];
                                                if (vhdIdValue4 != null && vhdIdValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance4 = ((string)vhdIdValue4);
                                                    azureVmDiskDetailsInstance2.VhdId = vhdIdInstance4;
                                                }
                                                
                                                JToken vhdNameValue5 = azureVMDiskDetailsValue2["vhdName"];
                                                if (vhdNameValue5 != null && vhdNameValue5.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance5 = ((string)vhdNameValue5);
                                                    azureVmDiskDetailsInstance2.VhdName = vhdNameInstance5;
                                                }
                                                
                                                JToken maxSizeMBValue4 = azureVMDiskDetailsValue2["maxSizeMB"];
                                                if (maxSizeMBValue4 != null && maxSizeMBValue4.Type != JTokenType.Null)
                                                {
                                                    string maxSizeMBInstance4 = ((string)maxSizeMBValue4);
                                                    azureVmDiskDetailsInstance2.MaxSizeMB = maxSizeMBInstance4;
                                                }
                                                
                                                JToken targetDiskLocationValue2 = azureVMDiskDetailsValue2["targetDiskLocation"];
                                                if (targetDiskLocationValue2 != null && targetDiskLocationValue2.Type != JTokenType.Null)
                                                {
                                                    string targetDiskLocationInstance2 = ((string)targetDiskLocationValue2);
                                                    azureVmDiskDetailsInstance2.TargetDiskLocation = targetDiskLocationInstance2;
                                                }
                                                
                                                JToken lunIdValue2 = azureVMDiskDetailsValue2["lunId"];
                                                if (lunIdValue2 != null && lunIdValue2.Type != JTokenType.Null)
                                                {
                                                    string lunIdInstance2 = ((string)lunIdValue2);
                                                    azureVmDiskDetailsInstance2.LunId = lunIdInstance2;
                                                }
                                                
                                                JToken targetDiskNameValue2 = azureVMDiskDetailsValue2["targetDiskName"];
                                                if (targetDiskNameValue2 != null && targetDiskNameValue2.Type != JTokenType.Null)
                                                {
                                                    string targetDiskNameInstance2 = ((string)targetDiskNameValue2);
                                                    azureVmDiskDetailsInstance2.TargetDiskName = targetDiskNameInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue2 = providerSpecificDetailsValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue2 != null && recoveryAzureVMNameValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance2 = ((string)recoveryAzureVMNameValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance2;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue2 = providerSpecificDetailsValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue2 != null && recoveryAzureVMSizeValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance2 = ((string)recoveryAzureVMSizeValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance2;
                                        }
                                        
                                        JToken recoveryAzureStorageAccountValue2 = providerSpecificDetailsValue["recoveryAzureStorageAccount"];
                                        if (recoveryAzureStorageAccountValue2 != null && recoveryAzureStorageAccountValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureStorageAccountInstance2 = ((string)recoveryAzureStorageAccountValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureStorageAccount = recoveryAzureStorageAccountInstance2;
                                        }
                                        
                                        JToken lastReplicatedTimeValue3 = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue3 != null && lastReplicatedTimeValue3.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance3 = ((string)lastReplicatedTimeValue3);
                                            hyperVReplicaAzureReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance3;
                                        }
                                        
                                        JToken initialReplicationDetailsValue3 = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue3 != null && initialReplicationDetailsValue3.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance3 = new InitialReplicationDetails();
                                            hyperVReplicaAzureReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance3;
                                            
                                            JToken initialReplicationTypeValue3 = initialReplicationDetailsValue3["initialReplicationType"];
                                            if (initialReplicationTypeValue3 != null && initialReplicationTypeValue3.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance3 = ((string)initialReplicationTypeValue3);
                                                initialReplicationDetailsInstance3.InitialReplicationType = initialReplicationTypeInstance3;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue3 = initialReplicationDetailsValue3["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue3 != null && initialReplicationProgressPercentageValue3.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance3 = ((string)initialReplicationProgressPercentageValue3);
                                                initialReplicationDetailsInstance3.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance3;
                                            }
                                        }
                                        
                                        JToken vmNicsArray4 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray4 != null && vmNicsArray4.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue4 in ((JArray)vmNicsArray4))
                                            {
                                                VMNicDetails vMNicDetailsInstance4 = new VMNicDetails();
                                                hyperVReplicaAzureReplicationDetailsInstance.VMNics.Add(vMNicDetailsInstance4);
                                                
                                                JToken nicIdValue4 = vmNicsValue4["nicId"];
                                                if (nicIdValue4 != null && nicIdValue4.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance4 = ((string)nicIdValue4);
                                                    vMNicDetailsInstance4.NicId = nicIdInstance4;
                                                }
                                                
                                                JToken vMSubnetNameValue4 = vmNicsValue4["vMSubnetName"];
                                                if (vMSubnetNameValue4 != null && vMSubnetNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance4 = ((string)vMSubnetNameValue4);
                                                    vMNicDetailsInstance4.VMSubnetName = vMSubnetNameInstance4;
                                                }
                                                
                                                JToken vMNetworkNameValue4 = vmNicsValue4["vMNetworkName"];
                                                if (vMNetworkNameValue4 != null && vMNetworkNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance4 = ((string)vMNetworkNameValue4);
                                                    vMNicDetailsInstance4.VMNetworkName = vMNetworkNameInstance4;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue4 = vmNicsValue4["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue4 != null && recoveryVMNetworkIdValue4.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance4 = ((string)recoveryVMNetworkIdValue4);
                                                    vMNicDetailsInstance4.RecoveryVMNetworkId = recoveryVMNetworkIdInstance4;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue4 = vmNicsValue4["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue4 != null && recoveryVMSubnetNameValue4.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance4 = ((string)recoveryVMSubnetNameValue4);
                                                    vMNicDetailsInstance4.RecoveryVMSubnetName = recoveryVMSubnetNameInstance4;
                                                }
                                                
                                                JToken ipAddressTypeValue4 = vmNicsValue4["ipAddressType"];
                                                if (ipAddressTypeValue4 != null && ipAddressTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance4 = ((string)ipAddressTypeValue4);
                                                    vMNicDetailsInstance4.IpAddressType = ipAddressTypeInstance4;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue4 = vmNicsValue4["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue4 != null && replicaNicStaticIPAddressValue4.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance4 = ((string)replicaNicStaticIPAddressValue4);
                                                    vMNicDetailsInstance4.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance4;
                                                }
                                                
                                                JToken selectionTypeValue4 = vmNicsValue4["selectionType"];
                                                if (selectionTypeValue4 != null && selectionTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance4 = ((string)selectionTypeValue4);
                                                    vMNicDetailsInstance4.SelectionType = selectionTypeInstance4;
                                                }
                                            }
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue2 = providerSpecificDetailsValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue2 != null && selectedRecoveryAzureNetworkIdValue2.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance2 = ((string)selectedRecoveryAzureNetworkIdValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance2;
                                        }
                                        
                                        JToken encryptionValue = providerSpecificDetailsValue["encryption"];
                                        if (encryptionValue != null && encryptionValue.Type != JTokenType.Null)
                                        {
                                            string encryptionInstance = ((string)encryptionValue);
                                            hyperVReplicaAzureReplicationDetailsInstance.Encryption = encryptionInstance;
                                        }
                                        
                                        JToken oSDetailsValue = providerSpecificDetailsValue["oSDetails"];
                                        if (oSDetailsValue != null && oSDetailsValue.Type != JTokenType.Null)
                                        {
                                            OSDetails oSDetailsInstance = new OSDetails();
                                            hyperVReplicaAzureReplicationDetailsInstance.OSDetails = oSDetailsInstance;
                                            
                                            JToken osTypeValue2 = oSDetailsValue["osType"];
                                            if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                            {
                                                string osTypeInstance2 = ((string)osTypeValue2);
                                                oSDetailsInstance.OsType = osTypeInstance2;
                                            }
                                            
                                            JToken productTypeValue = oSDetailsValue["productType"];
                                            if (productTypeValue != null && productTypeValue.Type != JTokenType.Null)
                                            {
                                                string productTypeInstance = ((string)productTypeValue);
                                                oSDetailsInstance.ProductType = productTypeInstance;
                                            }
                                            
                                            JToken osEditionValue = oSDetailsValue["osEdition"];
                                            if (osEditionValue != null && osEditionValue.Type != JTokenType.Null)
                                            {
                                                string osEditionInstance = ((string)osEditionValue);
                                                oSDetailsInstance.OSEdition = osEditionInstance;
                                            }
                                            
                                            JToken oSVersionValue = oSDetailsValue["oSVersion"];
                                            if (oSVersionValue != null && oSVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSVersionInstance = ((string)oSVersionValue);
                                                oSDetailsInstance.OSVersion = oSVersionInstance;
                                            }
                                            
                                            JToken oSMajorVersionValue = oSDetailsValue["oSMajorVersion"];
                                            if (oSMajorVersionValue != null && oSMajorVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSMajorVersionInstance = ((string)oSMajorVersionValue);
                                                oSDetailsInstance.OSMajorVersion = oSMajorVersionInstance;
                                            }
                                            
                                            JToken oSMinorVersionValue = oSDetailsValue["oSMinorVersion"];
                                            if (oSMinorVersionValue != null && oSMinorVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSMinorVersionInstance = ((string)oSMinorVersionValue);
                                                oSDetailsInstance.OSMinorVersion = oSMinorVersionInstance;
                                            }
                                        }
                                        
                                        JToken sourceVmRAMSizeInMBValue2 = providerSpecificDetailsValue["sourceVmRAMSizeInMB"];
                                        if (sourceVmRAMSizeInMBValue2 != null && sourceVmRAMSizeInMBValue2.Type != JTokenType.Null)
                                        {
                                            int sourceVmRAMSizeInMBInstance2 = ((int)sourceVmRAMSizeInMBValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SourceVmRAMSizeInMB = sourceVmRAMSizeInMBInstance2;
                                        }
                                        
                                        JToken sourceVmCPUCountValue2 = providerSpecificDetailsValue["sourceVmCPUCount"];
                                        if (sourceVmCPUCountValue2 != null && sourceVmCPUCountValue2.Type != JTokenType.Null)
                                        {
                                            int sourceVmCPUCountInstance2 = ((int)sourceVmCPUCountValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SourceVmCPUCount = sourceVmCPUCountInstance2;
                                        }
                                        
                                        JToken instanceTypeValue4 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue4 != null && instanceTypeValue4.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance4 = ((string)instanceTypeValue4);
                                            hyperVReplicaAzureReplicationDetailsInstance.InstanceType = instanceTypeInstance4;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplicaAzureReplicationDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                replicationProtectedItemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                replicationProtectedItemInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                replicationProtectedItemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                replicationProtectedItemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    replicationProtectedItemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Service response for replication protected items operation.
        /// </returns>
        public async Task<ReplicationProtectedItemOperationResponse> GetUpdateProtectionStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetUpdateProtectionStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ReplicationProtectedItemOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ReplicationProtectedItemOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ReplicationProtectedItem replicationProtectedItemInstance = new ReplicationProtectedItem();
                            result.ReplicationProtectedItem = replicationProtectedItemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ReplicationProtectedItemProperties propertiesInstance = new ReplicationProtectedItemProperties();
                                replicationProtectedItemInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken protectedItemTypeValue = propertiesValue["protectedItemType"];
                                if (protectedItemTypeValue != null && protectedItemTypeValue.Type != JTokenType.Null)
                                {
                                    string protectedItemTypeInstance = ((string)protectedItemTypeValue);
                                    propertiesInstance.ProtectedItemType = protectedItemTypeInstance;
                                }
                                
                                JToken protectableItemIdValue = propertiesValue["protectableItemId"];
                                if (protectableItemIdValue != null && protectableItemIdValue.Type != JTokenType.Null)
                                {
                                    string protectableItemIdInstance = ((string)protectableItemIdValue);
                                    propertiesInstance.ProtectableItemId = protectableItemIdInstance;
                                }
                                
                                JToken recoveryServicesProviderIdValue = propertiesValue["recoveryServicesProviderId"];
                                if (recoveryServicesProviderIdValue != null && recoveryServicesProviderIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryServicesProviderIdInstance = ((string)recoveryServicesProviderIdValue);
                                    propertiesInstance.RecoveryServicesProviderId = recoveryServicesProviderIdInstance;
                                }
                                
                                JToken primaryFabricFriendlyNameValue = propertiesValue["primaryFabricFriendlyName"];
                                if (primaryFabricFriendlyNameValue != null && primaryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricFriendlyNameInstance = ((string)primaryFabricFriendlyNameValue);
                                    propertiesInstance.PrimaryFabricFriendlyName = primaryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricFriendlyNameValue = propertiesValue["recoveryFabricFriendlyName"];
                                if (recoveryFabricFriendlyNameValue != null && recoveryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricFriendlyNameInstance = ((string)recoveryFabricFriendlyNameValue);
                                    propertiesInstance.RecoveryFabricFriendlyName = recoveryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricIdValue = propertiesValue["recoveryFabricId"];
                                if (recoveryFabricIdValue != null && recoveryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricIdInstance = ((string)recoveryFabricIdValue);
                                    propertiesInstance.RecoveryFabricId = recoveryFabricIdInstance;
                                }
                                
                                JToken primaryProtectionContainerFriendlyNameValue = propertiesValue["primaryProtectionContainerFriendlyName"];
                                if (primaryProtectionContainerFriendlyNameValue != null && primaryProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryProtectionContainerFriendlyNameInstance = ((string)primaryProtectionContainerFriendlyNameValue);
                                    propertiesInstance.PrimaryProtectionContainerFriendlyName = primaryProtectionContainerFriendlyNameInstance;
                                }
                                
                                JToken recoveryProtectionContainerFriendlyNameValue = propertiesValue["recoveryProtectionContainerFriendlyName"];
                                if (recoveryProtectionContainerFriendlyNameValue != null && recoveryProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryProtectionContainerFriendlyNameInstance = ((string)recoveryProtectionContainerFriendlyNameValue);
                                    propertiesInstance.RecoveryProtectionContainerFriendlyName = recoveryProtectionContainerFriendlyNameInstance;
                                }
                                
                                JToken protectionStateValue = propertiesValue["protectionState"];
                                if (protectionStateValue != null && protectionStateValue.Type != JTokenType.Null)
                                {
                                    string protectionStateInstance = ((string)protectionStateValue);
                                    propertiesInstance.ProtectionState = protectionStateInstance;
                                }
                                
                                JToken protectionStateDescriptionValue = propertiesValue["protectionStateDescription"];
                                if (protectionStateDescriptionValue != null && protectionStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string protectionStateDescriptionInstance = ((string)protectionStateDescriptionValue);
                                    propertiesInstance.ProtectionStateDescription = protectionStateDescriptionInstance;
                                }
                                
                                JToken activeLocationValue = propertiesValue["activeLocation"];
                                if (activeLocationValue != null && activeLocationValue.Type != JTokenType.Null)
                                {
                                    string activeLocationInstance = ((string)activeLocationValue);
                                    propertiesInstance.ActiveLocation = activeLocationInstance;
                                }
                                
                                JToken testFailoverStateValue = propertiesValue["testFailoverState"];
                                if (testFailoverStateValue != null && testFailoverStateValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateInstance = ((string)testFailoverStateValue);
                                    propertiesInstance.TestFailoverState = testFailoverStateInstance;
                                }
                                
                                JToken testFailoverStateDescriptionValue = propertiesValue["testFailoverStateDescription"];
                                if (testFailoverStateDescriptionValue != null && testFailoverStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateDescriptionInstance = ((string)testFailoverStateDescriptionValue);
                                    propertiesInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                    }
                                }
                                
                                JToken replicationHealthValue = propertiesValue["replicationHealth"];
                                if (replicationHealthValue != null && replicationHealthValue.Type != JTokenType.Null)
                                {
                                    string replicationHealthInstance = ((string)replicationHealthValue);
                                    propertiesInstance.ReplicationHealth = replicationHealthInstance;
                                }
                                
                                JToken replicationHealthErrorsArray = propertiesValue["replicationHealthErrors"];
                                if (replicationHealthErrorsArray != null && replicationHealthErrorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken replicationHealthErrorsValue in ((JArray)replicationHealthErrorsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.ReplicationHealthErrors.Add(healthErrorInstance);
                                        
                                        JToken errorLevelValue = replicationHealthErrorsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCodeValue = replicationHealthErrorsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = replicationHealthErrorsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = replicationHealthErrorsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = replicationHealthErrorsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = replicationHealthErrorsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            string creationTimeUtcInstance = ((string)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = replicationHealthErrorsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = replicationHealthErrorsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                    }
                                }
                                
                                JToken policyIdValue = propertiesValue["policyId"];
                                if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                {
                                    string policyIdInstance = ((string)policyIdValue);
                                    propertiesInstance.PolicyID = policyIdInstance;
                                }
                                
                                JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                    propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                }
                                
                                JToken lastSuccessfulFailoverTimeValue = propertiesValue["lastSuccessfulFailoverTime"];
                                if (lastSuccessfulFailoverTimeValue != null && lastSuccessfulFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSuccessfulFailoverTimeInstance = ((DateTime)lastSuccessfulFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulFailoverTime = lastSuccessfulFailoverTimeInstance;
                                }
                                
                                JToken lastSuccessfulTestFailoverTimeValue = propertiesValue["lastSuccessfulTestFailoverTime"];
                                if (lastSuccessfulTestFailoverTimeValue != null && lastSuccessfulTestFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSuccessfulTestFailoverTimeInstance = ((DateTime)lastSuccessfulTestFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulTestFailoverTime = lastSuccessfulTestFailoverTimeInstance;
                                }
                                
                                JToken currentScenarioValue = propertiesValue["currentScenario"];
                                if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                {
                                    CurrentScenarioDetails currentScenarioInstance = new CurrentScenarioDetails();
                                    propertiesInstance.CurrentScenario = currentScenarioInstance;
                                    
                                    JToken scenarioNameValue = currentScenarioValue["scenarioName"];
                                    if (scenarioNameValue != null && scenarioNameValue.Type != JTokenType.Null)
                                    {
                                        string scenarioNameInstance = ((string)scenarioNameValue);
                                        currentScenarioInstance.ScenarioName = scenarioNameInstance;
                                    }
                                    
                                    JToken jobIdValue = currentScenarioValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        currentScenarioInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken startTimeValue = currentScenarioValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        currentScenarioInstance.StartTime = startTimeInstance;
                                    }
                                }
                                
                                JToken failoverRecoveryPointIdValue = propertiesValue["failoverRecoveryPointId"];
                                if (failoverRecoveryPointIdValue != null && failoverRecoveryPointIdValue.Type != JTokenType.Null)
                                {
                                    string failoverRecoveryPointIdInstance = ((string)failoverRecoveryPointIdValue);
                                    propertiesInstance.FailoverRecoveryPointId = failoverRecoveryPointIdInstance;
                                }
                                
                                JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                    if (typeName == "HyperVReplica2012")
                                    {
                                        HyperVReplica2012ReplicationDetails hyperVReplica2012ReplicationDetailsInstance = new HyperVReplica2012ReplicationDetails();
                                        
                                        JToken lastReplicatedTimeValue = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue != null && lastReplicatedTimeValue.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance = ((string)lastReplicatedTimeValue);
                                            hyperVReplica2012ReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance;
                                        }
                                        
                                        JToken vmNicsArray = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray != null && vmNicsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue in ((JArray)vmNicsArray))
                                            {
                                                VMNicDetails vMNicDetailsInstance = new VMNicDetails();
                                                hyperVReplica2012ReplicationDetailsInstance.VmNics.Add(vMNicDetailsInstance);
                                                
                                                JToken nicIdValue = vmNicsValue["nicId"];
                                                if (nicIdValue != null && nicIdValue.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance = ((string)nicIdValue);
                                                    vMNicDetailsInstance.NicId = nicIdInstance;
                                                }
                                                
                                                JToken vMSubnetNameValue = vmNicsValue["vMSubnetName"];
                                                if (vMSubnetNameValue != null && vMSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance = ((string)vMSubnetNameValue);
                                                    vMNicDetailsInstance.VMSubnetName = vMSubnetNameInstance;
                                                }
                                                
                                                JToken vMNetworkNameValue = vmNicsValue["vMNetworkName"];
                                                if (vMNetworkNameValue != null && vMNetworkNameValue.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance = ((string)vMNetworkNameValue);
                                                    vMNicDetailsInstance.VMNetworkName = vMNetworkNameInstance;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue = vmNicsValue["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue != null && recoveryVMNetworkIdValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance = ((string)recoveryVMNetworkIdValue);
                                                    vMNicDetailsInstance.RecoveryVMNetworkId = recoveryVMNetworkIdInstance;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue = vmNicsValue["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue != null && recoveryVMSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance = ((string)recoveryVMSubnetNameValue);
                                                    vMNicDetailsInstance.RecoveryVMSubnetName = recoveryVMSubnetNameInstance;
                                                }
                                                
                                                JToken ipAddressTypeValue = vmNicsValue["ipAddressType"];
                                                if (ipAddressTypeValue != null && ipAddressTypeValue.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance = ((string)ipAddressTypeValue);
                                                    vMNicDetailsInstance.IpAddressType = ipAddressTypeInstance;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue = vmNicsValue["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue != null && replicaNicStaticIPAddressValue.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance = ((string)replicaNicStaticIPAddressValue);
                                                    vMNicDetailsInstance.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance;
                                                }
                                                
                                                JToken selectionTypeValue = vmNicsValue["selectionType"];
                                                if (selectionTypeValue != null && selectionTypeValue.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance = ((string)selectionTypeValue);
                                                    vMNicDetailsInstance.SelectionType = selectionTypeInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken initialReplicationDetailsValue = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue != null && initialReplicationDetailsValue.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance = new InitialReplicationDetails();
                                            hyperVReplica2012ReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance;
                                            
                                            JToken initialReplicationTypeValue = initialReplicationDetailsValue["initialReplicationType"];
                                            if (initialReplicationTypeValue != null && initialReplicationTypeValue.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance = ((string)initialReplicationTypeValue);
                                                initialReplicationDetailsInstance.InitialReplicationType = initialReplicationTypeInstance;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue = initialReplicationDetailsValue["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue != null && initialReplicationProgressPercentageValue.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance = ((string)initialReplicationProgressPercentageValue);
                                                initialReplicationDetailsInstance.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance;
                                            }
                                        }
                                        
                                        JToken vMDiskDetailsArray = providerSpecificDetailsValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray != null && vMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue in ((JArray)vMDiskDetailsArray))
                                            {
                                                DiskDetails diskDetailsInstance = new DiskDetails();
                                                hyperVReplica2012ReplicationDetailsInstance.VMDiskDetails.Add(diskDetailsInstance);
                                                
                                                JToken maxSizeMBValue = vMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue != null && maxSizeMBValue.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance = ((ulong)maxSizeMBValue);
                                                    diskDetailsInstance.MaxSizeMB = maxSizeMBInstance;
                                                }
                                                
                                                JToken vhdTypeValue = vMDiskDetailsValue["vhdType"];
                                                if (vhdTypeValue != null && vhdTypeValue.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance = ((string)vhdTypeValue);
                                                    diskDetailsInstance.VhdType = vhdTypeInstance;
                                                }
                                                
                                                JToken vhdIdValue = vMDiskDetailsValue["vhdId"];
                                                if (vhdIdValue != null && vhdIdValue.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance = ((string)vhdIdValue);
                                                    diskDetailsInstance.VhdId = vhdIdInstance;
                                                }
                                                
                                                JToken vhdNameValue = vMDiskDetailsValue["vhdName"];
                                                if (vhdNameValue != null && vhdNameValue.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance = ((string)vhdNameValue);
                                                    diskDetailsInstance.VhdName = vhdNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            hyperVReplica2012ReplicationDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplica2012ReplicationDetailsInstance;
                                    }
                                    if (typeName == "HyperVReplica2012R2")
                                    {
                                        HyperVReplica2012R2ReplicationDetails hyperVReplica2012R2ReplicationDetailsInstance = new HyperVReplica2012R2ReplicationDetails();
                                        
                                        JToken lastReplicatedTimeValue2 = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue2 != null && lastReplicatedTimeValue2.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance2 = ((string)lastReplicatedTimeValue2);
                                            hyperVReplica2012R2ReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance2;
                                        }
                                        
                                        JToken vmNicsArray2 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray2 != null && vmNicsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue2 in ((JArray)vmNicsArray2))
                                            {
                                                VMNicDetails vMNicDetailsInstance2 = new VMNicDetails();
                                                hyperVReplica2012R2ReplicationDetailsInstance.VmNics.Add(vMNicDetailsInstance2);
                                                
                                                JToken nicIdValue2 = vmNicsValue2["nicId"];
                                                if (nicIdValue2 != null && nicIdValue2.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance2 = ((string)nicIdValue2);
                                                    vMNicDetailsInstance2.NicId = nicIdInstance2;
                                                }
                                                
                                                JToken vMSubnetNameValue2 = vmNicsValue2["vMSubnetName"];
                                                if (vMSubnetNameValue2 != null && vMSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance2 = ((string)vMSubnetNameValue2);
                                                    vMNicDetailsInstance2.VMSubnetName = vMSubnetNameInstance2;
                                                }
                                                
                                                JToken vMNetworkNameValue2 = vmNicsValue2["vMNetworkName"];
                                                if (vMNetworkNameValue2 != null && vMNetworkNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance2 = ((string)vMNetworkNameValue2);
                                                    vMNicDetailsInstance2.VMNetworkName = vMNetworkNameInstance2;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue2 = vmNicsValue2["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue2 != null && recoveryVMNetworkIdValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance2 = ((string)recoveryVMNetworkIdValue2);
                                                    vMNicDetailsInstance2.RecoveryVMNetworkId = recoveryVMNetworkIdInstance2;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue2 = vmNicsValue2["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue2 != null && recoveryVMSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance2 = ((string)recoveryVMSubnetNameValue2);
                                                    vMNicDetailsInstance2.RecoveryVMSubnetName = recoveryVMSubnetNameInstance2;
                                                }
                                                
                                                JToken ipAddressTypeValue2 = vmNicsValue2["ipAddressType"];
                                                if (ipAddressTypeValue2 != null && ipAddressTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance2 = ((string)ipAddressTypeValue2);
                                                    vMNicDetailsInstance2.IpAddressType = ipAddressTypeInstance2;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue2 = vmNicsValue2["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue2 != null && replicaNicStaticIPAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance2 = ((string)replicaNicStaticIPAddressValue2);
                                                    vMNicDetailsInstance2.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance2;
                                                }
                                                
                                                JToken selectionTypeValue2 = vmNicsValue2["selectionType"];
                                                if (selectionTypeValue2 != null && selectionTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance2 = ((string)selectionTypeValue2);
                                                    vMNicDetailsInstance2.SelectionType = selectionTypeInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken initialReplicationDetailsValue2 = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue2 != null && initialReplicationDetailsValue2.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance2 = new InitialReplicationDetails();
                                            hyperVReplica2012R2ReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance2;
                                            
                                            JToken initialReplicationTypeValue2 = initialReplicationDetailsValue2["initialReplicationType"];
                                            if (initialReplicationTypeValue2 != null && initialReplicationTypeValue2.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance2 = ((string)initialReplicationTypeValue2);
                                                initialReplicationDetailsInstance2.InitialReplicationType = initialReplicationTypeInstance2;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue2 = initialReplicationDetailsValue2["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue2 != null && initialReplicationProgressPercentageValue2.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance2 = ((string)initialReplicationProgressPercentageValue2);
                                                initialReplicationDetailsInstance2.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance2;
                                            }
                                        }
                                        
                                        JToken vMDiskDetailsArray2 = providerSpecificDetailsValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray2 != null && vMDiskDetailsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue2 in ((JArray)vMDiskDetailsArray2))
                                            {
                                                DiskDetails diskDetailsInstance2 = new DiskDetails();
                                                hyperVReplica2012R2ReplicationDetailsInstance.VMDiskDetails.Add(diskDetailsInstance2);
                                                
                                                JToken maxSizeMBValue2 = vMDiskDetailsValue2["maxSizeMB"];
                                                if (maxSizeMBValue2 != null && maxSizeMBValue2.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance2 = ((ulong)maxSizeMBValue2);
                                                    diskDetailsInstance2.MaxSizeMB = maxSizeMBInstance2;
                                                }
                                                
                                                JToken vhdTypeValue2 = vMDiskDetailsValue2["vhdType"];
                                                if (vhdTypeValue2 != null && vhdTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance2 = ((string)vhdTypeValue2);
                                                    diskDetailsInstance2.VhdType = vhdTypeInstance2;
                                                }
                                                
                                                JToken vhdIdValue2 = vMDiskDetailsValue2["vhdId"];
                                                if (vhdIdValue2 != null && vhdIdValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance2 = ((string)vhdIdValue2);
                                                    diskDetailsInstance2.VhdId = vhdIdInstance2;
                                                }
                                                
                                                JToken vhdNameValue2 = vMDiskDetailsValue2["vhdName"];
                                                if (vhdNameValue2 != null && vhdNameValue2.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance2 = ((string)vhdNameValue2);
                                                    diskDetailsInstance2.VhdName = vhdNameInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue2 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                            hyperVReplica2012R2ReplicationDetailsInstance.InstanceType = instanceTypeInstance2;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplica2012R2ReplicationDetailsInstance;
                                    }
                                    if (typeName == "VMwareAzureV2")
                                    {
                                        VMwareAzureV2ProviderSpecificSettings vMwareAzureV2ProviderSpecificSettingsInstance = new VMwareAzureV2ProviderSpecificSettings();
                                        
                                        JToken infrastructureVmIdValue = providerSpecificDetailsValue["infrastructureVmId"];
                                        if (infrastructureVmIdValue != null && infrastructureVmIdValue.Type != JTokenType.Null)
                                        {
                                            string infrastructureVmIdInstance = ((string)infrastructureVmIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.InfrastructureVmId = infrastructureVmIdInstance;
                                        }
                                        
                                        JToken vCenterInfrastructureIdValue = providerSpecificDetailsValue["vCenterInfrastructureId"];
                                        if (vCenterInfrastructureIdValue != null && vCenterInfrastructureIdValue.Type != JTokenType.Null)
                                        {
                                            string vCenterInfrastructureIdInstance = ((string)vCenterInfrastructureIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VCenterInfrastructureId = vCenterInfrastructureIdInstance;
                                        }
                                        
                                        JToken protectionStageValue = providerSpecificDetailsValue["protectionStage"];
                                        if (protectionStageValue != null && protectionStageValue.Type != JTokenType.Null)
                                        {
                                            string protectionStageInstance = ((string)protectionStageValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ProtectionStage = protectionStageInstance;
                                        }
                                        
                                        JToken healthErrorCodeValue = providerSpecificDetailsValue["healthErrorCode"];
                                        if (healthErrorCodeValue != null && healthErrorCodeValue.Type != JTokenType.Null)
                                        {
                                            string healthErrorCodeInstance = ((string)healthErrorCodeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.HealthErrorCode = healthErrorCodeInstance;
                                        }
                                        
                                        JToken resyncRequiredValue = providerSpecificDetailsValue["resyncRequired"];
                                        if (resyncRequiredValue != null && resyncRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool resyncRequiredInstance = ((bool)resyncRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ResyncRequired = resyncRequiredInstance;
                                        }
                                        
                                        JToken resyncProgressPercentageValue = providerSpecificDetailsValue["resyncProgressPercentage"];
                                        if (resyncProgressPercentageValue != null && resyncProgressPercentageValue.Type != JTokenType.Null)
                                        {
                                            int resyncProgressPercentageInstance = ((int)resyncProgressPercentageValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ResyncProgressPercentage = resyncProgressPercentageInstance;
                                        }
                                        
                                        JToken rpoInSecondsValue = providerSpecificDetailsValue["rpoInSeconds"];
                                        if (rpoInSecondsValue != null && rpoInSecondsValue.Type != JTokenType.Null)
                                        {
                                            long rpoInSecondsInstance = ((long)rpoInSecondsValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RpoInSeconds = rpoInSecondsInstance;
                                        }
                                        
                                        JToken compressedDataRateInMBValue = providerSpecificDetailsValue["compressedDataRateInMB"];
                                        if (compressedDataRateInMBValue != null && compressedDataRateInMBValue.Type != JTokenType.Null)
                                        {
                                            double compressedDataRateInMBInstance = ((double)compressedDataRateInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.CompressedDataRateInMB = compressedDataRateInMBInstance;
                                        }
                                        
                                        JToken uncompressedDataRateInMBValue = providerSpecificDetailsValue["uncompressedDataRateInMB"];
                                        if (uncompressedDataRateInMBValue != null && uncompressedDataRateInMBValue.Type != JTokenType.Null)
                                        {
                                            double uncompressedDataRateInMBInstance = ((double)uncompressedDataRateInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.UncompressedDataRateInMB = uncompressedDataRateInMBInstance;
                                        }
                                        
                                        JToken ipAddressValue = providerSpecificDetailsValue["ipAddress"];
                                        if (ipAddressValue != null && ipAddressValue.Type != JTokenType.Null)
                                        {
                                            string ipAddressInstance = ((string)ipAddressValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IpAddress = ipAddressInstance;
                                        }
                                        
                                        JToken agentVersionValue = providerSpecificDetailsValue["agentVersion"];
                                        if (agentVersionValue != null && agentVersionValue.Type != JTokenType.Null)
                                        {
                                            string agentVersionInstance = ((string)agentVersionValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.AgentVersion = agentVersionInstance;
                                        }
                                        
                                        JToken latestUpdateVersionValue = providerSpecificDetailsValue["latestUpdateVersion"];
                                        if (latestUpdateVersionValue != null && latestUpdateVersionValue.Type != JTokenType.Null)
                                        {
                                            string latestUpdateVersionInstance = ((string)latestUpdateVersionValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.LatestUpdateVersion = latestUpdateVersionInstance;
                                        }
                                        
                                        JToken isAgentUpdateRequiredValue = providerSpecificDetailsValue["isAgentUpdateRequired"];
                                        if (isAgentUpdateRequiredValue != null && isAgentUpdateRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool isAgentUpdateRequiredInstance = ((bool)isAgentUpdateRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IsAgentUpdateRequired = isAgentUpdateRequiredInstance;
                                        }
                                        
                                        JToken isRebootAfterUpdateRequiredValue = providerSpecificDetailsValue["isRebootAfterUpdateRequired"];
                                        if (isRebootAfterUpdateRequiredValue != null && isRebootAfterUpdateRequiredValue.Type != JTokenType.Null)
                                        {
                                            bool isRebootAfterUpdateRequiredInstance = ((bool)isRebootAfterUpdateRequiredValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.IsRebootAfterUpdateRequired = isRebootAfterUpdateRequiredInstance;
                                        }
                                        
                                        JToken lastHeartbeatValue = providerSpecificDetailsValue["lastHeartbeat"];
                                        if (lastHeartbeatValue != null && lastHeartbeatValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastHeartbeatInstance = ((DateTime)lastHeartbeatValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.LastHeartbeat = lastHeartbeatInstance;
                                        }
                                        
                                        JToken processServerIdValue = providerSpecificDetailsValue["processServerId"];
                                        if (processServerIdValue != null && processServerIdValue.Type != JTokenType.Null)
                                        {
                                            string processServerIdInstance = ((string)processServerIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.ProcessServerId = processServerIdInstance;
                                        }
                                        
                                        JToken multiVmGroupIdValue = providerSpecificDetailsValue["multiVmGroupId"];
                                        if (multiVmGroupIdValue != null && multiVmGroupIdValue.Type != JTokenType.Null)
                                        {
                                            string multiVmGroupIdInstance = ((string)multiVmGroupIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MultiVmGroupId = multiVmGroupIdInstance;
                                        }
                                        
                                        JToken multiVmGroupNameValue = providerSpecificDetailsValue["multiVmGroupName"];
                                        if (multiVmGroupNameValue != null && multiVmGroupNameValue.Type != JTokenType.Null)
                                        {
                                            string multiVmGroupNameInstance = ((string)multiVmGroupNameValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MultiVmGroupName = multiVmGroupNameInstance;
                                        }
                                        
                                        JToken protectedVolumesArray = providerSpecificDetailsValue["protectedVolumes"];
                                        if (protectedVolumesArray != null && protectedVolumesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken protectedVolumesValue in ((JArray)protectedVolumesArray))
                                            {
                                                VMwareAzureV2ProtectedVolumeDetails vMwareAzureV2ProtectedVolumeDetailsInstance = new VMwareAzureV2ProtectedVolumeDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.ProtectedVolumes.Add(vMwareAzureV2ProtectedVolumeDetailsInstance);
                                                
                                                JToken nameValue = protectedVolumesValue["name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.Name = nameInstance;
                                                }
                                                
                                                JToken protectionStageValue2 = protectedVolumesValue["protectionStage"];
                                                if (protectionStageValue2 != null && protectionStageValue2.Type != JTokenType.Null)
                                                {
                                                    string protectionStageInstance2 = ((string)protectionStageValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ProtectionStage = protectionStageInstance2;
                                                }
                                                
                                                JToken healthErrorCodeValue2 = protectedVolumesValue["healthErrorCode"];
                                                if (healthErrorCodeValue2 != null && healthErrorCodeValue2.Type != JTokenType.Null)
                                                {
                                                    string healthErrorCodeInstance2 = ((string)healthErrorCodeValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.HealthErrorCode = healthErrorCodeInstance2;
                                                }
                                                
                                                JToken rpoInSecondsValue2 = protectedVolumesValue["rpoInSeconds"];
                                                if (rpoInSecondsValue2 != null && rpoInSecondsValue2.Type != JTokenType.Null)
                                                {
                                                    long rpoInSecondsInstance2 = ((long)rpoInSecondsValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.RpoInSeconds = rpoInSecondsInstance2;
                                                }
                                                
                                                JToken resyncRequiredValue2 = protectedVolumesValue["resyncRequired"];
                                                if (resyncRequiredValue2 != null && resyncRequiredValue2.Type != JTokenType.Null)
                                                {
                                                    bool resyncRequiredInstance2 = ((bool)resyncRequiredValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncRequired = resyncRequiredInstance2;
                                                }
                                                
                                                JToken resyncProgressPercentageValue2 = protectedVolumesValue["resyncProgressPercentage"];
                                                if (resyncProgressPercentageValue2 != null && resyncProgressPercentageValue2.Type != JTokenType.Null)
                                                {
                                                    int resyncProgressPercentageInstance2 = ((int)resyncProgressPercentageValue2);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncProgressPercentage = resyncProgressPercentageInstance2;
                                                }
                                                
                                                JToken resyncDurationInSecondsValue = protectedVolumesValue["resyncDurationInSeconds"];
                                                if (resyncDurationInSecondsValue != null && resyncDurationInSecondsValue.Type != JTokenType.Null)
                                                {
                                                    long resyncDurationInSecondsInstance = ((long)resyncDurationInSecondsValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncDurationInSeconds = resyncDurationInSecondsInstance;
                                                }
                                                
                                                JToken volumeCapacityInBytesValue = protectedVolumesValue["volumeCapacityInBytes"];
                                                if (volumeCapacityInBytesValue != null && volumeCapacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long volumeCapacityInBytesInstance = ((long)volumeCapacityInBytesValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.VolumeCapacityInBytes = volumeCapacityInBytesInstance;
                                                }
                                                
                                                JToken fileSystemCapacityInBytesValue = protectedVolumesValue["fileSystemCapacityInBytes"];
                                                if (fileSystemCapacityInBytesValue != null && fileSystemCapacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long fileSystemCapacityInBytesInstance = ((long)fileSystemCapacityInBytesValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.FileSystemCapacityInBytes = fileSystemCapacityInBytesInstance;
                                                }
                                                
                                                JToken sourceDataInMBValue = protectedVolumesValue["sourceDataInMB"];
                                                if (sourceDataInMBValue != null && sourceDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double sourceDataInMBInstance = ((double)sourceDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.SourceDataInMB = sourceDataInMBInstance;
                                                }
                                                
                                                JToken psDataInMBValue = protectedVolumesValue["psDataInMB"];
                                                if (psDataInMBValue != null && psDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double psDataInMBInstance = ((double)psDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.PSDataInMB = psDataInMBInstance;
                                                }
                                                
                                                JToken targetDataInMBValue = protectedVolumesValue["targetDataInMB"];
                                                if (targetDataInMBValue != null && targetDataInMBValue.Type != JTokenType.Null)
                                                {
                                                    double targetDataInMBInstance = ((double)targetDataInMBValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.TargetDataInMB = targetDataInMBInstance;
                                                }
                                                
                                                JToken volumeResizedValue = protectedVolumesValue["volumeResized"];
                                                if (volumeResizedValue != null && volumeResizedValue.Type != JTokenType.Null)
                                                {
                                                    bool volumeResizedInstance = ((bool)volumeResizedValue);
                                                    vMwareAzureV2ProtectedVolumeDetailsInstance.VolumeResized = volumeResizedInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken volumeResizedValue2 = providerSpecificDetailsValue["volumeResized"];
                                        if (volumeResizedValue2 != null && volumeResizedValue2.Type != JTokenType.Null)
                                        {
                                            bool volumeResizedInstance2 = ((bool)volumeResizedValue2);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VolumeResized = volumeResizedInstance2;
                                        }
                                        
                                        JToken masterTargetIdValue = providerSpecificDetailsValue["masterTargetId"];
                                        if (masterTargetIdValue != null && masterTargetIdValue.Type != JTokenType.Null)
                                        {
                                            string masterTargetIdInstance = ((string)masterTargetIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.MasterTargetId = masterTargetIdInstance;
                                        }
                                        
                                        JToken sourceVmCPUCountValue = providerSpecificDetailsValue["sourceVmCPUCount"];
                                        if (sourceVmCPUCountValue != null && sourceVmCPUCountValue.Type != JTokenType.Null)
                                        {
                                            int sourceVmCPUCountInstance = ((int)sourceVmCPUCountValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SourceVmCPUCount = sourceVmCPUCountInstance;
                                        }
                                        
                                        JToken sourceVmRAMSizeInMBValue = providerSpecificDetailsValue["sourceVmRAMSizeInMB"];
                                        if (sourceVmRAMSizeInMBValue != null && sourceVmRAMSizeInMBValue.Type != JTokenType.Null)
                                        {
                                            int sourceVmRAMSizeInMBInstance = ((int)sourceVmRAMSizeInMBValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SourceVmRAMSizeInMB = sourceVmRAMSizeInMBInstance;
                                        }
                                        
                                        JToken osTypeValue = providerSpecificDetailsValue["osType"];
                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance = ((string)osTypeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.OSType = osTypeInstance;
                                        }
                                        
                                        JToken vhdNameValue3 = providerSpecificDetailsValue["vhdName"];
                                        if (vhdNameValue3 != null && vhdNameValue3.Type != JTokenType.Null)
                                        {
                                            string vhdNameInstance3 = ((string)vhdNameValue3);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.VHDName = vhdNameInstance3;
                                        }
                                        
                                        JToken osDiskIdValue = providerSpecificDetailsValue["osDiskId"];
                                        if (osDiskIdValue != null && osDiskIdValue.Type != JTokenType.Null)
                                        {
                                            string osDiskIdInstance = ((string)osDiskIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.OSDiskId = osDiskIdInstance;
                                        }
                                        
                                        JToken azureVMDiskDetailsArray = providerSpecificDetailsValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsArray != null && azureVMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken azureVMDiskDetailsValue in ((JArray)azureVMDiskDetailsArray))
                                            {
                                                AzureVmDiskDetails azureVmDiskDetailsInstance = new AzureVmDiskDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.AzureVMDiskDetails.Add(azureVmDiskDetailsInstance);
                                                
                                                JToken vhdTypeValue3 = azureVMDiskDetailsValue["vhdType"];
                                                if (vhdTypeValue3 != null && vhdTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance3 = ((string)vhdTypeValue3);
                                                    azureVmDiskDetailsInstance.VhdType = vhdTypeInstance3;
                                                }
                                                
                                                JToken vhdIdValue3 = azureVMDiskDetailsValue["vhdId"];
                                                if (vhdIdValue3 != null && vhdIdValue3.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance3 = ((string)vhdIdValue3);
                                                    azureVmDiskDetailsInstance.VhdId = vhdIdInstance3;
                                                }
                                                
                                                JToken vhdNameValue4 = azureVMDiskDetailsValue["vhdName"];
                                                if (vhdNameValue4 != null && vhdNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance4 = ((string)vhdNameValue4);
                                                    azureVmDiskDetailsInstance.VhdName = vhdNameInstance4;
                                                }
                                                
                                                JToken maxSizeMBValue3 = azureVMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue3 != null && maxSizeMBValue3.Type != JTokenType.Null)
                                                {
                                                    string maxSizeMBInstance3 = ((string)maxSizeMBValue3);
                                                    azureVmDiskDetailsInstance.MaxSizeMB = maxSizeMBInstance3;
                                                }
                                                
                                                JToken targetDiskLocationValue = azureVMDiskDetailsValue["targetDiskLocation"];
                                                if (targetDiskLocationValue != null && targetDiskLocationValue.Type != JTokenType.Null)
                                                {
                                                    string targetDiskLocationInstance = ((string)targetDiskLocationValue);
                                                    azureVmDiskDetailsInstance.TargetDiskLocation = targetDiskLocationInstance;
                                                }
                                                
                                                JToken lunIdValue = azureVMDiskDetailsValue["lunId"];
                                                if (lunIdValue != null && lunIdValue.Type != JTokenType.Null)
                                                {
                                                    string lunIdInstance = ((string)lunIdValue);
                                                    azureVmDiskDetailsInstance.LunId = lunIdInstance;
                                                }
                                                
                                                JToken targetDiskNameValue = azureVMDiskDetailsValue["targetDiskName"];
                                                if (targetDiskNameValue != null && targetDiskNameValue.Type != JTokenType.Null)
                                                {
                                                    string targetDiskNameInstance = ((string)targetDiskNameValue);
                                                    azureVmDiskDetailsInstance.TargetDiskName = targetDiskNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue = providerSpecificDetailsValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue != null && recoveryAzureVMNameValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance = ((string)recoveryAzureVMNameValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue = providerSpecificDetailsValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue != null && recoveryAzureVMSizeValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance = ((string)recoveryAzureVMSizeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance;
                                        }
                                        
                                        JToken recoveryAzureStorageAccountValue = providerSpecificDetailsValue["recoveryAzureStorageAccount"];
                                        if (recoveryAzureStorageAccountValue != null && recoveryAzureStorageAccountValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureStorageAccountInstance = ((string)recoveryAzureStorageAccountValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureStorageAccount = recoveryAzureStorageAccountInstance;
                                        }
                                        
                                        JToken vmNicsArray3 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray3 != null && vmNicsArray3.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue3 in ((JArray)vmNicsArray3))
                                            {
                                                VMNicDetails vMNicDetailsInstance3 = new VMNicDetails();
                                                vMwareAzureV2ProviderSpecificSettingsInstance.VMNics.Add(vMNicDetailsInstance3);
                                                
                                                JToken nicIdValue3 = vmNicsValue3["nicId"];
                                                if (nicIdValue3 != null && nicIdValue3.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance3 = ((string)nicIdValue3);
                                                    vMNicDetailsInstance3.NicId = nicIdInstance3;
                                                }
                                                
                                                JToken vMSubnetNameValue3 = vmNicsValue3["vMSubnetName"];
                                                if (vMSubnetNameValue3 != null && vMSubnetNameValue3.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance3 = ((string)vMSubnetNameValue3);
                                                    vMNicDetailsInstance3.VMSubnetName = vMSubnetNameInstance3;
                                                }
                                                
                                                JToken vMNetworkNameValue3 = vmNicsValue3["vMNetworkName"];
                                                if (vMNetworkNameValue3 != null && vMNetworkNameValue3.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance3 = ((string)vMNetworkNameValue3);
                                                    vMNicDetailsInstance3.VMNetworkName = vMNetworkNameInstance3;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue3 = vmNicsValue3["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue3 != null && recoveryVMNetworkIdValue3.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance3 = ((string)recoveryVMNetworkIdValue3);
                                                    vMNicDetailsInstance3.RecoveryVMNetworkId = recoveryVMNetworkIdInstance3;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue3 = vmNicsValue3["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue3 != null && recoveryVMSubnetNameValue3.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance3 = ((string)recoveryVMSubnetNameValue3);
                                                    vMNicDetailsInstance3.RecoveryVMSubnetName = recoveryVMSubnetNameInstance3;
                                                }
                                                
                                                JToken ipAddressTypeValue3 = vmNicsValue3["ipAddressType"];
                                                if (ipAddressTypeValue3 != null && ipAddressTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance3 = ((string)ipAddressTypeValue3);
                                                    vMNicDetailsInstance3.IpAddressType = ipAddressTypeInstance3;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue3 = vmNicsValue3["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue3 != null && replicaNicStaticIPAddressValue3.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance3 = ((string)replicaNicStaticIPAddressValue3);
                                                    vMNicDetailsInstance3.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance3;
                                                }
                                                
                                                JToken selectionTypeValue3 = vmNicsValue3["selectionType"];
                                                if (selectionTypeValue3 != null && selectionTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance3 = ((string)selectionTypeValue3);
                                                    vMNicDetailsInstance3.SelectionType = selectionTypeInstance3;
                                                }
                                            }
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue = providerSpecificDetailsValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue != null && selectedRecoveryAzureNetworkIdValue.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance = ((string)selectedRecoveryAzureNetworkIdValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance;
                                        }
                                        
                                        JToken discoveryTypeValue = providerSpecificDetailsValue["discoveryType"];
                                        if (discoveryTypeValue != null && discoveryTypeValue.Type != JTokenType.Null)
                                        {
                                            string discoveryTypeInstance = ((string)discoveryTypeValue);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.DiscoveryType = discoveryTypeInstance;
                                        }
                                        
                                        JToken instanceTypeValue3 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                            vMwareAzureV2ProviderSpecificSettingsInstance.InstanceType = instanceTypeInstance3;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = vMwareAzureV2ProviderSpecificSettingsInstance;
                                    }
                                    if (typeName == "HyperVReplicaAzure")
                                    {
                                        HyperVReplicaAzureReplicationDetails hyperVReplicaAzureReplicationDetailsInstance = new HyperVReplicaAzureReplicationDetails();
                                        
                                        JToken azureVMDiskDetailsArray2 = providerSpecificDetailsValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsArray2 != null && azureVMDiskDetailsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken azureVMDiskDetailsValue2 in ((JArray)azureVMDiskDetailsArray2))
                                            {
                                                AzureVmDiskDetails azureVmDiskDetailsInstance2 = new AzureVmDiskDetails();
                                                hyperVReplicaAzureReplicationDetailsInstance.AzureVMDiskDetails.Add(azureVmDiskDetailsInstance2);
                                                
                                                JToken vhdTypeValue4 = azureVMDiskDetailsValue2["vhdType"];
                                                if (vhdTypeValue4 != null && vhdTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance4 = ((string)vhdTypeValue4);
                                                    azureVmDiskDetailsInstance2.VhdType = vhdTypeInstance4;
                                                }
                                                
                                                JToken vhdIdValue4 = azureVMDiskDetailsValue2["vhdId"];
                                                if (vhdIdValue4 != null && vhdIdValue4.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance4 = ((string)vhdIdValue4);
                                                    azureVmDiskDetailsInstance2.VhdId = vhdIdInstance4;
                                                }
                                                
                                                JToken vhdNameValue5 = azureVMDiskDetailsValue2["vhdName"];
                                                if (vhdNameValue5 != null && vhdNameValue5.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance5 = ((string)vhdNameValue5);
                                                    azureVmDiskDetailsInstance2.VhdName = vhdNameInstance5;
                                                }
                                                
                                                JToken maxSizeMBValue4 = azureVMDiskDetailsValue2["maxSizeMB"];
                                                if (maxSizeMBValue4 != null && maxSizeMBValue4.Type != JTokenType.Null)
                                                {
                                                    string maxSizeMBInstance4 = ((string)maxSizeMBValue4);
                                                    azureVmDiskDetailsInstance2.MaxSizeMB = maxSizeMBInstance4;
                                                }
                                                
                                                JToken targetDiskLocationValue2 = azureVMDiskDetailsValue2["targetDiskLocation"];
                                                if (targetDiskLocationValue2 != null && targetDiskLocationValue2.Type != JTokenType.Null)
                                                {
                                                    string targetDiskLocationInstance2 = ((string)targetDiskLocationValue2);
                                                    azureVmDiskDetailsInstance2.TargetDiskLocation = targetDiskLocationInstance2;
                                                }
                                                
                                                JToken lunIdValue2 = azureVMDiskDetailsValue2["lunId"];
                                                if (lunIdValue2 != null && lunIdValue2.Type != JTokenType.Null)
                                                {
                                                    string lunIdInstance2 = ((string)lunIdValue2);
                                                    azureVmDiskDetailsInstance2.LunId = lunIdInstance2;
                                                }
                                                
                                                JToken targetDiskNameValue2 = azureVMDiskDetailsValue2["targetDiskName"];
                                                if (targetDiskNameValue2 != null && targetDiskNameValue2.Type != JTokenType.Null)
                                                {
                                                    string targetDiskNameInstance2 = ((string)targetDiskNameValue2);
                                                    azureVmDiskDetailsInstance2.TargetDiskName = targetDiskNameInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue2 = providerSpecificDetailsValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue2 != null && recoveryAzureVMNameValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance2 = ((string)recoveryAzureVMNameValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance2;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue2 = providerSpecificDetailsValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue2 != null && recoveryAzureVMSizeValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance2 = ((string)recoveryAzureVMSizeValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance2;
                                        }
                                        
                                        JToken recoveryAzureStorageAccountValue2 = providerSpecificDetailsValue["recoveryAzureStorageAccount"];
                                        if (recoveryAzureStorageAccountValue2 != null && recoveryAzureStorageAccountValue2.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureStorageAccountInstance2 = ((string)recoveryAzureStorageAccountValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureStorageAccount = recoveryAzureStorageAccountInstance2;
                                        }
                                        
                                        JToken lastReplicatedTimeValue3 = providerSpecificDetailsValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue3 != null && lastReplicatedTimeValue3.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance3 = ((string)lastReplicatedTimeValue3);
                                            hyperVReplicaAzureReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance3;
                                        }
                                        
                                        JToken initialReplicationDetailsValue3 = providerSpecificDetailsValue["initialReplicationDetails"];
                                        if (initialReplicationDetailsValue3 != null && initialReplicationDetailsValue3.Type != JTokenType.Null)
                                        {
                                            InitialReplicationDetails initialReplicationDetailsInstance3 = new InitialReplicationDetails();
                                            hyperVReplicaAzureReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance3;
                                            
                                            JToken initialReplicationTypeValue3 = initialReplicationDetailsValue3["initialReplicationType"];
                                            if (initialReplicationTypeValue3 != null && initialReplicationTypeValue3.Type != JTokenType.Null)
                                            {
                                                string initialReplicationTypeInstance3 = ((string)initialReplicationTypeValue3);
                                                initialReplicationDetailsInstance3.InitialReplicationType = initialReplicationTypeInstance3;
                                            }
                                            
                                            JToken initialReplicationProgressPercentageValue3 = initialReplicationDetailsValue3["initialReplicationProgressPercentage"];
                                            if (initialReplicationProgressPercentageValue3 != null && initialReplicationProgressPercentageValue3.Type != JTokenType.Null)
                                            {
                                                string initialReplicationProgressPercentageInstance3 = ((string)initialReplicationProgressPercentageValue3);
                                                initialReplicationDetailsInstance3.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance3;
                                            }
                                        }
                                        
                                        JToken vmNicsArray4 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray4 != null && vmNicsArray4.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue4 in ((JArray)vmNicsArray4))
                                            {
                                                VMNicDetails vMNicDetailsInstance4 = new VMNicDetails();
                                                hyperVReplicaAzureReplicationDetailsInstance.VMNics.Add(vMNicDetailsInstance4);
                                                
                                                JToken nicIdValue4 = vmNicsValue4["nicId"];
                                                if (nicIdValue4 != null && nicIdValue4.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance4 = ((string)nicIdValue4);
                                                    vMNicDetailsInstance4.NicId = nicIdInstance4;
                                                }
                                                
                                                JToken vMSubnetNameValue4 = vmNicsValue4["vMSubnetName"];
                                                if (vMSubnetNameValue4 != null && vMSubnetNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance4 = ((string)vMSubnetNameValue4);
                                                    vMNicDetailsInstance4.VMSubnetName = vMSubnetNameInstance4;
                                                }
                                                
                                                JToken vMNetworkNameValue4 = vmNicsValue4["vMNetworkName"];
                                                if (vMNetworkNameValue4 != null && vMNetworkNameValue4.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance4 = ((string)vMNetworkNameValue4);
                                                    vMNicDetailsInstance4.VMNetworkName = vMNetworkNameInstance4;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue4 = vmNicsValue4["recoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue4 != null && recoveryVMNetworkIdValue4.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance4 = ((string)recoveryVMNetworkIdValue4);
                                                    vMNicDetailsInstance4.RecoveryVMNetworkId = recoveryVMNetworkIdInstance4;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue4 = vmNicsValue4["recoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue4 != null && recoveryVMSubnetNameValue4.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance4 = ((string)recoveryVMSubnetNameValue4);
                                                    vMNicDetailsInstance4.RecoveryVMSubnetName = recoveryVMSubnetNameInstance4;
                                                }
                                                
                                                JToken ipAddressTypeValue4 = vmNicsValue4["ipAddressType"];
                                                if (ipAddressTypeValue4 != null && ipAddressTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string ipAddressTypeInstance4 = ((string)ipAddressTypeValue4);
                                                    vMNicDetailsInstance4.IpAddressType = ipAddressTypeInstance4;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue4 = vmNicsValue4["replicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue4 != null && replicaNicStaticIPAddressValue4.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance4 = ((string)replicaNicStaticIPAddressValue4);
                                                    vMNicDetailsInstance4.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance4;
                                                }
                                                
                                                JToken selectionTypeValue4 = vmNicsValue4["selectionType"];
                                                if (selectionTypeValue4 != null && selectionTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string selectionTypeInstance4 = ((string)selectionTypeValue4);
                                                    vMNicDetailsInstance4.SelectionType = selectionTypeInstance4;
                                                }
                                            }
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue2 = providerSpecificDetailsValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue2 != null && selectedRecoveryAzureNetworkIdValue2.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance2 = ((string)selectedRecoveryAzureNetworkIdValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance2;
                                        }
                                        
                                        JToken encryptionValue = providerSpecificDetailsValue["encryption"];
                                        if (encryptionValue != null && encryptionValue.Type != JTokenType.Null)
                                        {
                                            string encryptionInstance = ((string)encryptionValue);
                                            hyperVReplicaAzureReplicationDetailsInstance.Encryption = encryptionInstance;
                                        }
                                        
                                        JToken oSDetailsValue = providerSpecificDetailsValue["oSDetails"];
                                        if (oSDetailsValue != null && oSDetailsValue.Type != JTokenType.Null)
                                        {
                                            OSDetails oSDetailsInstance = new OSDetails();
                                            hyperVReplicaAzureReplicationDetailsInstance.OSDetails = oSDetailsInstance;
                                            
                                            JToken osTypeValue2 = oSDetailsValue["osType"];
                                            if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                            {
                                                string osTypeInstance2 = ((string)osTypeValue2);
                                                oSDetailsInstance.OsType = osTypeInstance2;
                                            }
                                            
                                            JToken productTypeValue = oSDetailsValue["productType"];
                                            if (productTypeValue != null && productTypeValue.Type != JTokenType.Null)
                                            {
                                                string productTypeInstance = ((string)productTypeValue);
                                                oSDetailsInstance.ProductType = productTypeInstance;
                                            }
                                            
                                            JToken osEditionValue = oSDetailsValue["osEdition"];
                                            if (osEditionValue != null && osEditionValue.Type != JTokenType.Null)
                                            {
                                                string osEditionInstance = ((string)osEditionValue);
                                                oSDetailsInstance.OSEdition = osEditionInstance;
                                            }
                                            
                                            JToken oSVersionValue = oSDetailsValue["oSVersion"];
                                            if (oSVersionValue != null && oSVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSVersionInstance = ((string)oSVersionValue);
                                                oSDetailsInstance.OSVersion = oSVersionInstance;
                                            }
                                            
                                            JToken oSMajorVersionValue = oSDetailsValue["oSMajorVersion"];
                                            if (oSMajorVersionValue != null && oSMajorVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSMajorVersionInstance = ((string)oSMajorVersionValue);
                                                oSDetailsInstance.OSMajorVersion = oSMajorVersionInstance;
                                            }
                                            
                                            JToken oSMinorVersionValue = oSDetailsValue["oSMinorVersion"];
                                            if (oSMinorVersionValue != null && oSMinorVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSMinorVersionInstance = ((string)oSMinorVersionValue);
                                                oSDetailsInstance.OSMinorVersion = oSMinorVersionInstance;
                                            }
                                        }
                                        
                                        JToken sourceVmRAMSizeInMBValue2 = providerSpecificDetailsValue["sourceVmRAMSizeInMB"];
                                        if (sourceVmRAMSizeInMBValue2 != null && sourceVmRAMSizeInMBValue2.Type != JTokenType.Null)
                                        {
                                            int sourceVmRAMSizeInMBInstance2 = ((int)sourceVmRAMSizeInMBValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SourceVmRAMSizeInMB = sourceVmRAMSizeInMBInstance2;
                                        }
                                        
                                        JToken sourceVmCPUCountValue2 = providerSpecificDetailsValue["sourceVmCPUCount"];
                                        if (sourceVmCPUCountValue2 != null && sourceVmCPUCountValue2.Type != JTokenType.Null)
                                        {
                                            int sourceVmCPUCountInstance2 = ((int)sourceVmCPUCountValue2);
                                            hyperVReplicaAzureReplicationDetailsInstance.SourceVmCPUCount = sourceVmCPUCountInstance2;
                                        }
                                        
                                        JToken instanceTypeValue4 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue4 != null && instanceTypeValue4.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance4 = ((string)instanceTypeValue4);
                                            hyperVReplicaAzureReplicationDetailsInstance.InstanceType = instanceTypeInstance4;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplicaAzureReplicationDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                replicationProtectedItemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                replicationProtectedItemInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                replicationProtectedItemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                replicationProtectedItemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    replicationProtectedItemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the replication protected object by Id.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric unique name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container unique name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list replicated protected items.
        /// </returns>
        public async Task<ReplicationProtectedItemListResponse> ListAsync(string fabricName, string protectionContainerName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/replicationProtectedItems";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ReplicationProtectedItemListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ReplicationProtectedItemListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ReplicationProtectedItem replicationProtectedItemInstance = new ReplicationProtectedItem();
                                    result.ReplicationProtectedItems.Add(replicationProtectedItemInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        ReplicationProtectedItemProperties propertiesInstance = new ReplicationProtectedItemProperties();
                                        replicationProtectedItemInstance.Properties = propertiesInstance;
                                        
                                        JToken friendlyNameValue = propertiesValue["friendlyName"];
                                        if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string friendlyNameInstance = ((string)friendlyNameValue);
                                            propertiesInstance.FriendlyName = friendlyNameInstance;
                                        }
                                        
                                        JToken protectedItemTypeValue = propertiesValue["protectedItemType"];
                                        if (protectedItemTypeValue != null && protectedItemTypeValue.Type != JTokenType.Null)
                                        {
                                            string protectedItemTypeInstance = ((string)protectedItemTypeValue);
                                            propertiesInstance.ProtectedItemType = protectedItemTypeInstance;
                                        }
                                        
                                        JToken protectableItemIdValue = propertiesValue["protectableItemId"];
                                        if (protectableItemIdValue != null && protectableItemIdValue.Type != JTokenType.Null)
                                        {
                                            string protectableItemIdInstance = ((string)protectableItemIdValue);
                                            propertiesInstance.ProtectableItemId = protectableItemIdInstance;
                                        }
                                        
                                        JToken recoveryServicesProviderIdValue = propertiesValue["recoveryServicesProviderId"];
                                        if (recoveryServicesProviderIdValue != null && recoveryServicesProviderIdValue.Type != JTokenType.Null)
                                        {
                                            string recoveryServicesProviderIdInstance = ((string)recoveryServicesProviderIdValue);
                                            propertiesInstance.RecoveryServicesProviderId = recoveryServicesProviderIdInstance;
                                        }
                                        
                                        JToken primaryFabricFriendlyNameValue = propertiesValue["primaryFabricFriendlyName"];
                                        if (primaryFabricFriendlyNameValue != null && primaryFabricFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string primaryFabricFriendlyNameInstance = ((string)primaryFabricFriendlyNameValue);
                                            propertiesInstance.PrimaryFabricFriendlyName = primaryFabricFriendlyNameInstance;
                                        }
                                        
                                        JToken recoveryFabricFriendlyNameValue = propertiesValue["recoveryFabricFriendlyName"];
                                        if (recoveryFabricFriendlyNameValue != null && recoveryFabricFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string recoveryFabricFriendlyNameInstance = ((string)recoveryFabricFriendlyNameValue);
                                            propertiesInstance.RecoveryFabricFriendlyName = recoveryFabricFriendlyNameInstance;
                                        }
                                        
                                        JToken recoveryFabricIdValue = propertiesValue["recoveryFabricId"];
                                        if (recoveryFabricIdValue != null && recoveryFabricIdValue.Type != JTokenType.Null)
                                        {
                                            string recoveryFabricIdInstance = ((string)recoveryFabricIdValue);
                                            propertiesInstance.RecoveryFabricId = recoveryFabricIdInstance;
                                        }
                                        
                                        JToken primaryProtectionContainerFriendlyNameValue = propertiesValue["primaryProtectionContainerFriendlyName"];
                                        if (primaryProtectionContainerFriendlyNameValue != null && primaryProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string primaryProtectionContainerFriendlyNameInstance = ((string)primaryProtectionContainerFriendlyNameValue);
                                            propertiesInstance.PrimaryProtectionContainerFriendlyName = primaryProtectionContainerFriendlyNameInstance;
                                        }
                                        
                                        JToken recoveryProtectionContainerFriendlyNameValue = propertiesValue["recoveryProtectionContainerFriendlyName"];
                                        if (recoveryProtectionContainerFriendlyNameValue != null && recoveryProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProtectionContainerFriendlyNameInstance = ((string)recoveryProtectionContainerFriendlyNameValue);
                                            propertiesInstance.RecoveryProtectionContainerFriendlyName = recoveryProtectionContainerFriendlyNameInstance;
                                        }
                                        
                                        JToken protectionStateValue = propertiesValue["protectionState"];
                                        if (protectionStateValue != null && protectionStateValue.Type != JTokenType.Null)
                                        {
                                            string protectionStateInstance = ((string)protectionStateValue);
                                            propertiesInstance.ProtectionState = protectionStateInstance;
                                        }
                                        
                                        JToken protectionStateDescriptionValue = propertiesValue["protectionStateDescription"];
                                        if (protectionStateDescriptionValue != null && protectionStateDescriptionValue.Type != JTokenType.Null)
                                        {
                                            string protectionStateDescriptionInstance = ((string)protectionStateDescriptionValue);
                                            propertiesInstance.ProtectionStateDescription = protectionStateDescriptionInstance;
                                        }
                                        
                                        JToken activeLocationValue = propertiesValue["activeLocation"];
                                        if (activeLocationValue != null && activeLocationValue.Type != JTokenType.Null)
                                        {
                                            string activeLocationInstance = ((string)activeLocationValue);
                                            propertiesInstance.ActiveLocation = activeLocationInstance;
                                        }
                                        
                                        JToken testFailoverStateValue = propertiesValue["testFailoverState"];
                                        if (testFailoverStateValue != null && testFailoverStateValue.Type != JTokenType.Null)
                                        {
                                            string testFailoverStateInstance = ((string)testFailoverStateValue);
                                            propertiesInstance.TestFailoverState = testFailoverStateInstance;
                                        }
                                        
                                        JToken testFailoverStateDescriptionValue = propertiesValue["testFailoverStateDescription"];
                                        if (testFailoverStateDescriptionValue != null && testFailoverStateDescriptionValue.Type != JTokenType.Null)
                                        {
                                            string testFailoverStateDescriptionInstance = ((string)testFailoverStateDescriptionValue);
                                            propertiesInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                                        }
                                        
                                        JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                        if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                            {
                                                propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                            }
                                        }
                                        
                                        JToken replicationHealthValue = propertiesValue["replicationHealth"];
                                        if (replicationHealthValue != null && replicationHealthValue.Type != JTokenType.Null)
                                        {
                                            string replicationHealthInstance = ((string)replicationHealthValue);
                                            propertiesInstance.ReplicationHealth = replicationHealthInstance;
                                        }
                                        
                                        JToken replicationHealthErrorsArray = propertiesValue["replicationHealthErrors"];
                                        if (replicationHealthErrorsArray != null && replicationHealthErrorsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken replicationHealthErrorsValue in ((JArray)replicationHealthErrorsArray))
                                            {
                                                HealthError healthErrorInstance = new HealthError();
                                                propertiesInstance.ReplicationHealthErrors.Add(healthErrorInstance);
                                                
                                                JToken errorLevelValue = replicationHealthErrorsValue["errorLevel"];
                                                if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                                {
                                                    string errorLevelInstance = ((string)errorLevelValue);
                                                    healthErrorInstance.ErrorLevel = errorLevelInstance;
                                                }
                                                
                                                JToken errorCodeValue = replicationHealthErrorsValue["errorCode"];
                                                if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                                {
                                                    string errorCodeInstance = ((string)errorCodeValue);
                                                    healthErrorInstance.ErrorCode = errorCodeInstance;
                                                }
                                                
                                                JToken errorMessageValue = replicationHealthErrorsValue["errorMessage"];
                                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                                {
                                                    string errorMessageInstance = ((string)errorMessageValue);
                                                    healthErrorInstance.ErrorMessage = errorMessageInstance;
                                                }
                                                
                                                JToken possibleCausesValue = replicationHealthErrorsValue["possibleCauses"];
                                                if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                                {
                                                    string possibleCausesInstance = ((string)possibleCausesValue);
                                                    healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                                }
                                                
                                                JToken recommendedActionValue = replicationHealthErrorsValue["recommendedAction"];
                                                if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                                {
                                                    string recommendedActionInstance = ((string)recommendedActionValue);
                                                    healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                                }
                                                
                                                JToken creationTimeUtcValue = replicationHealthErrorsValue["creationTimeUtc"];
                                                if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                                {
                                                    string creationTimeUtcInstance = ((string)creationTimeUtcValue);
                                                    healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                                }
                                                
                                                JToken recoveryProviderErrorMessageValue = replicationHealthErrorsValue["recoveryProviderErrorMessage"];
                                                if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                                    healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                                }
                                                
                                                JToken entityIdValue = replicationHealthErrorsValue["entityId"];
                                                if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                                {
                                                    string entityIdInstance = ((string)entityIdValue);
                                                    healthErrorInstance.EntityId = entityIdInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken policyIdValue = propertiesValue["policyId"];
                                        if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                        {
                                            string policyIdInstance = ((string)policyIdValue);
                                            propertiesInstance.PolicyID = policyIdInstance;
                                        }
                                        
                                        JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                        if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                            propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                        }
                                        
                                        JToken lastSuccessfulFailoverTimeValue = propertiesValue["lastSuccessfulFailoverTime"];
                                        if (lastSuccessfulFailoverTimeValue != null && lastSuccessfulFailoverTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastSuccessfulFailoverTimeInstance = ((DateTime)lastSuccessfulFailoverTimeValue);
                                            propertiesInstance.LastSuccessfulFailoverTime = lastSuccessfulFailoverTimeInstance;
                                        }
                                        
                                        JToken lastSuccessfulTestFailoverTimeValue = propertiesValue["lastSuccessfulTestFailoverTime"];
                                        if (lastSuccessfulTestFailoverTimeValue != null && lastSuccessfulTestFailoverTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastSuccessfulTestFailoverTimeInstance = ((DateTime)lastSuccessfulTestFailoverTimeValue);
                                            propertiesInstance.LastSuccessfulTestFailoverTime = lastSuccessfulTestFailoverTimeInstance;
                                        }
                                        
                                        JToken currentScenarioValue = propertiesValue["currentScenario"];
                                        if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                        {
                                            CurrentScenarioDetails currentScenarioInstance = new CurrentScenarioDetails();
                                            propertiesInstance.CurrentScenario = currentScenarioInstance;
                                            
                                            JToken scenarioNameValue = currentScenarioValue["scenarioName"];
                                            if (scenarioNameValue != null && scenarioNameValue.Type != JTokenType.Null)
                                            {
                                                string scenarioNameInstance = ((string)scenarioNameValue);
                                                currentScenarioInstance.ScenarioName = scenarioNameInstance;
                                            }
                                            
                                            JToken jobIdValue = currentScenarioValue["jobId"];
                                            if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                            {
                                                string jobIdInstance = ((string)jobIdValue);
                                                currentScenarioInstance.JobId = jobIdInstance;
                                            }
                                            
                                            JToken startTimeValue = currentScenarioValue["startTime"];
                                            if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime startTimeInstance = ((DateTime)startTimeValue);
                                                currentScenarioInstance.StartTime = startTimeInstance;
                                            }
                                        }
                                        
                                        JToken failoverRecoveryPointIdValue = propertiesValue["failoverRecoveryPointId"];
                                        if (failoverRecoveryPointIdValue != null && failoverRecoveryPointIdValue.Type != JTokenType.Null)
                                        {
                                            string failoverRecoveryPointIdInstance = ((string)failoverRecoveryPointIdValue);
                                            propertiesInstance.FailoverRecoveryPointId = failoverRecoveryPointIdInstance;
                                        }
                                        
                                        JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                        if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                        {
                                            string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                            if (typeName == "HyperVReplica2012")
                                            {
                                                HyperVReplica2012ReplicationDetails hyperVReplica2012ReplicationDetailsInstance = new HyperVReplica2012ReplicationDetails();
                                                
                                                JToken lastReplicatedTimeValue = providerSpecificDetailsValue["lastReplicatedTime"];
                                                if (lastReplicatedTimeValue != null && lastReplicatedTimeValue.Type != JTokenType.Null)
                                                {
                                                    string lastReplicatedTimeInstance = ((string)lastReplicatedTimeValue);
                                                    hyperVReplica2012ReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance;
                                                }
                                                
                                                JToken vmNicsArray = providerSpecificDetailsValue["vmNics"];
                                                if (vmNicsArray != null && vmNicsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken vmNicsValue in ((JArray)vmNicsArray))
                                                    {
                                                        VMNicDetails vMNicDetailsInstance = new VMNicDetails();
                                                        hyperVReplica2012ReplicationDetailsInstance.VmNics.Add(vMNicDetailsInstance);
                                                        
                                                        JToken nicIdValue = vmNicsValue["nicId"];
                                                        if (nicIdValue != null && nicIdValue.Type != JTokenType.Null)
                                                        {
                                                            string nicIdInstance = ((string)nicIdValue);
                                                            vMNicDetailsInstance.NicId = nicIdInstance;
                                                        }
                                                        
                                                        JToken vMSubnetNameValue = vmNicsValue["vMSubnetName"];
                                                        if (vMSubnetNameValue != null && vMSubnetNameValue.Type != JTokenType.Null)
                                                        {
                                                            string vMSubnetNameInstance = ((string)vMSubnetNameValue);
                                                            vMNicDetailsInstance.VMSubnetName = vMSubnetNameInstance;
                                                        }
                                                        
                                                        JToken vMNetworkNameValue = vmNicsValue["vMNetworkName"];
                                                        if (vMNetworkNameValue != null && vMNetworkNameValue.Type != JTokenType.Null)
                                                        {
                                                            string vMNetworkNameInstance = ((string)vMNetworkNameValue);
                                                            vMNicDetailsInstance.VMNetworkName = vMNetworkNameInstance;
                                                        }
                                                        
                                                        JToken recoveryVMNetworkIdValue = vmNicsValue["recoveryVMNetworkId"];
                                                        if (recoveryVMNetworkIdValue != null && recoveryVMNetworkIdValue.Type != JTokenType.Null)
                                                        {
                                                            string recoveryVMNetworkIdInstance = ((string)recoveryVMNetworkIdValue);
                                                            vMNicDetailsInstance.RecoveryVMNetworkId = recoveryVMNetworkIdInstance;
                                                        }
                                                        
                                                        JToken recoveryVMSubnetNameValue = vmNicsValue["recoveryVMSubnetName"];
                                                        if (recoveryVMSubnetNameValue != null && recoveryVMSubnetNameValue.Type != JTokenType.Null)
                                                        {
                                                            string recoveryVMSubnetNameInstance = ((string)recoveryVMSubnetNameValue);
                                                            vMNicDetailsInstance.RecoveryVMSubnetName = recoveryVMSubnetNameInstance;
                                                        }
                                                        
                                                        JToken ipAddressTypeValue = vmNicsValue["ipAddressType"];
                                                        if (ipAddressTypeValue != null && ipAddressTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string ipAddressTypeInstance = ((string)ipAddressTypeValue);
                                                            vMNicDetailsInstance.IpAddressType = ipAddressTypeInstance;
                                                        }
                                                        
                                                        JToken replicaNicStaticIPAddressValue = vmNicsValue["replicaNicStaticIPAddress"];
                                                        if (replicaNicStaticIPAddressValue != null && replicaNicStaticIPAddressValue.Type != JTokenType.Null)
                                                        {
                                                            string replicaNicStaticIPAddressInstance = ((string)replicaNicStaticIPAddressValue);
                                                            vMNicDetailsInstance.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance;
                                                        }
                                                        
                                                        JToken selectionTypeValue = vmNicsValue["selectionType"];
                                                        if (selectionTypeValue != null && selectionTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string selectionTypeInstance = ((string)selectionTypeValue);
                                                            vMNicDetailsInstance.SelectionType = selectionTypeInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken initialReplicationDetailsValue = providerSpecificDetailsValue["initialReplicationDetails"];
                                                if (initialReplicationDetailsValue != null && initialReplicationDetailsValue.Type != JTokenType.Null)
                                                {
                                                    InitialReplicationDetails initialReplicationDetailsInstance = new InitialReplicationDetails();
                                                    hyperVReplica2012ReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance;
                                                    
                                                    JToken initialReplicationTypeValue = initialReplicationDetailsValue["initialReplicationType"];
                                                    if (initialReplicationTypeValue != null && initialReplicationTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string initialReplicationTypeInstance = ((string)initialReplicationTypeValue);
                                                        initialReplicationDetailsInstance.InitialReplicationType = initialReplicationTypeInstance;
                                                    }
                                                    
                                                    JToken initialReplicationProgressPercentageValue = initialReplicationDetailsValue["initialReplicationProgressPercentage"];
                                                    if (initialReplicationProgressPercentageValue != null && initialReplicationProgressPercentageValue.Type != JTokenType.Null)
                                                    {
                                                        string initialReplicationProgressPercentageInstance = ((string)initialReplicationProgressPercentageValue);
                                                        initialReplicationDetailsInstance.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance;
                                                    }
                                                }
                                                
                                                JToken vMDiskDetailsArray = providerSpecificDetailsValue["vMDiskDetails"];
                                                if (vMDiskDetailsArray != null && vMDiskDetailsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken vMDiskDetailsValue in ((JArray)vMDiskDetailsArray))
                                                    {
                                                        DiskDetails diskDetailsInstance = new DiskDetails();
                                                        hyperVReplica2012ReplicationDetailsInstance.VMDiskDetails.Add(diskDetailsInstance);
                                                        
                                                        JToken maxSizeMBValue = vMDiskDetailsValue["maxSizeMB"];
                                                        if (maxSizeMBValue != null && maxSizeMBValue.Type != JTokenType.Null)
                                                        {
                                                            ulong maxSizeMBInstance = ((ulong)maxSizeMBValue);
                                                            diskDetailsInstance.MaxSizeMB = maxSizeMBInstance;
                                                        }
                                                        
                                                        JToken vhdTypeValue = vMDiskDetailsValue["vhdType"];
                                                        if (vhdTypeValue != null && vhdTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string vhdTypeInstance = ((string)vhdTypeValue);
                                                            diskDetailsInstance.VhdType = vhdTypeInstance;
                                                        }
                                                        
                                                        JToken vhdIdValue = vMDiskDetailsValue["vhdId"];
                                                        if (vhdIdValue != null && vhdIdValue.Type != JTokenType.Null)
                                                        {
                                                            string vhdIdInstance = ((string)vhdIdValue);
                                                            diskDetailsInstance.VhdId = vhdIdInstance;
                                                        }
                                                        
                                                        JToken vhdNameValue = vMDiskDetailsValue["vhdName"];
                                                        if (vhdNameValue != null && vhdNameValue.Type != JTokenType.Null)
                                                        {
                                                            string vhdNameInstance = ((string)vhdNameValue);
                                                            diskDetailsInstance.VhdName = vhdNameInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                                if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance = ((string)instanceTypeValue);
                                                    hyperVReplica2012ReplicationDetailsInstance.InstanceType = instanceTypeInstance;
                                                }
                                                propertiesInstance.ProviderSpecificDetails = hyperVReplica2012ReplicationDetailsInstance;
                                            }
                                            if (typeName == "HyperVReplica2012R2")
                                            {
                                                HyperVReplica2012R2ReplicationDetails hyperVReplica2012R2ReplicationDetailsInstance = new HyperVReplica2012R2ReplicationDetails();
                                                
                                                JToken lastReplicatedTimeValue2 = providerSpecificDetailsValue["lastReplicatedTime"];
                                                if (lastReplicatedTimeValue2 != null && lastReplicatedTimeValue2.Type != JTokenType.Null)
                                                {
                                                    string lastReplicatedTimeInstance2 = ((string)lastReplicatedTimeValue2);
                                                    hyperVReplica2012R2ReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance2;
                                                }
                                                
                                                JToken vmNicsArray2 = providerSpecificDetailsValue["vmNics"];
                                                if (vmNicsArray2 != null && vmNicsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken vmNicsValue2 in ((JArray)vmNicsArray2))
                                                    {
                                                        VMNicDetails vMNicDetailsInstance2 = new VMNicDetails();
                                                        hyperVReplica2012R2ReplicationDetailsInstance.VmNics.Add(vMNicDetailsInstance2);
                                                        
                                                        JToken nicIdValue2 = vmNicsValue2["nicId"];
                                                        if (nicIdValue2 != null && nicIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string nicIdInstance2 = ((string)nicIdValue2);
                                                            vMNicDetailsInstance2.NicId = nicIdInstance2;
                                                        }
                                                        
                                                        JToken vMSubnetNameValue2 = vmNicsValue2["vMSubnetName"];
                                                        if (vMSubnetNameValue2 != null && vMSubnetNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string vMSubnetNameInstance2 = ((string)vMSubnetNameValue2);
                                                            vMNicDetailsInstance2.VMSubnetName = vMSubnetNameInstance2;
                                                        }
                                                        
                                                        JToken vMNetworkNameValue2 = vmNicsValue2["vMNetworkName"];
                                                        if (vMNetworkNameValue2 != null && vMNetworkNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string vMNetworkNameInstance2 = ((string)vMNetworkNameValue2);
                                                            vMNicDetailsInstance2.VMNetworkName = vMNetworkNameInstance2;
                                                        }
                                                        
                                                        JToken recoveryVMNetworkIdValue2 = vmNicsValue2["recoveryVMNetworkId"];
                                                        if (recoveryVMNetworkIdValue2 != null && recoveryVMNetworkIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string recoveryVMNetworkIdInstance2 = ((string)recoveryVMNetworkIdValue2);
                                                            vMNicDetailsInstance2.RecoveryVMNetworkId = recoveryVMNetworkIdInstance2;
                                                        }
                                                        
                                                        JToken recoveryVMSubnetNameValue2 = vmNicsValue2["recoveryVMSubnetName"];
                                                        if (recoveryVMSubnetNameValue2 != null && recoveryVMSubnetNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string recoveryVMSubnetNameInstance2 = ((string)recoveryVMSubnetNameValue2);
                                                            vMNicDetailsInstance2.RecoveryVMSubnetName = recoveryVMSubnetNameInstance2;
                                                        }
                                                        
                                                        JToken ipAddressTypeValue2 = vmNicsValue2["ipAddressType"];
                                                        if (ipAddressTypeValue2 != null && ipAddressTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string ipAddressTypeInstance2 = ((string)ipAddressTypeValue2);
                                                            vMNicDetailsInstance2.IpAddressType = ipAddressTypeInstance2;
                                                        }
                                                        
                                                        JToken replicaNicStaticIPAddressValue2 = vmNicsValue2["replicaNicStaticIPAddress"];
                                                        if (replicaNicStaticIPAddressValue2 != null && replicaNicStaticIPAddressValue2.Type != JTokenType.Null)
                                                        {
                                                            string replicaNicStaticIPAddressInstance2 = ((string)replicaNicStaticIPAddressValue2);
                                                            vMNicDetailsInstance2.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance2;
                                                        }
                                                        
                                                        JToken selectionTypeValue2 = vmNicsValue2["selectionType"];
                                                        if (selectionTypeValue2 != null && selectionTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string selectionTypeInstance2 = ((string)selectionTypeValue2);
                                                            vMNicDetailsInstance2.SelectionType = selectionTypeInstance2;
                                                        }
                                                    }
                                                }
                                                
                                                JToken initialReplicationDetailsValue2 = providerSpecificDetailsValue["initialReplicationDetails"];
                                                if (initialReplicationDetailsValue2 != null && initialReplicationDetailsValue2.Type != JTokenType.Null)
                                                {
                                                    InitialReplicationDetails initialReplicationDetailsInstance2 = new InitialReplicationDetails();
                                                    hyperVReplica2012R2ReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance2;
                                                    
                                                    JToken initialReplicationTypeValue2 = initialReplicationDetailsValue2["initialReplicationType"];
                                                    if (initialReplicationTypeValue2 != null && initialReplicationTypeValue2.Type != JTokenType.Null)
                                                    {
                                                        string initialReplicationTypeInstance2 = ((string)initialReplicationTypeValue2);
                                                        initialReplicationDetailsInstance2.InitialReplicationType = initialReplicationTypeInstance2;
                                                    }
                                                    
                                                    JToken initialReplicationProgressPercentageValue2 = initialReplicationDetailsValue2["initialReplicationProgressPercentage"];
                                                    if (initialReplicationProgressPercentageValue2 != null && initialReplicationProgressPercentageValue2.Type != JTokenType.Null)
                                                    {
                                                        string initialReplicationProgressPercentageInstance2 = ((string)initialReplicationProgressPercentageValue2);
                                                        initialReplicationDetailsInstance2.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance2;
                                                    }
                                                }
                                                
                                                JToken vMDiskDetailsArray2 = providerSpecificDetailsValue["vMDiskDetails"];
                                                if (vMDiskDetailsArray2 != null && vMDiskDetailsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken vMDiskDetailsValue2 in ((JArray)vMDiskDetailsArray2))
                                                    {
                                                        DiskDetails diskDetailsInstance2 = new DiskDetails();
                                                        hyperVReplica2012R2ReplicationDetailsInstance.VMDiskDetails.Add(diskDetailsInstance2);
                                                        
                                                        JToken maxSizeMBValue2 = vMDiskDetailsValue2["maxSizeMB"];
                                                        if (maxSizeMBValue2 != null && maxSizeMBValue2.Type != JTokenType.Null)
                                                        {
                                                            ulong maxSizeMBInstance2 = ((ulong)maxSizeMBValue2);
                                                            diskDetailsInstance2.MaxSizeMB = maxSizeMBInstance2;
                                                        }
                                                        
                                                        JToken vhdTypeValue2 = vMDiskDetailsValue2["vhdType"];
                                                        if (vhdTypeValue2 != null && vhdTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string vhdTypeInstance2 = ((string)vhdTypeValue2);
                                                            diskDetailsInstance2.VhdType = vhdTypeInstance2;
                                                        }
                                                        
                                                        JToken vhdIdValue2 = vMDiskDetailsValue2["vhdId"];
                                                        if (vhdIdValue2 != null && vhdIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string vhdIdInstance2 = ((string)vhdIdValue2);
                                                            diskDetailsInstance2.VhdId = vhdIdInstance2;
                                                        }
                                                        
                                                        JToken vhdNameValue2 = vMDiskDetailsValue2["vhdName"];
                                                        if (vhdNameValue2 != null && vhdNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string vhdNameInstance2 = ((string)vhdNameValue2);
                                                            diskDetailsInstance2.VhdName = vhdNameInstance2;
                                                        }
                                                    }
                                                }
                                                
                                                JToken instanceTypeValue2 = providerSpecificDetailsValue["instanceType"];
                                                if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                                    hyperVReplica2012R2ReplicationDetailsInstance.InstanceType = instanceTypeInstance2;
                                                }
                                                propertiesInstance.ProviderSpecificDetails = hyperVReplica2012R2ReplicationDetailsInstance;
                                            }
                                            if (typeName == "VMwareAzureV2")
                                            {
                                                VMwareAzureV2ProviderSpecificSettings vMwareAzureV2ProviderSpecificSettingsInstance = new VMwareAzureV2ProviderSpecificSettings();
                                                
                                                JToken infrastructureVmIdValue = providerSpecificDetailsValue["infrastructureVmId"];
                                                if (infrastructureVmIdValue != null && infrastructureVmIdValue.Type != JTokenType.Null)
                                                {
                                                    string infrastructureVmIdInstance = ((string)infrastructureVmIdValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.InfrastructureVmId = infrastructureVmIdInstance;
                                                }
                                                
                                                JToken vCenterInfrastructureIdValue = providerSpecificDetailsValue["vCenterInfrastructureId"];
                                                if (vCenterInfrastructureIdValue != null && vCenterInfrastructureIdValue.Type != JTokenType.Null)
                                                {
                                                    string vCenterInfrastructureIdInstance = ((string)vCenterInfrastructureIdValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.VCenterInfrastructureId = vCenterInfrastructureIdInstance;
                                                }
                                                
                                                JToken protectionStageValue = providerSpecificDetailsValue["protectionStage"];
                                                if (protectionStageValue != null && protectionStageValue.Type != JTokenType.Null)
                                                {
                                                    string protectionStageInstance = ((string)protectionStageValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.ProtectionStage = protectionStageInstance;
                                                }
                                                
                                                JToken healthErrorCodeValue = providerSpecificDetailsValue["healthErrorCode"];
                                                if (healthErrorCodeValue != null && healthErrorCodeValue.Type != JTokenType.Null)
                                                {
                                                    string healthErrorCodeInstance = ((string)healthErrorCodeValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.HealthErrorCode = healthErrorCodeInstance;
                                                }
                                                
                                                JToken resyncRequiredValue = providerSpecificDetailsValue["resyncRequired"];
                                                if (resyncRequiredValue != null && resyncRequiredValue.Type != JTokenType.Null)
                                                {
                                                    bool resyncRequiredInstance = ((bool)resyncRequiredValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.ResyncRequired = resyncRequiredInstance;
                                                }
                                                
                                                JToken resyncProgressPercentageValue = providerSpecificDetailsValue["resyncProgressPercentage"];
                                                if (resyncProgressPercentageValue != null && resyncProgressPercentageValue.Type != JTokenType.Null)
                                                {
                                                    int resyncProgressPercentageInstance = ((int)resyncProgressPercentageValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.ResyncProgressPercentage = resyncProgressPercentageInstance;
                                                }
                                                
                                                JToken rpoInSecondsValue = providerSpecificDetailsValue["rpoInSeconds"];
                                                if (rpoInSecondsValue != null && rpoInSecondsValue.Type != JTokenType.Null)
                                                {
                                                    long rpoInSecondsInstance = ((long)rpoInSecondsValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.RpoInSeconds = rpoInSecondsInstance;
                                                }
                                                
                                                JToken compressedDataRateInMBValue = providerSpecificDetailsValue["compressedDataRateInMB"];
                                                if (compressedDataRateInMBValue != null && compressedDataRateInMBValue.Type != JTokenType.Null)
                                                {
                                                    double compressedDataRateInMBInstance = ((double)compressedDataRateInMBValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.CompressedDataRateInMB = compressedDataRateInMBInstance;
                                                }
                                                
                                                JToken uncompressedDataRateInMBValue = providerSpecificDetailsValue["uncompressedDataRateInMB"];
                                                if (uncompressedDataRateInMBValue != null && uncompressedDataRateInMBValue.Type != JTokenType.Null)
                                                {
                                                    double uncompressedDataRateInMBInstance = ((double)uncompressedDataRateInMBValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.UncompressedDataRateInMB = uncompressedDataRateInMBInstance;
                                                }
                                                
                                                JToken ipAddressValue = providerSpecificDetailsValue["ipAddress"];
                                                if (ipAddressValue != null && ipAddressValue.Type != JTokenType.Null)
                                                {
                                                    string ipAddressInstance = ((string)ipAddressValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.IpAddress = ipAddressInstance;
                                                }
                                                
                                                JToken agentVersionValue = providerSpecificDetailsValue["agentVersion"];
                                                if (agentVersionValue != null && agentVersionValue.Type != JTokenType.Null)
                                                {
                                                    string agentVersionInstance = ((string)agentVersionValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.AgentVersion = agentVersionInstance;
                                                }
                                                
                                                JToken latestUpdateVersionValue = providerSpecificDetailsValue["latestUpdateVersion"];
                                                if (latestUpdateVersionValue != null && latestUpdateVersionValue.Type != JTokenType.Null)
                                                {
                                                    string latestUpdateVersionInstance = ((string)latestUpdateVersionValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.LatestUpdateVersion = latestUpdateVersionInstance;
                                                }
                                                
                                                JToken isAgentUpdateRequiredValue = providerSpecificDetailsValue["isAgentUpdateRequired"];
                                                if (isAgentUpdateRequiredValue != null && isAgentUpdateRequiredValue.Type != JTokenType.Null)
                                                {
                                                    bool isAgentUpdateRequiredInstance = ((bool)isAgentUpdateRequiredValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.IsAgentUpdateRequired = isAgentUpdateRequiredInstance;
                                                }
                                                
                                                JToken isRebootAfterUpdateRequiredValue = providerSpecificDetailsValue["isRebootAfterUpdateRequired"];
                                                if (isRebootAfterUpdateRequiredValue != null && isRebootAfterUpdateRequiredValue.Type != JTokenType.Null)
                                                {
                                                    bool isRebootAfterUpdateRequiredInstance = ((bool)isRebootAfterUpdateRequiredValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.IsRebootAfterUpdateRequired = isRebootAfterUpdateRequiredInstance;
                                                }
                                                
                                                JToken lastHeartbeatValue = providerSpecificDetailsValue["lastHeartbeat"];
                                                if (lastHeartbeatValue != null && lastHeartbeatValue.Type != JTokenType.Null)
                                                {
                                                    DateTime lastHeartbeatInstance = ((DateTime)lastHeartbeatValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.LastHeartbeat = lastHeartbeatInstance;
                                                }
                                                
                                                JToken processServerIdValue = providerSpecificDetailsValue["processServerId"];
                                                if (processServerIdValue != null && processServerIdValue.Type != JTokenType.Null)
                                                {
                                                    string processServerIdInstance = ((string)processServerIdValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.ProcessServerId = processServerIdInstance;
                                                }
                                                
                                                JToken multiVmGroupIdValue = providerSpecificDetailsValue["multiVmGroupId"];
                                                if (multiVmGroupIdValue != null && multiVmGroupIdValue.Type != JTokenType.Null)
                                                {
                                                    string multiVmGroupIdInstance = ((string)multiVmGroupIdValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.MultiVmGroupId = multiVmGroupIdInstance;
                                                }
                                                
                                                JToken multiVmGroupNameValue = providerSpecificDetailsValue["multiVmGroupName"];
                                                if (multiVmGroupNameValue != null && multiVmGroupNameValue.Type != JTokenType.Null)
                                                {
                                                    string multiVmGroupNameInstance = ((string)multiVmGroupNameValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.MultiVmGroupName = multiVmGroupNameInstance;
                                                }
                                                
                                                JToken protectedVolumesArray = providerSpecificDetailsValue["protectedVolumes"];
                                                if (protectedVolumesArray != null && protectedVolumesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken protectedVolumesValue in ((JArray)protectedVolumesArray))
                                                    {
                                                        VMwareAzureV2ProtectedVolumeDetails vMwareAzureV2ProtectedVolumeDetailsInstance = new VMwareAzureV2ProtectedVolumeDetails();
                                                        vMwareAzureV2ProviderSpecificSettingsInstance.ProtectedVolumes.Add(vMwareAzureV2ProtectedVolumeDetailsInstance);
                                                        
                                                        JToken nameValue = protectedVolumesValue["name"];
                                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance = ((string)nameValue);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.Name = nameInstance;
                                                        }
                                                        
                                                        JToken protectionStageValue2 = protectedVolumesValue["protectionStage"];
                                                        if (protectionStageValue2 != null && protectionStageValue2.Type != JTokenType.Null)
                                                        {
                                                            string protectionStageInstance2 = ((string)protectionStageValue2);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.ProtectionStage = protectionStageInstance2;
                                                        }
                                                        
                                                        JToken healthErrorCodeValue2 = protectedVolumesValue["healthErrorCode"];
                                                        if (healthErrorCodeValue2 != null && healthErrorCodeValue2.Type != JTokenType.Null)
                                                        {
                                                            string healthErrorCodeInstance2 = ((string)healthErrorCodeValue2);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.HealthErrorCode = healthErrorCodeInstance2;
                                                        }
                                                        
                                                        JToken rpoInSecondsValue2 = protectedVolumesValue["rpoInSeconds"];
                                                        if (rpoInSecondsValue2 != null && rpoInSecondsValue2.Type != JTokenType.Null)
                                                        {
                                                            long rpoInSecondsInstance2 = ((long)rpoInSecondsValue2);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.RpoInSeconds = rpoInSecondsInstance2;
                                                        }
                                                        
                                                        JToken resyncRequiredValue2 = protectedVolumesValue["resyncRequired"];
                                                        if (resyncRequiredValue2 != null && resyncRequiredValue2.Type != JTokenType.Null)
                                                        {
                                                            bool resyncRequiredInstance2 = ((bool)resyncRequiredValue2);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncRequired = resyncRequiredInstance2;
                                                        }
                                                        
                                                        JToken resyncProgressPercentageValue2 = protectedVolumesValue["resyncProgressPercentage"];
                                                        if (resyncProgressPercentageValue2 != null && resyncProgressPercentageValue2.Type != JTokenType.Null)
                                                        {
                                                            int resyncProgressPercentageInstance2 = ((int)resyncProgressPercentageValue2);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncProgressPercentage = resyncProgressPercentageInstance2;
                                                        }
                                                        
                                                        JToken resyncDurationInSecondsValue = protectedVolumesValue["resyncDurationInSeconds"];
                                                        if (resyncDurationInSecondsValue != null && resyncDurationInSecondsValue.Type != JTokenType.Null)
                                                        {
                                                            long resyncDurationInSecondsInstance = ((long)resyncDurationInSecondsValue);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncDurationInSeconds = resyncDurationInSecondsInstance;
                                                        }
                                                        
                                                        JToken volumeCapacityInBytesValue = protectedVolumesValue["volumeCapacityInBytes"];
                                                        if (volumeCapacityInBytesValue != null && volumeCapacityInBytesValue.Type != JTokenType.Null)
                                                        {
                                                            long volumeCapacityInBytesInstance = ((long)volumeCapacityInBytesValue);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.VolumeCapacityInBytes = volumeCapacityInBytesInstance;
                                                        }
                                                        
                                                        JToken fileSystemCapacityInBytesValue = protectedVolumesValue["fileSystemCapacityInBytes"];
                                                        if (fileSystemCapacityInBytesValue != null && fileSystemCapacityInBytesValue.Type != JTokenType.Null)
                                                        {
                                                            long fileSystemCapacityInBytesInstance = ((long)fileSystemCapacityInBytesValue);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.FileSystemCapacityInBytes = fileSystemCapacityInBytesInstance;
                                                        }
                                                        
                                                        JToken sourceDataInMBValue = protectedVolumesValue["sourceDataInMB"];
                                                        if (sourceDataInMBValue != null && sourceDataInMBValue.Type != JTokenType.Null)
                                                        {
                                                            double sourceDataInMBInstance = ((double)sourceDataInMBValue);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.SourceDataInMB = sourceDataInMBInstance;
                                                        }
                                                        
                                                        JToken psDataInMBValue = protectedVolumesValue["psDataInMB"];
                                                        if (psDataInMBValue != null && psDataInMBValue.Type != JTokenType.Null)
                                                        {
                                                            double psDataInMBInstance = ((double)psDataInMBValue);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.PSDataInMB = psDataInMBInstance;
                                                        }
                                                        
                                                        JToken targetDataInMBValue = protectedVolumesValue["targetDataInMB"];
                                                        if (targetDataInMBValue != null && targetDataInMBValue.Type != JTokenType.Null)
                                                        {
                                                            double targetDataInMBInstance = ((double)targetDataInMBValue);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.TargetDataInMB = targetDataInMBInstance;
                                                        }
                                                        
                                                        JToken volumeResizedValue = protectedVolumesValue["volumeResized"];
                                                        if (volumeResizedValue != null && volumeResizedValue.Type != JTokenType.Null)
                                                        {
                                                            bool volumeResizedInstance = ((bool)volumeResizedValue);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.VolumeResized = volumeResizedInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken volumeResizedValue2 = providerSpecificDetailsValue["volumeResized"];
                                                if (volumeResizedValue2 != null && volumeResizedValue2.Type != JTokenType.Null)
                                                {
                                                    bool volumeResizedInstance2 = ((bool)volumeResizedValue2);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.VolumeResized = volumeResizedInstance2;
                                                }
                                                
                                                JToken masterTargetIdValue = providerSpecificDetailsValue["masterTargetId"];
                                                if (masterTargetIdValue != null && masterTargetIdValue.Type != JTokenType.Null)
                                                {
                                                    string masterTargetIdInstance = ((string)masterTargetIdValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.MasterTargetId = masterTargetIdInstance;
                                                }
                                                
                                                JToken sourceVmCPUCountValue = providerSpecificDetailsValue["sourceVmCPUCount"];
                                                if (sourceVmCPUCountValue != null && sourceVmCPUCountValue.Type != JTokenType.Null)
                                                {
                                                    int sourceVmCPUCountInstance = ((int)sourceVmCPUCountValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.SourceVmCPUCount = sourceVmCPUCountInstance;
                                                }
                                                
                                                JToken sourceVmRAMSizeInMBValue = providerSpecificDetailsValue["sourceVmRAMSizeInMB"];
                                                if (sourceVmRAMSizeInMBValue != null && sourceVmRAMSizeInMBValue.Type != JTokenType.Null)
                                                {
                                                    int sourceVmRAMSizeInMBInstance = ((int)sourceVmRAMSizeInMBValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.SourceVmRAMSizeInMB = sourceVmRAMSizeInMBInstance;
                                                }
                                                
                                                JToken osTypeValue = providerSpecificDetailsValue["osType"];
                                                if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance = ((string)osTypeValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.OSType = osTypeInstance;
                                                }
                                                
                                                JToken vhdNameValue3 = providerSpecificDetailsValue["vhdName"];
                                                if (vhdNameValue3 != null && vhdNameValue3.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance3 = ((string)vhdNameValue3);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.VHDName = vhdNameInstance3;
                                                }
                                                
                                                JToken osDiskIdValue = providerSpecificDetailsValue["osDiskId"];
                                                if (osDiskIdValue != null && osDiskIdValue.Type != JTokenType.Null)
                                                {
                                                    string osDiskIdInstance = ((string)osDiskIdValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.OSDiskId = osDiskIdInstance;
                                                }
                                                
                                                JToken azureVMDiskDetailsArray = providerSpecificDetailsValue["azureVMDiskDetails"];
                                                if (azureVMDiskDetailsArray != null && azureVMDiskDetailsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken azureVMDiskDetailsValue in ((JArray)azureVMDiskDetailsArray))
                                                    {
                                                        AzureVmDiskDetails azureVmDiskDetailsInstance = new AzureVmDiskDetails();
                                                        vMwareAzureV2ProviderSpecificSettingsInstance.AzureVMDiskDetails.Add(azureVmDiskDetailsInstance);
                                                        
                                                        JToken vhdTypeValue3 = azureVMDiskDetailsValue["vhdType"];
                                                        if (vhdTypeValue3 != null && vhdTypeValue3.Type != JTokenType.Null)
                                                        {
                                                            string vhdTypeInstance3 = ((string)vhdTypeValue3);
                                                            azureVmDiskDetailsInstance.VhdType = vhdTypeInstance3;
                                                        }
                                                        
                                                        JToken vhdIdValue3 = azureVMDiskDetailsValue["vhdId"];
                                                        if (vhdIdValue3 != null && vhdIdValue3.Type != JTokenType.Null)
                                                        {
                                                            string vhdIdInstance3 = ((string)vhdIdValue3);
                                                            azureVmDiskDetailsInstance.VhdId = vhdIdInstance3;
                                                        }
                                                        
                                                        JToken vhdNameValue4 = azureVMDiskDetailsValue["vhdName"];
                                                        if (vhdNameValue4 != null && vhdNameValue4.Type != JTokenType.Null)
                                                        {
                                                            string vhdNameInstance4 = ((string)vhdNameValue4);
                                                            azureVmDiskDetailsInstance.VhdName = vhdNameInstance4;
                                                        }
                                                        
                                                        JToken maxSizeMBValue3 = azureVMDiskDetailsValue["maxSizeMB"];
                                                        if (maxSizeMBValue3 != null && maxSizeMBValue3.Type != JTokenType.Null)
                                                        {
                                                            string maxSizeMBInstance3 = ((string)maxSizeMBValue3);
                                                            azureVmDiskDetailsInstance.MaxSizeMB = maxSizeMBInstance3;
                                                        }
                                                        
                                                        JToken targetDiskLocationValue = azureVMDiskDetailsValue["targetDiskLocation"];
                                                        if (targetDiskLocationValue != null && targetDiskLocationValue.Type != JTokenType.Null)
                                                        {
                                                            string targetDiskLocationInstance = ((string)targetDiskLocationValue);
                                                            azureVmDiskDetailsInstance.TargetDiskLocation = targetDiskLocationInstance;
                                                        }
                                                        
                                                        JToken lunIdValue = azureVMDiskDetailsValue["lunId"];
                                                        if (lunIdValue != null && lunIdValue.Type != JTokenType.Null)
                                                        {
                                                            string lunIdInstance = ((string)lunIdValue);
                                                            azureVmDiskDetailsInstance.LunId = lunIdInstance;
                                                        }
                                                        
                                                        JToken targetDiskNameValue = azureVMDiskDetailsValue["targetDiskName"];
                                                        if (targetDiskNameValue != null && targetDiskNameValue.Type != JTokenType.Null)
                                                        {
                                                            string targetDiskNameInstance = ((string)targetDiskNameValue);
                                                            azureVmDiskDetailsInstance.TargetDiskName = targetDiskNameInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken recoveryAzureVMNameValue = providerSpecificDetailsValue["recoveryAzureVMName"];
                                                if (recoveryAzureVMNameValue != null && recoveryAzureVMNameValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryAzureVMNameInstance = ((string)recoveryAzureVMNameValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance;
                                                }
                                                
                                                JToken recoveryAzureVMSizeValue = providerSpecificDetailsValue["recoveryAzureVMSize"];
                                                if (recoveryAzureVMSizeValue != null && recoveryAzureVMSizeValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryAzureVMSizeInstance = ((string)recoveryAzureVMSizeValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance;
                                                }
                                                
                                                JToken recoveryAzureStorageAccountValue = providerSpecificDetailsValue["recoveryAzureStorageAccount"];
                                                if (recoveryAzureStorageAccountValue != null && recoveryAzureStorageAccountValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryAzureStorageAccountInstance = ((string)recoveryAzureStorageAccountValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureStorageAccount = recoveryAzureStorageAccountInstance;
                                                }
                                                
                                                JToken vmNicsArray3 = providerSpecificDetailsValue["vmNics"];
                                                if (vmNicsArray3 != null && vmNicsArray3.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken vmNicsValue3 in ((JArray)vmNicsArray3))
                                                    {
                                                        VMNicDetails vMNicDetailsInstance3 = new VMNicDetails();
                                                        vMwareAzureV2ProviderSpecificSettingsInstance.VMNics.Add(vMNicDetailsInstance3);
                                                        
                                                        JToken nicIdValue3 = vmNicsValue3["nicId"];
                                                        if (nicIdValue3 != null && nicIdValue3.Type != JTokenType.Null)
                                                        {
                                                            string nicIdInstance3 = ((string)nicIdValue3);
                                                            vMNicDetailsInstance3.NicId = nicIdInstance3;
                                                        }
                                                        
                                                        JToken vMSubnetNameValue3 = vmNicsValue3["vMSubnetName"];
                                                        if (vMSubnetNameValue3 != null && vMSubnetNameValue3.Type != JTokenType.Null)
                                                        {
                                                            string vMSubnetNameInstance3 = ((string)vMSubnetNameValue3);
                                                            vMNicDetailsInstance3.VMSubnetName = vMSubnetNameInstance3;
                                                        }
                                                        
                                                        JToken vMNetworkNameValue3 = vmNicsValue3["vMNetworkName"];
                                                        if (vMNetworkNameValue3 != null && vMNetworkNameValue3.Type != JTokenType.Null)
                                                        {
                                                            string vMNetworkNameInstance3 = ((string)vMNetworkNameValue3);
                                                            vMNicDetailsInstance3.VMNetworkName = vMNetworkNameInstance3;
                                                        }
                                                        
                                                        JToken recoveryVMNetworkIdValue3 = vmNicsValue3["recoveryVMNetworkId"];
                                                        if (recoveryVMNetworkIdValue3 != null && recoveryVMNetworkIdValue3.Type != JTokenType.Null)
                                                        {
                                                            string recoveryVMNetworkIdInstance3 = ((string)recoveryVMNetworkIdValue3);
                                                            vMNicDetailsInstance3.RecoveryVMNetworkId = recoveryVMNetworkIdInstance3;
                                                        }
                                                        
                                                        JToken recoveryVMSubnetNameValue3 = vmNicsValue3["recoveryVMSubnetName"];
                                                        if (recoveryVMSubnetNameValue3 != null && recoveryVMSubnetNameValue3.Type != JTokenType.Null)
                                                        {
                                                            string recoveryVMSubnetNameInstance3 = ((string)recoveryVMSubnetNameValue3);
                                                            vMNicDetailsInstance3.RecoveryVMSubnetName = recoveryVMSubnetNameInstance3;
                                                        }
                                                        
                                                        JToken ipAddressTypeValue3 = vmNicsValue3["ipAddressType"];
                                                        if (ipAddressTypeValue3 != null && ipAddressTypeValue3.Type != JTokenType.Null)
                                                        {
                                                            string ipAddressTypeInstance3 = ((string)ipAddressTypeValue3);
                                                            vMNicDetailsInstance3.IpAddressType = ipAddressTypeInstance3;
                                                        }
                                                        
                                                        JToken replicaNicStaticIPAddressValue3 = vmNicsValue3["replicaNicStaticIPAddress"];
                                                        if (replicaNicStaticIPAddressValue3 != null && replicaNicStaticIPAddressValue3.Type != JTokenType.Null)
                                                        {
                                                            string replicaNicStaticIPAddressInstance3 = ((string)replicaNicStaticIPAddressValue3);
                                                            vMNicDetailsInstance3.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance3;
                                                        }
                                                        
                                                        JToken selectionTypeValue3 = vmNicsValue3["selectionType"];
                                                        if (selectionTypeValue3 != null && selectionTypeValue3.Type != JTokenType.Null)
                                                        {
                                                            string selectionTypeInstance3 = ((string)selectionTypeValue3);
                                                            vMNicDetailsInstance3.SelectionType = selectionTypeInstance3;
                                                        }
                                                    }
                                                }
                                                
                                                JToken selectedRecoveryAzureNetworkIdValue = providerSpecificDetailsValue["selectedRecoveryAzureNetworkId"];
                                                if (selectedRecoveryAzureNetworkIdValue != null && selectedRecoveryAzureNetworkIdValue.Type != JTokenType.Null)
                                                {
                                                    string selectedRecoveryAzureNetworkIdInstance = ((string)selectedRecoveryAzureNetworkIdValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance;
                                                }
                                                
                                                JToken discoveryTypeValue = providerSpecificDetailsValue["discoveryType"];
                                                if (discoveryTypeValue != null && discoveryTypeValue.Type != JTokenType.Null)
                                                {
                                                    string discoveryTypeInstance = ((string)discoveryTypeValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.DiscoveryType = discoveryTypeInstance;
                                                }
                                                
                                                JToken instanceTypeValue3 = providerSpecificDetailsValue["instanceType"];
                                                if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.InstanceType = instanceTypeInstance3;
                                                }
                                                propertiesInstance.ProviderSpecificDetails = vMwareAzureV2ProviderSpecificSettingsInstance;
                                            }
                                            if (typeName == "HyperVReplicaAzure")
                                            {
                                                HyperVReplicaAzureReplicationDetails hyperVReplicaAzureReplicationDetailsInstance = new HyperVReplicaAzureReplicationDetails();
                                                
                                                JToken azureVMDiskDetailsArray2 = providerSpecificDetailsValue["azureVMDiskDetails"];
                                                if (azureVMDiskDetailsArray2 != null && azureVMDiskDetailsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken azureVMDiskDetailsValue2 in ((JArray)azureVMDiskDetailsArray2))
                                                    {
                                                        AzureVmDiskDetails azureVmDiskDetailsInstance2 = new AzureVmDiskDetails();
                                                        hyperVReplicaAzureReplicationDetailsInstance.AzureVMDiskDetails.Add(azureVmDiskDetailsInstance2);
                                                        
                                                        JToken vhdTypeValue4 = azureVMDiskDetailsValue2["vhdType"];
                                                        if (vhdTypeValue4 != null && vhdTypeValue4.Type != JTokenType.Null)
                                                        {
                                                            string vhdTypeInstance4 = ((string)vhdTypeValue4);
                                                            azureVmDiskDetailsInstance2.VhdType = vhdTypeInstance4;
                                                        }
                                                        
                                                        JToken vhdIdValue4 = azureVMDiskDetailsValue2["vhdId"];
                                                        if (vhdIdValue4 != null && vhdIdValue4.Type != JTokenType.Null)
                                                        {
                                                            string vhdIdInstance4 = ((string)vhdIdValue4);
                                                            azureVmDiskDetailsInstance2.VhdId = vhdIdInstance4;
                                                        }
                                                        
                                                        JToken vhdNameValue5 = azureVMDiskDetailsValue2["vhdName"];
                                                        if (vhdNameValue5 != null && vhdNameValue5.Type != JTokenType.Null)
                                                        {
                                                            string vhdNameInstance5 = ((string)vhdNameValue5);
                                                            azureVmDiskDetailsInstance2.VhdName = vhdNameInstance5;
                                                        }
                                                        
                                                        JToken maxSizeMBValue4 = azureVMDiskDetailsValue2["maxSizeMB"];
                                                        if (maxSizeMBValue4 != null && maxSizeMBValue4.Type != JTokenType.Null)
                                                        {
                                                            string maxSizeMBInstance4 = ((string)maxSizeMBValue4);
                                                            azureVmDiskDetailsInstance2.MaxSizeMB = maxSizeMBInstance4;
                                                        }
                                                        
                                                        JToken targetDiskLocationValue2 = azureVMDiskDetailsValue2["targetDiskLocation"];
                                                        if (targetDiskLocationValue2 != null && targetDiskLocationValue2.Type != JTokenType.Null)
                                                        {
                                                            string targetDiskLocationInstance2 = ((string)targetDiskLocationValue2);
                                                            azureVmDiskDetailsInstance2.TargetDiskLocation = targetDiskLocationInstance2;
                                                        }
                                                        
                                                        JToken lunIdValue2 = azureVMDiskDetailsValue2["lunId"];
                                                        if (lunIdValue2 != null && lunIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string lunIdInstance2 = ((string)lunIdValue2);
                                                            azureVmDiskDetailsInstance2.LunId = lunIdInstance2;
                                                        }
                                                        
                                                        JToken targetDiskNameValue2 = azureVMDiskDetailsValue2["targetDiskName"];
                                                        if (targetDiskNameValue2 != null && targetDiskNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string targetDiskNameInstance2 = ((string)targetDiskNameValue2);
                                                            azureVmDiskDetailsInstance2.TargetDiskName = targetDiskNameInstance2;
                                                        }
                                                    }
                                                }
                                                
                                                JToken recoveryAzureVMNameValue2 = providerSpecificDetailsValue["recoveryAzureVMName"];
                                                if (recoveryAzureVMNameValue2 != null && recoveryAzureVMNameValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryAzureVMNameInstance2 = ((string)recoveryAzureVMNameValue2);
                                                    hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance2;
                                                }
                                                
                                                JToken recoveryAzureVMSizeValue2 = providerSpecificDetailsValue["recoveryAzureVMSize"];
                                                if (recoveryAzureVMSizeValue2 != null && recoveryAzureVMSizeValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryAzureVMSizeInstance2 = ((string)recoveryAzureVMSizeValue2);
                                                    hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance2;
                                                }
                                                
                                                JToken recoveryAzureStorageAccountValue2 = providerSpecificDetailsValue["recoveryAzureStorageAccount"];
                                                if (recoveryAzureStorageAccountValue2 != null && recoveryAzureStorageAccountValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryAzureStorageAccountInstance2 = ((string)recoveryAzureStorageAccountValue2);
                                                    hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureStorageAccount = recoveryAzureStorageAccountInstance2;
                                                }
                                                
                                                JToken lastReplicatedTimeValue3 = providerSpecificDetailsValue["lastReplicatedTime"];
                                                if (lastReplicatedTimeValue3 != null && lastReplicatedTimeValue3.Type != JTokenType.Null)
                                                {
                                                    string lastReplicatedTimeInstance3 = ((string)lastReplicatedTimeValue3);
                                                    hyperVReplicaAzureReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance3;
                                                }
                                                
                                                JToken initialReplicationDetailsValue3 = providerSpecificDetailsValue["initialReplicationDetails"];
                                                if (initialReplicationDetailsValue3 != null && initialReplicationDetailsValue3.Type != JTokenType.Null)
                                                {
                                                    InitialReplicationDetails initialReplicationDetailsInstance3 = new InitialReplicationDetails();
                                                    hyperVReplicaAzureReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance3;
                                                    
                                                    JToken initialReplicationTypeValue3 = initialReplicationDetailsValue3["initialReplicationType"];
                                                    if (initialReplicationTypeValue3 != null && initialReplicationTypeValue3.Type != JTokenType.Null)
                                                    {
                                                        string initialReplicationTypeInstance3 = ((string)initialReplicationTypeValue3);
                                                        initialReplicationDetailsInstance3.InitialReplicationType = initialReplicationTypeInstance3;
                                                    }
                                                    
                                                    JToken initialReplicationProgressPercentageValue3 = initialReplicationDetailsValue3["initialReplicationProgressPercentage"];
                                                    if (initialReplicationProgressPercentageValue3 != null && initialReplicationProgressPercentageValue3.Type != JTokenType.Null)
                                                    {
                                                        string initialReplicationProgressPercentageInstance3 = ((string)initialReplicationProgressPercentageValue3);
                                                        initialReplicationDetailsInstance3.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance3;
                                                    }
                                                }
                                                
                                                JToken vmNicsArray4 = providerSpecificDetailsValue["vmNics"];
                                                if (vmNicsArray4 != null && vmNicsArray4.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken vmNicsValue4 in ((JArray)vmNicsArray4))
                                                    {
                                                        VMNicDetails vMNicDetailsInstance4 = new VMNicDetails();
                                                        hyperVReplicaAzureReplicationDetailsInstance.VMNics.Add(vMNicDetailsInstance4);
                                                        
                                                        JToken nicIdValue4 = vmNicsValue4["nicId"];
                                                        if (nicIdValue4 != null && nicIdValue4.Type != JTokenType.Null)
                                                        {
                                                            string nicIdInstance4 = ((string)nicIdValue4);
                                                            vMNicDetailsInstance4.NicId = nicIdInstance4;
                                                        }
                                                        
                                                        JToken vMSubnetNameValue4 = vmNicsValue4["vMSubnetName"];
                                                        if (vMSubnetNameValue4 != null && vMSubnetNameValue4.Type != JTokenType.Null)
                                                        {
                                                            string vMSubnetNameInstance4 = ((string)vMSubnetNameValue4);
                                                            vMNicDetailsInstance4.VMSubnetName = vMSubnetNameInstance4;
                                                        }
                                                        
                                                        JToken vMNetworkNameValue4 = vmNicsValue4["vMNetworkName"];
                                                        if (vMNetworkNameValue4 != null && vMNetworkNameValue4.Type != JTokenType.Null)
                                                        {
                                                            string vMNetworkNameInstance4 = ((string)vMNetworkNameValue4);
                                                            vMNicDetailsInstance4.VMNetworkName = vMNetworkNameInstance4;
                                                        }
                                                        
                                                        JToken recoveryVMNetworkIdValue4 = vmNicsValue4["recoveryVMNetworkId"];
                                                        if (recoveryVMNetworkIdValue4 != null && recoveryVMNetworkIdValue4.Type != JTokenType.Null)
                                                        {
                                                            string recoveryVMNetworkIdInstance4 = ((string)recoveryVMNetworkIdValue4);
                                                            vMNicDetailsInstance4.RecoveryVMNetworkId = recoveryVMNetworkIdInstance4;
                                                        }
                                                        
                                                        JToken recoveryVMSubnetNameValue4 = vmNicsValue4["recoveryVMSubnetName"];
                                                        if (recoveryVMSubnetNameValue4 != null && recoveryVMSubnetNameValue4.Type != JTokenType.Null)
                                                        {
                                                            string recoveryVMSubnetNameInstance4 = ((string)recoveryVMSubnetNameValue4);
                                                            vMNicDetailsInstance4.RecoveryVMSubnetName = recoveryVMSubnetNameInstance4;
                                                        }
                                                        
                                                        JToken ipAddressTypeValue4 = vmNicsValue4["ipAddressType"];
                                                        if (ipAddressTypeValue4 != null && ipAddressTypeValue4.Type != JTokenType.Null)
                                                        {
                                                            string ipAddressTypeInstance4 = ((string)ipAddressTypeValue4);
                                                            vMNicDetailsInstance4.IpAddressType = ipAddressTypeInstance4;
                                                        }
                                                        
                                                        JToken replicaNicStaticIPAddressValue4 = vmNicsValue4["replicaNicStaticIPAddress"];
                                                        if (replicaNicStaticIPAddressValue4 != null && replicaNicStaticIPAddressValue4.Type != JTokenType.Null)
                                                        {
                                                            string replicaNicStaticIPAddressInstance4 = ((string)replicaNicStaticIPAddressValue4);
                                                            vMNicDetailsInstance4.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance4;
                                                        }
                                                        
                                                        JToken selectionTypeValue4 = vmNicsValue4["selectionType"];
                                                        if (selectionTypeValue4 != null && selectionTypeValue4.Type != JTokenType.Null)
                                                        {
                                                            string selectionTypeInstance4 = ((string)selectionTypeValue4);
                                                            vMNicDetailsInstance4.SelectionType = selectionTypeInstance4;
                                                        }
                                                    }
                                                }
                                                
                                                JToken selectedRecoveryAzureNetworkIdValue2 = providerSpecificDetailsValue["selectedRecoveryAzureNetworkId"];
                                                if (selectedRecoveryAzureNetworkIdValue2 != null && selectedRecoveryAzureNetworkIdValue2.Type != JTokenType.Null)
                                                {
                                                    string selectedRecoveryAzureNetworkIdInstance2 = ((string)selectedRecoveryAzureNetworkIdValue2);
                                                    hyperVReplicaAzureReplicationDetailsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance2;
                                                }
                                                
                                                JToken encryptionValue = providerSpecificDetailsValue["encryption"];
                                                if (encryptionValue != null && encryptionValue.Type != JTokenType.Null)
                                                {
                                                    string encryptionInstance = ((string)encryptionValue);
                                                    hyperVReplicaAzureReplicationDetailsInstance.Encryption = encryptionInstance;
                                                }
                                                
                                                JToken oSDetailsValue = providerSpecificDetailsValue["oSDetails"];
                                                if (oSDetailsValue != null && oSDetailsValue.Type != JTokenType.Null)
                                                {
                                                    OSDetails oSDetailsInstance = new OSDetails();
                                                    hyperVReplicaAzureReplicationDetailsInstance.OSDetails = oSDetailsInstance;
                                                    
                                                    JToken osTypeValue2 = oSDetailsValue["osType"];
                                                    if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                                    {
                                                        string osTypeInstance2 = ((string)osTypeValue2);
                                                        oSDetailsInstance.OsType = osTypeInstance2;
                                                    }
                                                    
                                                    JToken productTypeValue = oSDetailsValue["productType"];
                                                    if (productTypeValue != null && productTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string productTypeInstance = ((string)productTypeValue);
                                                        oSDetailsInstance.ProductType = productTypeInstance;
                                                    }
                                                    
                                                    JToken osEditionValue = oSDetailsValue["osEdition"];
                                                    if (osEditionValue != null && osEditionValue.Type != JTokenType.Null)
                                                    {
                                                        string osEditionInstance = ((string)osEditionValue);
                                                        oSDetailsInstance.OSEdition = osEditionInstance;
                                                    }
                                                    
                                                    JToken oSVersionValue = oSDetailsValue["oSVersion"];
                                                    if (oSVersionValue != null && oSVersionValue.Type != JTokenType.Null)
                                                    {
                                                        string oSVersionInstance = ((string)oSVersionValue);
                                                        oSDetailsInstance.OSVersion = oSVersionInstance;
                                                    }
                                                    
                                                    JToken oSMajorVersionValue = oSDetailsValue["oSMajorVersion"];
                                                    if (oSMajorVersionValue != null && oSMajorVersionValue.Type != JTokenType.Null)
                                                    {
                                                        string oSMajorVersionInstance = ((string)oSMajorVersionValue);
                                                        oSDetailsInstance.OSMajorVersion = oSMajorVersionInstance;
                                                    }
                                                    
                                                    JToken oSMinorVersionValue = oSDetailsValue["oSMinorVersion"];
                                                    if (oSMinorVersionValue != null && oSMinorVersionValue.Type != JTokenType.Null)
                                                    {
                                                        string oSMinorVersionInstance = ((string)oSMinorVersionValue);
                                                        oSDetailsInstance.OSMinorVersion = oSMinorVersionInstance;
                                                    }
                                                }
                                                
                                                JToken sourceVmRAMSizeInMBValue2 = providerSpecificDetailsValue["sourceVmRAMSizeInMB"];
                                                if (sourceVmRAMSizeInMBValue2 != null && sourceVmRAMSizeInMBValue2.Type != JTokenType.Null)
                                                {
                                                    int sourceVmRAMSizeInMBInstance2 = ((int)sourceVmRAMSizeInMBValue2);
                                                    hyperVReplicaAzureReplicationDetailsInstance.SourceVmRAMSizeInMB = sourceVmRAMSizeInMBInstance2;
                                                }
                                                
                                                JToken sourceVmCPUCountValue2 = providerSpecificDetailsValue["sourceVmCPUCount"];
                                                if (sourceVmCPUCountValue2 != null && sourceVmCPUCountValue2.Type != JTokenType.Null)
                                                {
                                                    int sourceVmCPUCountInstance2 = ((int)sourceVmCPUCountValue2);
                                                    hyperVReplicaAzureReplicationDetailsInstance.SourceVmCPUCount = sourceVmCPUCountInstance2;
                                                }
                                                
                                                JToken instanceTypeValue4 = providerSpecificDetailsValue["instanceType"];
                                                if (instanceTypeValue4 != null && instanceTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance4 = ((string)instanceTypeValue4);
                                                    hyperVReplicaAzureReplicationDetailsInstance.InstanceType = instanceTypeInstance4;
                                                }
                                                propertiesInstance.ProviderSpecificDetails = hyperVReplicaAzureReplicationDetailsInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        replicationProtectedItemInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue2 = valueValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        replicationProtectedItemInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        replicationProtectedItemInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        replicationProtectedItemInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            replicationProtectedItemInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Enumerate all replication protected items under vault.
        /// </summary>
        /// <param name='skipToken'>
        /// Optional. Continuation Token.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Protected items query parameter.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list replicated protected items.
        /// </returns>
        public async Task<ReplicationProtectedItemListResponse> ListAllAsync(string skipToken, ProtectedItemsQueryParameter parameters, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("skipToken", skipToken);
                tracingParameters.Add("parameters", parameters);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAllAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationProtectedItems";
            List<string> queryParameters = new List<string>();
            if (skipToken != null)
            {
                queryParameters.Add("skipToken=" + Uri.EscapeDataString(skipToken));
            }
            queryParameters.Add("api-version=2015-11-10");
            List<string> odataFilter = new List<string>();
            if (parameters != null && parameters.ToQueryString() != null)
            {
                odataFilter.Add(Uri.EscapeDataString(parameters.ToQueryString().ToString()));
            }
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ReplicationProtectedItemListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ReplicationProtectedItemListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ReplicationProtectedItem replicationProtectedItemInstance = new ReplicationProtectedItem();
                                    result.ReplicationProtectedItems.Add(replicationProtectedItemInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        ReplicationProtectedItemProperties propertiesInstance = new ReplicationProtectedItemProperties();
                                        replicationProtectedItemInstance.Properties = propertiesInstance;
                                        
                                        JToken friendlyNameValue = propertiesValue["friendlyName"];
                                        if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string friendlyNameInstance = ((string)friendlyNameValue);
                                            propertiesInstance.FriendlyName = friendlyNameInstance;
                                        }
                                        
                                        JToken protectedItemTypeValue = propertiesValue["protectedItemType"];
                                        if (protectedItemTypeValue != null && protectedItemTypeValue.Type != JTokenType.Null)
                                        {
                                            string protectedItemTypeInstance = ((string)protectedItemTypeValue);
                                            propertiesInstance.ProtectedItemType = protectedItemTypeInstance;
                                        }
                                        
                                        JToken protectableItemIdValue = propertiesValue["protectableItemId"];
                                        if (protectableItemIdValue != null && protectableItemIdValue.Type != JTokenType.Null)
                                        {
                                            string protectableItemIdInstance = ((string)protectableItemIdValue);
                                            propertiesInstance.ProtectableItemId = protectableItemIdInstance;
                                        }
                                        
                                        JToken recoveryServicesProviderIdValue = propertiesValue["recoveryServicesProviderId"];
                                        if (recoveryServicesProviderIdValue != null && recoveryServicesProviderIdValue.Type != JTokenType.Null)
                                        {
                                            string recoveryServicesProviderIdInstance = ((string)recoveryServicesProviderIdValue);
                                            propertiesInstance.RecoveryServicesProviderId = recoveryServicesProviderIdInstance;
                                        }
                                        
                                        JToken primaryFabricFriendlyNameValue = propertiesValue["primaryFabricFriendlyName"];
                                        if (primaryFabricFriendlyNameValue != null && primaryFabricFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string primaryFabricFriendlyNameInstance = ((string)primaryFabricFriendlyNameValue);
                                            propertiesInstance.PrimaryFabricFriendlyName = primaryFabricFriendlyNameInstance;
                                        }
                                        
                                        JToken recoveryFabricFriendlyNameValue = propertiesValue["recoveryFabricFriendlyName"];
                                        if (recoveryFabricFriendlyNameValue != null && recoveryFabricFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string recoveryFabricFriendlyNameInstance = ((string)recoveryFabricFriendlyNameValue);
                                            propertiesInstance.RecoveryFabricFriendlyName = recoveryFabricFriendlyNameInstance;
                                        }
                                        
                                        JToken recoveryFabricIdValue = propertiesValue["recoveryFabricId"];
                                        if (recoveryFabricIdValue != null && recoveryFabricIdValue.Type != JTokenType.Null)
                                        {
                                            string recoveryFabricIdInstance = ((string)recoveryFabricIdValue);
                                            propertiesInstance.RecoveryFabricId = recoveryFabricIdInstance;
                                        }
                                        
                                        JToken primaryProtectionContainerFriendlyNameValue = propertiesValue["primaryProtectionContainerFriendlyName"];
                                        if (primaryProtectionContainerFriendlyNameValue != null && primaryProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string primaryProtectionContainerFriendlyNameInstance = ((string)primaryProtectionContainerFriendlyNameValue);
                                            propertiesInstance.PrimaryProtectionContainerFriendlyName = primaryProtectionContainerFriendlyNameInstance;
                                        }
                                        
                                        JToken recoveryProtectionContainerFriendlyNameValue = propertiesValue["recoveryProtectionContainerFriendlyName"];
                                        if (recoveryProtectionContainerFriendlyNameValue != null && recoveryProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProtectionContainerFriendlyNameInstance = ((string)recoveryProtectionContainerFriendlyNameValue);
                                            propertiesInstance.RecoveryProtectionContainerFriendlyName = recoveryProtectionContainerFriendlyNameInstance;
                                        }
                                        
                                        JToken protectionStateValue = propertiesValue["protectionState"];
                                        if (protectionStateValue != null && protectionStateValue.Type != JTokenType.Null)
                                        {
                                            string protectionStateInstance = ((string)protectionStateValue);
                                            propertiesInstance.ProtectionState = protectionStateInstance;
                                        }
                                        
                                        JToken protectionStateDescriptionValue = propertiesValue["protectionStateDescription"];
                                        if (protectionStateDescriptionValue != null && protectionStateDescriptionValue.Type != JTokenType.Null)
                                        {
                                            string protectionStateDescriptionInstance = ((string)protectionStateDescriptionValue);
                                            propertiesInstance.ProtectionStateDescription = protectionStateDescriptionInstance;
                                        }
                                        
                                        JToken activeLocationValue = propertiesValue["activeLocation"];
                                        if (activeLocationValue != null && activeLocationValue.Type != JTokenType.Null)
                                        {
                                            string activeLocationInstance = ((string)activeLocationValue);
                                            propertiesInstance.ActiveLocation = activeLocationInstance;
                                        }
                                        
                                        JToken testFailoverStateValue = propertiesValue["testFailoverState"];
                                        if (testFailoverStateValue != null && testFailoverStateValue.Type != JTokenType.Null)
                                        {
                                            string testFailoverStateInstance = ((string)testFailoverStateValue);
                                            propertiesInstance.TestFailoverState = testFailoverStateInstance;
                                        }
                                        
                                        JToken testFailoverStateDescriptionValue = propertiesValue["testFailoverStateDescription"];
                                        if (testFailoverStateDescriptionValue != null && testFailoverStateDescriptionValue.Type != JTokenType.Null)
                                        {
                                            string testFailoverStateDescriptionInstance = ((string)testFailoverStateDescriptionValue);
                                            propertiesInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                                        }
                                        
                                        JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                        if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                            {
                                                propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                            }
                                        }
                                        
                                        JToken replicationHealthValue = propertiesValue["replicationHealth"];
                                        if (replicationHealthValue != null && replicationHealthValue.Type != JTokenType.Null)
                                        {
                                            string replicationHealthInstance = ((string)replicationHealthValue);
                                            propertiesInstance.ReplicationHealth = replicationHealthInstance;
                                        }
                                        
                                        JToken replicationHealthErrorsArray = propertiesValue["replicationHealthErrors"];
                                        if (replicationHealthErrorsArray != null && replicationHealthErrorsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken replicationHealthErrorsValue in ((JArray)replicationHealthErrorsArray))
                                            {
                                                HealthError healthErrorInstance = new HealthError();
                                                propertiesInstance.ReplicationHealthErrors.Add(healthErrorInstance);
                                                
                                                JToken errorLevelValue = replicationHealthErrorsValue["errorLevel"];
                                                if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                                {
                                                    string errorLevelInstance = ((string)errorLevelValue);
                                                    healthErrorInstance.ErrorLevel = errorLevelInstance;
                                                }
                                                
                                                JToken errorCodeValue = replicationHealthErrorsValue["errorCode"];
                                                if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                                {
                                                    string errorCodeInstance = ((string)errorCodeValue);
                                                    healthErrorInstance.ErrorCode = errorCodeInstance;
                                                }
                                                
                                                JToken errorMessageValue = replicationHealthErrorsValue["errorMessage"];
                                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                                {
                                                    string errorMessageInstance = ((string)errorMessageValue);
                                                    healthErrorInstance.ErrorMessage = errorMessageInstance;
                                                }
                                                
                                                JToken possibleCausesValue = replicationHealthErrorsValue["possibleCauses"];
                                                if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                                {
                                                    string possibleCausesInstance = ((string)possibleCausesValue);
                                                    healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                                }
                                                
                                                JToken recommendedActionValue = replicationHealthErrorsValue["recommendedAction"];
                                                if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                                {
                                                    string recommendedActionInstance = ((string)recommendedActionValue);
                                                    healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                                }
                                                
                                                JToken creationTimeUtcValue = replicationHealthErrorsValue["creationTimeUtc"];
                                                if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                                {
                                                    string creationTimeUtcInstance = ((string)creationTimeUtcValue);
                                                    healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                                }
                                                
                                                JToken recoveryProviderErrorMessageValue = replicationHealthErrorsValue["recoveryProviderErrorMessage"];
                                                if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                                    healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                                }
                                                
                                                JToken entityIdValue = replicationHealthErrorsValue["entityId"];
                                                if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                                {
                                                    string entityIdInstance = ((string)entityIdValue);
                                                    healthErrorInstance.EntityId = entityIdInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken policyIdValue = propertiesValue["policyId"];
                                        if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                        {
                                            string policyIdInstance = ((string)policyIdValue);
                                            propertiesInstance.PolicyID = policyIdInstance;
                                        }
                                        
                                        JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                        if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                            propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                        }
                                        
                                        JToken lastSuccessfulFailoverTimeValue = propertiesValue["lastSuccessfulFailoverTime"];
                                        if (lastSuccessfulFailoverTimeValue != null && lastSuccessfulFailoverTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastSuccessfulFailoverTimeInstance = ((DateTime)lastSuccessfulFailoverTimeValue);
                                            propertiesInstance.LastSuccessfulFailoverTime = lastSuccessfulFailoverTimeInstance;
                                        }
                                        
                                        JToken lastSuccessfulTestFailoverTimeValue = propertiesValue["lastSuccessfulTestFailoverTime"];
                                        if (lastSuccessfulTestFailoverTimeValue != null && lastSuccessfulTestFailoverTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastSuccessfulTestFailoverTimeInstance = ((DateTime)lastSuccessfulTestFailoverTimeValue);
                                            propertiesInstance.LastSuccessfulTestFailoverTime = lastSuccessfulTestFailoverTimeInstance;
                                        }
                                        
                                        JToken currentScenarioValue = propertiesValue["currentScenario"];
                                        if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                        {
                                            CurrentScenarioDetails currentScenarioInstance = new CurrentScenarioDetails();
                                            propertiesInstance.CurrentScenario = currentScenarioInstance;
                                            
                                            JToken scenarioNameValue = currentScenarioValue["scenarioName"];
                                            if (scenarioNameValue != null && scenarioNameValue.Type != JTokenType.Null)
                                            {
                                                string scenarioNameInstance = ((string)scenarioNameValue);
                                                currentScenarioInstance.ScenarioName = scenarioNameInstance;
                                            }
                                            
                                            JToken jobIdValue = currentScenarioValue["jobId"];
                                            if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                            {
                                                string jobIdInstance = ((string)jobIdValue);
                                                currentScenarioInstance.JobId = jobIdInstance;
                                            }
                                            
                                            JToken startTimeValue = currentScenarioValue["startTime"];
                                            if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime startTimeInstance = ((DateTime)startTimeValue);
                                                currentScenarioInstance.StartTime = startTimeInstance;
                                            }
                                        }
                                        
                                        JToken failoverRecoveryPointIdValue = propertiesValue["failoverRecoveryPointId"];
                                        if (failoverRecoveryPointIdValue != null && failoverRecoveryPointIdValue.Type != JTokenType.Null)
                                        {
                                            string failoverRecoveryPointIdInstance = ((string)failoverRecoveryPointIdValue);
                                            propertiesInstance.FailoverRecoveryPointId = failoverRecoveryPointIdInstance;
                                        }
                                        
                                        JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                        if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                        {
                                            string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                            if (typeName == "HyperVReplica2012")
                                            {
                                                HyperVReplica2012ReplicationDetails hyperVReplica2012ReplicationDetailsInstance = new HyperVReplica2012ReplicationDetails();
                                                
                                                JToken lastReplicatedTimeValue = providerSpecificDetailsValue["lastReplicatedTime"];
                                                if (lastReplicatedTimeValue != null && lastReplicatedTimeValue.Type != JTokenType.Null)
                                                {
                                                    string lastReplicatedTimeInstance = ((string)lastReplicatedTimeValue);
                                                    hyperVReplica2012ReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance;
                                                }
                                                
                                                JToken vmNicsArray = providerSpecificDetailsValue["vmNics"];
                                                if (vmNicsArray != null && vmNicsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken vmNicsValue in ((JArray)vmNicsArray))
                                                    {
                                                        VMNicDetails vMNicDetailsInstance = new VMNicDetails();
                                                        hyperVReplica2012ReplicationDetailsInstance.VmNics.Add(vMNicDetailsInstance);
                                                        
                                                        JToken nicIdValue = vmNicsValue["nicId"];
                                                        if (nicIdValue != null && nicIdValue.Type != JTokenType.Null)
                                                        {
                                                            string nicIdInstance = ((string)nicIdValue);
                                                            vMNicDetailsInstance.NicId = nicIdInstance;
                                                        }
                                                        
                                                        JToken vMSubnetNameValue = vmNicsValue["vMSubnetName"];
                                                        if (vMSubnetNameValue != null && vMSubnetNameValue.Type != JTokenType.Null)
                                                        {
                                                            string vMSubnetNameInstance = ((string)vMSubnetNameValue);
                                                            vMNicDetailsInstance.VMSubnetName = vMSubnetNameInstance;
                                                        }
                                                        
                                                        JToken vMNetworkNameValue = vmNicsValue["vMNetworkName"];
                                                        if (vMNetworkNameValue != null && vMNetworkNameValue.Type != JTokenType.Null)
                                                        {
                                                            string vMNetworkNameInstance = ((string)vMNetworkNameValue);
                                                            vMNicDetailsInstance.VMNetworkName = vMNetworkNameInstance;
                                                        }
                                                        
                                                        JToken recoveryVMNetworkIdValue = vmNicsValue["recoveryVMNetworkId"];
                                                        if (recoveryVMNetworkIdValue != null && recoveryVMNetworkIdValue.Type != JTokenType.Null)
                                                        {
                                                            string recoveryVMNetworkIdInstance = ((string)recoveryVMNetworkIdValue);
                                                            vMNicDetailsInstance.RecoveryVMNetworkId = recoveryVMNetworkIdInstance;
                                                        }
                                                        
                                                        JToken recoveryVMSubnetNameValue = vmNicsValue["recoveryVMSubnetName"];
                                                        if (recoveryVMSubnetNameValue != null && recoveryVMSubnetNameValue.Type != JTokenType.Null)
                                                        {
                                                            string recoveryVMSubnetNameInstance = ((string)recoveryVMSubnetNameValue);
                                                            vMNicDetailsInstance.RecoveryVMSubnetName = recoveryVMSubnetNameInstance;
                                                        }
                                                        
                                                        JToken ipAddressTypeValue = vmNicsValue["ipAddressType"];
                                                        if (ipAddressTypeValue != null && ipAddressTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string ipAddressTypeInstance = ((string)ipAddressTypeValue);
                                                            vMNicDetailsInstance.IpAddressType = ipAddressTypeInstance;
                                                        }
                                                        
                                                        JToken replicaNicStaticIPAddressValue = vmNicsValue["replicaNicStaticIPAddress"];
                                                        if (replicaNicStaticIPAddressValue != null && replicaNicStaticIPAddressValue.Type != JTokenType.Null)
                                                        {
                                                            string replicaNicStaticIPAddressInstance = ((string)replicaNicStaticIPAddressValue);
                                                            vMNicDetailsInstance.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance;
                                                        }
                                                        
                                                        JToken selectionTypeValue = vmNicsValue["selectionType"];
                                                        if (selectionTypeValue != null && selectionTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string selectionTypeInstance = ((string)selectionTypeValue);
                                                            vMNicDetailsInstance.SelectionType = selectionTypeInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken initialReplicationDetailsValue = providerSpecificDetailsValue["initialReplicationDetails"];
                                                if (initialReplicationDetailsValue != null && initialReplicationDetailsValue.Type != JTokenType.Null)
                                                {
                                                    InitialReplicationDetails initialReplicationDetailsInstance = new InitialReplicationDetails();
                                                    hyperVReplica2012ReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance;
                                                    
                                                    JToken initialReplicationTypeValue = initialReplicationDetailsValue["initialReplicationType"];
                                                    if (initialReplicationTypeValue != null && initialReplicationTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string initialReplicationTypeInstance = ((string)initialReplicationTypeValue);
                                                        initialReplicationDetailsInstance.InitialReplicationType = initialReplicationTypeInstance;
                                                    }
                                                    
                                                    JToken initialReplicationProgressPercentageValue = initialReplicationDetailsValue["initialReplicationProgressPercentage"];
                                                    if (initialReplicationProgressPercentageValue != null && initialReplicationProgressPercentageValue.Type != JTokenType.Null)
                                                    {
                                                        string initialReplicationProgressPercentageInstance = ((string)initialReplicationProgressPercentageValue);
                                                        initialReplicationDetailsInstance.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance;
                                                    }
                                                }
                                                
                                                JToken vMDiskDetailsArray = providerSpecificDetailsValue["vMDiskDetails"];
                                                if (vMDiskDetailsArray != null && vMDiskDetailsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken vMDiskDetailsValue in ((JArray)vMDiskDetailsArray))
                                                    {
                                                        DiskDetails diskDetailsInstance = new DiskDetails();
                                                        hyperVReplica2012ReplicationDetailsInstance.VMDiskDetails.Add(diskDetailsInstance);
                                                        
                                                        JToken maxSizeMBValue = vMDiskDetailsValue["maxSizeMB"];
                                                        if (maxSizeMBValue != null && maxSizeMBValue.Type != JTokenType.Null)
                                                        {
                                                            ulong maxSizeMBInstance = ((ulong)maxSizeMBValue);
                                                            diskDetailsInstance.MaxSizeMB = maxSizeMBInstance;
                                                        }
                                                        
                                                        JToken vhdTypeValue = vMDiskDetailsValue["vhdType"];
                                                        if (vhdTypeValue != null && vhdTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string vhdTypeInstance = ((string)vhdTypeValue);
                                                            diskDetailsInstance.VhdType = vhdTypeInstance;
                                                        }
                                                        
                                                        JToken vhdIdValue = vMDiskDetailsValue["vhdId"];
                                                        if (vhdIdValue != null && vhdIdValue.Type != JTokenType.Null)
                                                        {
                                                            string vhdIdInstance = ((string)vhdIdValue);
                                                            diskDetailsInstance.VhdId = vhdIdInstance;
                                                        }
                                                        
                                                        JToken vhdNameValue = vMDiskDetailsValue["vhdName"];
                                                        if (vhdNameValue != null && vhdNameValue.Type != JTokenType.Null)
                                                        {
                                                            string vhdNameInstance = ((string)vhdNameValue);
                                                            diskDetailsInstance.VhdName = vhdNameInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                                if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance = ((string)instanceTypeValue);
                                                    hyperVReplica2012ReplicationDetailsInstance.InstanceType = instanceTypeInstance;
                                                }
                                                propertiesInstance.ProviderSpecificDetails = hyperVReplica2012ReplicationDetailsInstance;
                                            }
                                            if (typeName == "HyperVReplica2012R2")
                                            {
                                                HyperVReplica2012R2ReplicationDetails hyperVReplica2012R2ReplicationDetailsInstance = new HyperVReplica2012R2ReplicationDetails();
                                                
                                                JToken lastReplicatedTimeValue2 = providerSpecificDetailsValue["lastReplicatedTime"];
                                                if (lastReplicatedTimeValue2 != null && lastReplicatedTimeValue2.Type != JTokenType.Null)
                                                {
                                                    string lastReplicatedTimeInstance2 = ((string)lastReplicatedTimeValue2);
                                                    hyperVReplica2012R2ReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance2;
                                                }
                                                
                                                JToken vmNicsArray2 = providerSpecificDetailsValue["vmNics"];
                                                if (vmNicsArray2 != null && vmNicsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken vmNicsValue2 in ((JArray)vmNicsArray2))
                                                    {
                                                        VMNicDetails vMNicDetailsInstance2 = new VMNicDetails();
                                                        hyperVReplica2012R2ReplicationDetailsInstance.VmNics.Add(vMNicDetailsInstance2);
                                                        
                                                        JToken nicIdValue2 = vmNicsValue2["nicId"];
                                                        if (nicIdValue2 != null && nicIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string nicIdInstance2 = ((string)nicIdValue2);
                                                            vMNicDetailsInstance2.NicId = nicIdInstance2;
                                                        }
                                                        
                                                        JToken vMSubnetNameValue2 = vmNicsValue2["vMSubnetName"];
                                                        if (vMSubnetNameValue2 != null && vMSubnetNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string vMSubnetNameInstance2 = ((string)vMSubnetNameValue2);
                                                            vMNicDetailsInstance2.VMSubnetName = vMSubnetNameInstance2;
                                                        }
                                                        
                                                        JToken vMNetworkNameValue2 = vmNicsValue2["vMNetworkName"];
                                                        if (vMNetworkNameValue2 != null && vMNetworkNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string vMNetworkNameInstance2 = ((string)vMNetworkNameValue2);
                                                            vMNicDetailsInstance2.VMNetworkName = vMNetworkNameInstance2;
                                                        }
                                                        
                                                        JToken recoveryVMNetworkIdValue2 = vmNicsValue2["recoveryVMNetworkId"];
                                                        if (recoveryVMNetworkIdValue2 != null && recoveryVMNetworkIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string recoveryVMNetworkIdInstance2 = ((string)recoveryVMNetworkIdValue2);
                                                            vMNicDetailsInstance2.RecoveryVMNetworkId = recoveryVMNetworkIdInstance2;
                                                        }
                                                        
                                                        JToken recoveryVMSubnetNameValue2 = vmNicsValue2["recoveryVMSubnetName"];
                                                        if (recoveryVMSubnetNameValue2 != null && recoveryVMSubnetNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string recoveryVMSubnetNameInstance2 = ((string)recoveryVMSubnetNameValue2);
                                                            vMNicDetailsInstance2.RecoveryVMSubnetName = recoveryVMSubnetNameInstance2;
                                                        }
                                                        
                                                        JToken ipAddressTypeValue2 = vmNicsValue2["ipAddressType"];
                                                        if (ipAddressTypeValue2 != null && ipAddressTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string ipAddressTypeInstance2 = ((string)ipAddressTypeValue2);
                                                            vMNicDetailsInstance2.IpAddressType = ipAddressTypeInstance2;
                                                        }
                                                        
                                                        JToken replicaNicStaticIPAddressValue2 = vmNicsValue2["replicaNicStaticIPAddress"];
                                                        if (replicaNicStaticIPAddressValue2 != null && replicaNicStaticIPAddressValue2.Type != JTokenType.Null)
                                                        {
                                                            string replicaNicStaticIPAddressInstance2 = ((string)replicaNicStaticIPAddressValue2);
                                                            vMNicDetailsInstance2.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance2;
                                                        }
                                                        
                                                        JToken selectionTypeValue2 = vmNicsValue2["selectionType"];
                                                        if (selectionTypeValue2 != null && selectionTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string selectionTypeInstance2 = ((string)selectionTypeValue2);
                                                            vMNicDetailsInstance2.SelectionType = selectionTypeInstance2;
                                                        }
                                                    }
                                                }
                                                
                                                JToken initialReplicationDetailsValue2 = providerSpecificDetailsValue["initialReplicationDetails"];
                                                if (initialReplicationDetailsValue2 != null && initialReplicationDetailsValue2.Type != JTokenType.Null)
                                                {
                                                    InitialReplicationDetails initialReplicationDetailsInstance2 = new InitialReplicationDetails();
                                                    hyperVReplica2012R2ReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance2;
                                                    
                                                    JToken initialReplicationTypeValue2 = initialReplicationDetailsValue2["initialReplicationType"];
                                                    if (initialReplicationTypeValue2 != null && initialReplicationTypeValue2.Type != JTokenType.Null)
                                                    {
                                                        string initialReplicationTypeInstance2 = ((string)initialReplicationTypeValue2);
                                                        initialReplicationDetailsInstance2.InitialReplicationType = initialReplicationTypeInstance2;
                                                    }
                                                    
                                                    JToken initialReplicationProgressPercentageValue2 = initialReplicationDetailsValue2["initialReplicationProgressPercentage"];
                                                    if (initialReplicationProgressPercentageValue2 != null && initialReplicationProgressPercentageValue2.Type != JTokenType.Null)
                                                    {
                                                        string initialReplicationProgressPercentageInstance2 = ((string)initialReplicationProgressPercentageValue2);
                                                        initialReplicationDetailsInstance2.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance2;
                                                    }
                                                }
                                                
                                                JToken vMDiskDetailsArray2 = providerSpecificDetailsValue["vMDiskDetails"];
                                                if (vMDiskDetailsArray2 != null && vMDiskDetailsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken vMDiskDetailsValue2 in ((JArray)vMDiskDetailsArray2))
                                                    {
                                                        DiskDetails diskDetailsInstance2 = new DiskDetails();
                                                        hyperVReplica2012R2ReplicationDetailsInstance.VMDiskDetails.Add(diskDetailsInstance2);
                                                        
                                                        JToken maxSizeMBValue2 = vMDiskDetailsValue2["maxSizeMB"];
                                                        if (maxSizeMBValue2 != null && maxSizeMBValue2.Type != JTokenType.Null)
                                                        {
                                                            ulong maxSizeMBInstance2 = ((ulong)maxSizeMBValue2);
                                                            diskDetailsInstance2.MaxSizeMB = maxSizeMBInstance2;
                                                        }
                                                        
                                                        JToken vhdTypeValue2 = vMDiskDetailsValue2["vhdType"];
                                                        if (vhdTypeValue2 != null && vhdTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string vhdTypeInstance2 = ((string)vhdTypeValue2);
                                                            diskDetailsInstance2.VhdType = vhdTypeInstance2;
                                                        }
                                                        
                                                        JToken vhdIdValue2 = vMDiskDetailsValue2["vhdId"];
                                                        if (vhdIdValue2 != null && vhdIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string vhdIdInstance2 = ((string)vhdIdValue2);
                                                            diskDetailsInstance2.VhdId = vhdIdInstance2;
                                                        }
                                                        
                                                        JToken vhdNameValue2 = vMDiskDetailsValue2["vhdName"];
                                                        if (vhdNameValue2 != null && vhdNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string vhdNameInstance2 = ((string)vhdNameValue2);
                                                            diskDetailsInstance2.VhdName = vhdNameInstance2;
                                                        }
                                                    }
                                                }
                                                
                                                JToken instanceTypeValue2 = providerSpecificDetailsValue["instanceType"];
                                                if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                                    hyperVReplica2012R2ReplicationDetailsInstance.InstanceType = instanceTypeInstance2;
                                                }
                                                propertiesInstance.ProviderSpecificDetails = hyperVReplica2012R2ReplicationDetailsInstance;
                                            }
                                            if (typeName == "VMwareAzureV2")
                                            {
                                                VMwareAzureV2ProviderSpecificSettings vMwareAzureV2ProviderSpecificSettingsInstance = new VMwareAzureV2ProviderSpecificSettings();
                                                
                                                JToken infrastructureVmIdValue = providerSpecificDetailsValue["infrastructureVmId"];
                                                if (infrastructureVmIdValue != null && infrastructureVmIdValue.Type != JTokenType.Null)
                                                {
                                                    string infrastructureVmIdInstance = ((string)infrastructureVmIdValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.InfrastructureVmId = infrastructureVmIdInstance;
                                                }
                                                
                                                JToken vCenterInfrastructureIdValue = providerSpecificDetailsValue["vCenterInfrastructureId"];
                                                if (vCenterInfrastructureIdValue != null && vCenterInfrastructureIdValue.Type != JTokenType.Null)
                                                {
                                                    string vCenterInfrastructureIdInstance = ((string)vCenterInfrastructureIdValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.VCenterInfrastructureId = vCenterInfrastructureIdInstance;
                                                }
                                                
                                                JToken protectionStageValue = providerSpecificDetailsValue["protectionStage"];
                                                if (protectionStageValue != null && protectionStageValue.Type != JTokenType.Null)
                                                {
                                                    string protectionStageInstance = ((string)protectionStageValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.ProtectionStage = protectionStageInstance;
                                                }
                                                
                                                JToken healthErrorCodeValue = providerSpecificDetailsValue["healthErrorCode"];
                                                if (healthErrorCodeValue != null && healthErrorCodeValue.Type != JTokenType.Null)
                                                {
                                                    string healthErrorCodeInstance = ((string)healthErrorCodeValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.HealthErrorCode = healthErrorCodeInstance;
                                                }
                                                
                                                JToken resyncRequiredValue = providerSpecificDetailsValue["resyncRequired"];
                                                if (resyncRequiredValue != null && resyncRequiredValue.Type != JTokenType.Null)
                                                {
                                                    bool resyncRequiredInstance = ((bool)resyncRequiredValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.ResyncRequired = resyncRequiredInstance;
                                                }
                                                
                                                JToken resyncProgressPercentageValue = providerSpecificDetailsValue["resyncProgressPercentage"];
                                                if (resyncProgressPercentageValue != null && resyncProgressPercentageValue.Type != JTokenType.Null)
                                                {
                                                    int resyncProgressPercentageInstance = ((int)resyncProgressPercentageValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.ResyncProgressPercentage = resyncProgressPercentageInstance;
                                                }
                                                
                                                JToken rpoInSecondsValue = providerSpecificDetailsValue["rpoInSeconds"];
                                                if (rpoInSecondsValue != null && rpoInSecondsValue.Type != JTokenType.Null)
                                                {
                                                    long rpoInSecondsInstance = ((long)rpoInSecondsValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.RpoInSeconds = rpoInSecondsInstance;
                                                }
                                                
                                                JToken compressedDataRateInMBValue = providerSpecificDetailsValue["compressedDataRateInMB"];
                                                if (compressedDataRateInMBValue != null && compressedDataRateInMBValue.Type != JTokenType.Null)
                                                {
                                                    double compressedDataRateInMBInstance = ((double)compressedDataRateInMBValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.CompressedDataRateInMB = compressedDataRateInMBInstance;
                                                }
                                                
                                                JToken uncompressedDataRateInMBValue = providerSpecificDetailsValue["uncompressedDataRateInMB"];
                                                if (uncompressedDataRateInMBValue != null && uncompressedDataRateInMBValue.Type != JTokenType.Null)
                                                {
                                                    double uncompressedDataRateInMBInstance = ((double)uncompressedDataRateInMBValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.UncompressedDataRateInMB = uncompressedDataRateInMBInstance;
                                                }
                                                
                                                JToken ipAddressValue = providerSpecificDetailsValue["ipAddress"];
                                                if (ipAddressValue != null && ipAddressValue.Type != JTokenType.Null)
                                                {
                                                    string ipAddressInstance = ((string)ipAddressValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.IpAddress = ipAddressInstance;
                                                }
                                                
                                                JToken agentVersionValue = providerSpecificDetailsValue["agentVersion"];
                                                if (agentVersionValue != null && agentVersionValue.Type != JTokenType.Null)
                                                {
                                                    string agentVersionInstance = ((string)agentVersionValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.AgentVersion = agentVersionInstance;
                                                }
                                                
                                                JToken latestUpdateVersionValue = providerSpecificDetailsValue["latestUpdateVersion"];
                                                if (latestUpdateVersionValue != null && latestUpdateVersionValue.Type != JTokenType.Null)
                                                {
                                                    string latestUpdateVersionInstance = ((string)latestUpdateVersionValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.LatestUpdateVersion = latestUpdateVersionInstance;
                                                }
                                                
                                                JToken isAgentUpdateRequiredValue = providerSpecificDetailsValue["isAgentUpdateRequired"];
                                                if (isAgentUpdateRequiredValue != null && isAgentUpdateRequiredValue.Type != JTokenType.Null)
                                                {
                                                    bool isAgentUpdateRequiredInstance = ((bool)isAgentUpdateRequiredValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.IsAgentUpdateRequired = isAgentUpdateRequiredInstance;
                                                }
                                                
                                                JToken isRebootAfterUpdateRequiredValue = providerSpecificDetailsValue["isRebootAfterUpdateRequired"];
                                                if (isRebootAfterUpdateRequiredValue != null && isRebootAfterUpdateRequiredValue.Type != JTokenType.Null)
                                                {
                                                    bool isRebootAfterUpdateRequiredInstance = ((bool)isRebootAfterUpdateRequiredValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.IsRebootAfterUpdateRequired = isRebootAfterUpdateRequiredInstance;
                                                }
                                                
                                                JToken lastHeartbeatValue = providerSpecificDetailsValue["lastHeartbeat"];
                                                if (lastHeartbeatValue != null && lastHeartbeatValue.Type != JTokenType.Null)
                                                {
                                                    DateTime lastHeartbeatInstance = ((DateTime)lastHeartbeatValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.LastHeartbeat = lastHeartbeatInstance;
                                                }
                                                
                                                JToken processServerIdValue = providerSpecificDetailsValue["processServerId"];
                                                if (processServerIdValue != null && processServerIdValue.Type != JTokenType.Null)
                                                {
                                                    string processServerIdInstance = ((string)processServerIdValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.ProcessServerId = processServerIdInstance;
                                                }
                                                
                                                JToken multiVmGroupIdValue = providerSpecificDetailsValue["multiVmGroupId"];
                                                if (multiVmGroupIdValue != null && multiVmGroupIdValue.Type != JTokenType.Null)
                                                {
                                                    string multiVmGroupIdInstance = ((string)multiVmGroupIdValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.MultiVmGroupId = multiVmGroupIdInstance;
                                                }
                                                
                                                JToken multiVmGroupNameValue = providerSpecificDetailsValue["multiVmGroupName"];
                                                if (multiVmGroupNameValue != null && multiVmGroupNameValue.Type != JTokenType.Null)
                                                {
                                                    string multiVmGroupNameInstance = ((string)multiVmGroupNameValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.MultiVmGroupName = multiVmGroupNameInstance;
                                                }
                                                
                                                JToken protectedVolumesArray = providerSpecificDetailsValue["protectedVolumes"];
                                                if (protectedVolumesArray != null && protectedVolumesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken protectedVolumesValue in ((JArray)protectedVolumesArray))
                                                    {
                                                        VMwareAzureV2ProtectedVolumeDetails vMwareAzureV2ProtectedVolumeDetailsInstance = new VMwareAzureV2ProtectedVolumeDetails();
                                                        vMwareAzureV2ProviderSpecificSettingsInstance.ProtectedVolumes.Add(vMwareAzureV2ProtectedVolumeDetailsInstance);
                                                        
                                                        JToken nameValue = protectedVolumesValue["name"];
                                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance = ((string)nameValue);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.Name = nameInstance;
                                                        }
                                                        
                                                        JToken protectionStageValue2 = protectedVolumesValue["protectionStage"];
                                                        if (protectionStageValue2 != null && protectionStageValue2.Type != JTokenType.Null)
                                                        {
                                                            string protectionStageInstance2 = ((string)protectionStageValue2);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.ProtectionStage = protectionStageInstance2;
                                                        }
                                                        
                                                        JToken healthErrorCodeValue2 = protectedVolumesValue["healthErrorCode"];
                                                        if (healthErrorCodeValue2 != null && healthErrorCodeValue2.Type != JTokenType.Null)
                                                        {
                                                            string healthErrorCodeInstance2 = ((string)healthErrorCodeValue2);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.HealthErrorCode = healthErrorCodeInstance2;
                                                        }
                                                        
                                                        JToken rpoInSecondsValue2 = protectedVolumesValue["rpoInSeconds"];
                                                        if (rpoInSecondsValue2 != null && rpoInSecondsValue2.Type != JTokenType.Null)
                                                        {
                                                            long rpoInSecondsInstance2 = ((long)rpoInSecondsValue2);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.RpoInSeconds = rpoInSecondsInstance2;
                                                        }
                                                        
                                                        JToken resyncRequiredValue2 = protectedVolumesValue["resyncRequired"];
                                                        if (resyncRequiredValue2 != null && resyncRequiredValue2.Type != JTokenType.Null)
                                                        {
                                                            bool resyncRequiredInstance2 = ((bool)resyncRequiredValue2);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncRequired = resyncRequiredInstance2;
                                                        }
                                                        
                                                        JToken resyncProgressPercentageValue2 = protectedVolumesValue["resyncProgressPercentage"];
                                                        if (resyncProgressPercentageValue2 != null && resyncProgressPercentageValue2.Type != JTokenType.Null)
                                                        {
                                                            int resyncProgressPercentageInstance2 = ((int)resyncProgressPercentageValue2);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncProgressPercentage = resyncProgressPercentageInstance2;
                                                        }
                                                        
                                                        JToken resyncDurationInSecondsValue = protectedVolumesValue["resyncDurationInSeconds"];
                                                        if (resyncDurationInSecondsValue != null && resyncDurationInSecondsValue.Type != JTokenType.Null)
                                                        {
                                                            long resyncDurationInSecondsInstance = ((long)resyncDurationInSecondsValue);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncDurationInSeconds = resyncDurationInSecondsInstance;
                                                        }
                                                        
                                                        JToken volumeCapacityInBytesValue = protectedVolumesValue["volumeCapacityInBytes"];
                                                        if (volumeCapacityInBytesValue != null && volumeCapacityInBytesValue.Type != JTokenType.Null)
                                                        {
                                                            long volumeCapacityInBytesInstance = ((long)volumeCapacityInBytesValue);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.VolumeCapacityInBytes = volumeCapacityInBytesInstance;
                                                        }
                                                        
                                                        JToken fileSystemCapacityInBytesValue = protectedVolumesValue["fileSystemCapacityInBytes"];
                                                        if (fileSystemCapacityInBytesValue != null && fileSystemCapacityInBytesValue.Type != JTokenType.Null)
                                                        {
                                                            long fileSystemCapacityInBytesInstance = ((long)fileSystemCapacityInBytesValue);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.FileSystemCapacityInBytes = fileSystemCapacityInBytesInstance;
                                                        }
                                                        
                                                        JToken sourceDataInMBValue = protectedVolumesValue["sourceDataInMB"];
                                                        if (sourceDataInMBValue != null && sourceDataInMBValue.Type != JTokenType.Null)
                                                        {
                                                            double sourceDataInMBInstance = ((double)sourceDataInMBValue);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.SourceDataInMB = sourceDataInMBInstance;
                                                        }
                                                        
                                                        JToken psDataInMBValue = protectedVolumesValue["psDataInMB"];
                                                        if (psDataInMBValue != null && psDataInMBValue.Type != JTokenType.Null)
                                                        {
                                                            double psDataInMBInstance = ((double)psDataInMBValue);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.PSDataInMB = psDataInMBInstance;
                                                        }
                                                        
                                                        JToken targetDataInMBValue = protectedVolumesValue["targetDataInMB"];
                                                        if (targetDataInMBValue != null && targetDataInMBValue.Type != JTokenType.Null)
                                                        {
                                                            double targetDataInMBInstance = ((double)targetDataInMBValue);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.TargetDataInMB = targetDataInMBInstance;
                                                        }
                                                        
                                                        JToken volumeResizedValue = protectedVolumesValue["volumeResized"];
                                                        if (volumeResizedValue != null && volumeResizedValue.Type != JTokenType.Null)
                                                        {
                                                            bool volumeResizedInstance = ((bool)volumeResizedValue);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.VolumeResized = volumeResizedInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken volumeResizedValue2 = providerSpecificDetailsValue["volumeResized"];
                                                if (volumeResizedValue2 != null && volumeResizedValue2.Type != JTokenType.Null)
                                                {
                                                    bool volumeResizedInstance2 = ((bool)volumeResizedValue2);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.VolumeResized = volumeResizedInstance2;
                                                }
                                                
                                                JToken masterTargetIdValue = providerSpecificDetailsValue["masterTargetId"];
                                                if (masterTargetIdValue != null && masterTargetIdValue.Type != JTokenType.Null)
                                                {
                                                    string masterTargetIdInstance = ((string)masterTargetIdValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.MasterTargetId = masterTargetIdInstance;
                                                }
                                                
                                                JToken sourceVmCPUCountValue = providerSpecificDetailsValue["sourceVmCPUCount"];
                                                if (sourceVmCPUCountValue != null && sourceVmCPUCountValue.Type != JTokenType.Null)
                                                {
                                                    int sourceVmCPUCountInstance = ((int)sourceVmCPUCountValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.SourceVmCPUCount = sourceVmCPUCountInstance;
                                                }
                                                
                                                JToken sourceVmRAMSizeInMBValue = providerSpecificDetailsValue["sourceVmRAMSizeInMB"];
                                                if (sourceVmRAMSizeInMBValue != null && sourceVmRAMSizeInMBValue.Type != JTokenType.Null)
                                                {
                                                    int sourceVmRAMSizeInMBInstance = ((int)sourceVmRAMSizeInMBValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.SourceVmRAMSizeInMB = sourceVmRAMSizeInMBInstance;
                                                }
                                                
                                                JToken osTypeValue = providerSpecificDetailsValue["osType"];
                                                if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance = ((string)osTypeValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.OSType = osTypeInstance;
                                                }
                                                
                                                JToken vhdNameValue3 = providerSpecificDetailsValue["vhdName"];
                                                if (vhdNameValue3 != null && vhdNameValue3.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance3 = ((string)vhdNameValue3);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.VHDName = vhdNameInstance3;
                                                }
                                                
                                                JToken osDiskIdValue = providerSpecificDetailsValue["osDiskId"];
                                                if (osDiskIdValue != null && osDiskIdValue.Type != JTokenType.Null)
                                                {
                                                    string osDiskIdInstance = ((string)osDiskIdValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.OSDiskId = osDiskIdInstance;
                                                }
                                                
                                                JToken azureVMDiskDetailsArray = providerSpecificDetailsValue["azureVMDiskDetails"];
                                                if (azureVMDiskDetailsArray != null && azureVMDiskDetailsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken azureVMDiskDetailsValue in ((JArray)azureVMDiskDetailsArray))
                                                    {
                                                        AzureVmDiskDetails azureVmDiskDetailsInstance = new AzureVmDiskDetails();
                                                        vMwareAzureV2ProviderSpecificSettingsInstance.AzureVMDiskDetails.Add(azureVmDiskDetailsInstance);
                                                        
                                                        JToken vhdTypeValue3 = azureVMDiskDetailsValue["vhdType"];
                                                        if (vhdTypeValue3 != null && vhdTypeValue3.Type != JTokenType.Null)
                                                        {
                                                            string vhdTypeInstance3 = ((string)vhdTypeValue3);
                                                            azureVmDiskDetailsInstance.VhdType = vhdTypeInstance3;
                                                        }
                                                        
                                                        JToken vhdIdValue3 = azureVMDiskDetailsValue["vhdId"];
                                                        if (vhdIdValue3 != null && vhdIdValue3.Type != JTokenType.Null)
                                                        {
                                                            string vhdIdInstance3 = ((string)vhdIdValue3);
                                                            azureVmDiskDetailsInstance.VhdId = vhdIdInstance3;
                                                        }
                                                        
                                                        JToken vhdNameValue4 = azureVMDiskDetailsValue["vhdName"];
                                                        if (vhdNameValue4 != null && vhdNameValue4.Type != JTokenType.Null)
                                                        {
                                                            string vhdNameInstance4 = ((string)vhdNameValue4);
                                                            azureVmDiskDetailsInstance.VhdName = vhdNameInstance4;
                                                        }
                                                        
                                                        JToken maxSizeMBValue3 = azureVMDiskDetailsValue["maxSizeMB"];
                                                        if (maxSizeMBValue3 != null && maxSizeMBValue3.Type != JTokenType.Null)
                                                        {
                                                            string maxSizeMBInstance3 = ((string)maxSizeMBValue3);
                                                            azureVmDiskDetailsInstance.MaxSizeMB = maxSizeMBInstance3;
                                                        }
                                                        
                                                        JToken targetDiskLocationValue = azureVMDiskDetailsValue["targetDiskLocation"];
                                                        if (targetDiskLocationValue != null && targetDiskLocationValue.Type != JTokenType.Null)
                                                        {
                                                            string targetDiskLocationInstance = ((string)targetDiskLocationValue);
                                                            azureVmDiskDetailsInstance.TargetDiskLocation = targetDiskLocationInstance;
                                                        }
                                                        
                                                        JToken lunIdValue = azureVMDiskDetailsValue["lunId"];
                                                        if (lunIdValue != null && lunIdValue.Type != JTokenType.Null)
                                                        {
                                                            string lunIdInstance = ((string)lunIdValue);
                                                            azureVmDiskDetailsInstance.LunId = lunIdInstance;
                                                        }
                                                        
                                                        JToken targetDiskNameValue = azureVMDiskDetailsValue["targetDiskName"];
                                                        if (targetDiskNameValue != null && targetDiskNameValue.Type != JTokenType.Null)
                                                        {
                                                            string targetDiskNameInstance = ((string)targetDiskNameValue);
                                                            azureVmDiskDetailsInstance.TargetDiskName = targetDiskNameInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken recoveryAzureVMNameValue = providerSpecificDetailsValue["recoveryAzureVMName"];
                                                if (recoveryAzureVMNameValue != null && recoveryAzureVMNameValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryAzureVMNameInstance = ((string)recoveryAzureVMNameValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance;
                                                }
                                                
                                                JToken recoveryAzureVMSizeValue = providerSpecificDetailsValue["recoveryAzureVMSize"];
                                                if (recoveryAzureVMSizeValue != null && recoveryAzureVMSizeValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryAzureVMSizeInstance = ((string)recoveryAzureVMSizeValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance;
                                                }
                                                
                                                JToken recoveryAzureStorageAccountValue = providerSpecificDetailsValue["recoveryAzureStorageAccount"];
                                                if (recoveryAzureStorageAccountValue != null && recoveryAzureStorageAccountValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryAzureStorageAccountInstance = ((string)recoveryAzureStorageAccountValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureStorageAccount = recoveryAzureStorageAccountInstance;
                                                }
                                                
                                                JToken vmNicsArray3 = providerSpecificDetailsValue["vmNics"];
                                                if (vmNicsArray3 != null && vmNicsArray3.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken vmNicsValue3 in ((JArray)vmNicsArray3))
                                                    {
                                                        VMNicDetails vMNicDetailsInstance3 = new VMNicDetails();
                                                        vMwareAzureV2ProviderSpecificSettingsInstance.VMNics.Add(vMNicDetailsInstance3);
                                                        
                                                        JToken nicIdValue3 = vmNicsValue3["nicId"];
                                                        if (nicIdValue3 != null && nicIdValue3.Type != JTokenType.Null)
                                                        {
                                                            string nicIdInstance3 = ((string)nicIdValue3);
                                                            vMNicDetailsInstance3.NicId = nicIdInstance3;
                                                        }
                                                        
                                                        JToken vMSubnetNameValue3 = vmNicsValue3["vMSubnetName"];
                                                        if (vMSubnetNameValue3 != null && vMSubnetNameValue3.Type != JTokenType.Null)
                                                        {
                                                            string vMSubnetNameInstance3 = ((string)vMSubnetNameValue3);
                                                            vMNicDetailsInstance3.VMSubnetName = vMSubnetNameInstance3;
                                                        }
                                                        
                                                        JToken vMNetworkNameValue3 = vmNicsValue3["vMNetworkName"];
                                                        if (vMNetworkNameValue3 != null && vMNetworkNameValue3.Type != JTokenType.Null)
                                                        {
                                                            string vMNetworkNameInstance3 = ((string)vMNetworkNameValue3);
                                                            vMNicDetailsInstance3.VMNetworkName = vMNetworkNameInstance3;
                                                        }
                                                        
                                                        JToken recoveryVMNetworkIdValue3 = vmNicsValue3["recoveryVMNetworkId"];
                                                        if (recoveryVMNetworkIdValue3 != null && recoveryVMNetworkIdValue3.Type != JTokenType.Null)
                                                        {
                                                            string recoveryVMNetworkIdInstance3 = ((string)recoveryVMNetworkIdValue3);
                                                            vMNicDetailsInstance3.RecoveryVMNetworkId = recoveryVMNetworkIdInstance3;
                                                        }
                                                        
                                                        JToken recoveryVMSubnetNameValue3 = vmNicsValue3["recoveryVMSubnetName"];
                                                        if (recoveryVMSubnetNameValue3 != null && recoveryVMSubnetNameValue3.Type != JTokenType.Null)
                                                        {
                                                            string recoveryVMSubnetNameInstance3 = ((string)recoveryVMSubnetNameValue3);
                                                            vMNicDetailsInstance3.RecoveryVMSubnetName = recoveryVMSubnetNameInstance3;
                                                        }
                                                        
                                                        JToken ipAddressTypeValue3 = vmNicsValue3["ipAddressType"];
                                                        if (ipAddressTypeValue3 != null && ipAddressTypeValue3.Type != JTokenType.Null)
                                                        {
                                                            string ipAddressTypeInstance3 = ((string)ipAddressTypeValue3);
                                                            vMNicDetailsInstance3.IpAddressType = ipAddressTypeInstance3;
                                                        }
                                                        
                                                        JToken replicaNicStaticIPAddressValue3 = vmNicsValue3["replicaNicStaticIPAddress"];
                                                        if (replicaNicStaticIPAddressValue3 != null && replicaNicStaticIPAddressValue3.Type != JTokenType.Null)
                                                        {
                                                            string replicaNicStaticIPAddressInstance3 = ((string)replicaNicStaticIPAddressValue3);
                                                            vMNicDetailsInstance3.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance3;
                                                        }
                                                        
                                                        JToken selectionTypeValue3 = vmNicsValue3["selectionType"];
                                                        if (selectionTypeValue3 != null && selectionTypeValue3.Type != JTokenType.Null)
                                                        {
                                                            string selectionTypeInstance3 = ((string)selectionTypeValue3);
                                                            vMNicDetailsInstance3.SelectionType = selectionTypeInstance3;
                                                        }
                                                    }
                                                }
                                                
                                                JToken selectedRecoveryAzureNetworkIdValue = providerSpecificDetailsValue["selectedRecoveryAzureNetworkId"];
                                                if (selectedRecoveryAzureNetworkIdValue != null && selectedRecoveryAzureNetworkIdValue.Type != JTokenType.Null)
                                                {
                                                    string selectedRecoveryAzureNetworkIdInstance = ((string)selectedRecoveryAzureNetworkIdValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance;
                                                }
                                                
                                                JToken discoveryTypeValue = providerSpecificDetailsValue["discoveryType"];
                                                if (discoveryTypeValue != null && discoveryTypeValue.Type != JTokenType.Null)
                                                {
                                                    string discoveryTypeInstance = ((string)discoveryTypeValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.DiscoveryType = discoveryTypeInstance;
                                                }
                                                
                                                JToken instanceTypeValue3 = providerSpecificDetailsValue["instanceType"];
                                                if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.InstanceType = instanceTypeInstance3;
                                                }
                                                propertiesInstance.ProviderSpecificDetails = vMwareAzureV2ProviderSpecificSettingsInstance;
                                            }
                                            if (typeName == "HyperVReplicaAzure")
                                            {
                                                HyperVReplicaAzureReplicationDetails hyperVReplicaAzureReplicationDetailsInstance = new HyperVReplicaAzureReplicationDetails();
                                                
                                                JToken azureVMDiskDetailsArray2 = providerSpecificDetailsValue["azureVMDiskDetails"];
                                                if (azureVMDiskDetailsArray2 != null && azureVMDiskDetailsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken azureVMDiskDetailsValue2 in ((JArray)azureVMDiskDetailsArray2))
                                                    {
                                                        AzureVmDiskDetails azureVmDiskDetailsInstance2 = new AzureVmDiskDetails();
                                                        hyperVReplicaAzureReplicationDetailsInstance.AzureVMDiskDetails.Add(azureVmDiskDetailsInstance2);
                                                        
                                                        JToken vhdTypeValue4 = azureVMDiskDetailsValue2["vhdType"];
                                                        if (vhdTypeValue4 != null && vhdTypeValue4.Type != JTokenType.Null)
                                                        {
                                                            string vhdTypeInstance4 = ((string)vhdTypeValue4);
                                                            azureVmDiskDetailsInstance2.VhdType = vhdTypeInstance4;
                                                        }
                                                        
                                                        JToken vhdIdValue4 = azureVMDiskDetailsValue2["vhdId"];
                                                        if (vhdIdValue4 != null && vhdIdValue4.Type != JTokenType.Null)
                                                        {
                                                            string vhdIdInstance4 = ((string)vhdIdValue4);
                                                            azureVmDiskDetailsInstance2.VhdId = vhdIdInstance4;
                                                        }
                                                        
                                                        JToken vhdNameValue5 = azureVMDiskDetailsValue2["vhdName"];
                                                        if (vhdNameValue5 != null && vhdNameValue5.Type != JTokenType.Null)
                                                        {
                                                            string vhdNameInstance5 = ((string)vhdNameValue5);
                                                            azureVmDiskDetailsInstance2.VhdName = vhdNameInstance5;
                                                        }
                                                        
                                                        JToken maxSizeMBValue4 = azureVMDiskDetailsValue2["maxSizeMB"];
                                                        if (maxSizeMBValue4 != null && maxSizeMBValue4.Type != JTokenType.Null)
                                                        {
                                                            string maxSizeMBInstance4 = ((string)maxSizeMBValue4);
                                                            azureVmDiskDetailsInstance2.MaxSizeMB = maxSizeMBInstance4;
                                                        }
                                                        
                                                        JToken targetDiskLocationValue2 = azureVMDiskDetailsValue2["targetDiskLocation"];
                                                        if (targetDiskLocationValue2 != null && targetDiskLocationValue2.Type != JTokenType.Null)
                                                        {
                                                            string targetDiskLocationInstance2 = ((string)targetDiskLocationValue2);
                                                            azureVmDiskDetailsInstance2.TargetDiskLocation = targetDiskLocationInstance2;
                                                        }
                                                        
                                                        JToken lunIdValue2 = azureVMDiskDetailsValue2["lunId"];
                                                        if (lunIdValue2 != null && lunIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string lunIdInstance2 = ((string)lunIdValue2);
                                                            azureVmDiskDetailsInstance2.LunId = lunIdInstance2;
                                                        }
                                                        
                                                        JToken targetDiskNameValue2 = azureVMDiskDetailsValue2["targetDiskName"];
                                                        if (targetDiskNameValue2 != null && targetDiskNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string targetDiskNameInstance2 = ((string)targetDiskNameValue2);
                                                            azureVmDiskDetailsInstance2.TargetDiskName = targetDiskNameInstance2;
                                                        }
                                                    }
                                                }
                                                
                                                JToken recoveryAzureVMNameValue2 = providerSpecificDetailsValue["recoveryAzureVMName"];
                                                if (recoveryAzureVMNameValue2 != null && recoveryAzureVMNameValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryAzureVMNameInstance2 = ((string)recoveryAzureVMNameValue2);
                                                    hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance2;
                                                }
                                                
                                                JToken recoveryAzureVMSizeValue2 = providerSpecificDetailsValue["recoveryAzureVMSize"];
                                                if (recoveryAzureVMSizeValue2 != null && recoveryAzureVMSizeValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryAzureVMSizeInstance2 = ((string)recoveryAzureVMSizeValue2);
                                                    hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance2;
                                                }
                                                
                                                JToken recoveryAzureStorageAccountValue2 = providerSpecificDetailsValue["recoveryAzureStorageAccount"];
                                                if (recoveryAzureStorageAccountValue2 != null && recoveryAzureStorageAccountValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryAzureStorageAccountInstance2 = ((string)recoveryAzureStorageAccountValue2);
                                                    hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureStorageAccount = recoveryAzureStorageAccountInstance2;
                                                }
                                                
                                                JToken lastReplicatedTimeValue3 = providerSpecificDetailsValue["lastReplicatedTime"];
                                                if (lastReplicatedTimeValue3 != null && lastReplicatedTimeValue3.Type != JTokenType.Null)
                                                {
                                                    string lastReplicatedTimeInstance3 = ((string)lastReplicatedTimeValue3);
                                                    hyperVReplicaAzureReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance3;
                                                }
                                                
                                                JToken initialReplicationDetailsValue3 = providerSpecificDetailsValue["initialReplicationDetails"];
                                                if (initialReplicationDetailsValue3 != null && initialReplicationDetailsValue3.Type != JTokenType.Null)
                                                {
                                                    InitialReplicationDetails initialReplicationDetailsInstance3 = new InitialReplicationDetails();
                                                    hyperVReplicaAzureReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance3;
                                                    
                                                    JToken initialReplicationTypeValue3 = initialReplicationDetailsValue3["initialReplicationType"];
                                                    if (initialReplicationTypeValue3 != null && initialReplicationTypeValue3.Type != JTokenType.Null)
                                                    {
                                                        string initialReplicationTypeInstance3 = ((string)initialReplicationTypeValue3);
                                                        initialReplicationDetailsInstance3.InitialReplicationType = initialReplicationTypeInstance3;
                                                    }
                                                    
                                                    JToken initialReplicationProgressPercentageValue3 = initialReplicationDetailsValue3["initialReplicationProgressPercentage"];
                                                    if (initialReplicationProgressPercentageValue3 != null && initialReplicationProgressPercentageValue3.Type != JTokenType.Null)
                                                    {
                                                        string initialReplicationProgressPercentageInstance3 = ((string)initialReplicationProgressPercentageValue3);
                                                        initialReplicationDetailsInstance3.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance3;
                                                    }
                                                }
                                                
                                                JToken vmNicsArray4 = providerSpecificDetailsValue["vmNics"];
                                                if (vmNicsArray4 != null && vmNicsArray4.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken vmNicsValue4 in ((JArray)vmNicsArray4))
                                                    {
                                                        VMNicDetails vMNicDetailsInstance4 = new VMNicDetails();
                                                        hyperVReplicaAzureReplicationDetailsInstance.VMNics.Add(vMNicDetailsInstance4);
                                                        
                                                        JToken nicIdValue4 = vmNicsValue4["nicId"];
                                                        if (nicIdValue4 != null && nicIdValue4.Type != JTokenType.Null)
                                                        {
                                                            string nicIdInstance4 = ((string)nicIdValue4);
                                                            vMNicDetailsInstance4.NicId = nicIdInstance4;
                                                        }
                                                        
                                                        JToken vMSubnetNameValue4 = vmNicsValue4["vMSubnetName"];
                                                        if (vMSubnetNameValue4 != null && vMSubnetNameValue4.Type != JTokenType.Null)
                                                        {
                                                            string vMSubnetNameInstance4 = ((string)vMSubnetNameValue4);
                                                            vMNicDetailsInstance4.VMSubnetName = vMSubnetNameInstance4;
                                                        }
                                                        
                                                        JToken vMNetworkNameValue4 = vmNicsValue4["vMNetworkName"];
                                                        if (vMNetworkNameValue4 != null && vMNetworkNameValue4.Type != JTokenType.Null)
                                                        {
                                                            string vMNetworkNameInstance4 = ((string)vMNetworkNameValue4);
                                                            vMNicDetailsInstance4.VMNetworkName = vMNetworkNameInstance4;
                                                        }
                                                        
                                                        JToken recoveryVMNetworkIdValue4 = vmNicsValue4["recoveryVMNetworkId"];
                                                        if (recoveryVMNetworkIdValue4 != null && recoveryVMNetworkIdValue4.Type != JTokenType.Null)
                                                        {
                                                            string recoveryVMNetworkIdInstance4 = ((string)recoveryVMNetworkIdValue4);
                                                            vMNicDetailsInstance4.RecoveryVMNetworkId = recoveryVMNetworkIdInstance4;
                                                        }
                                                        
                                                        JToken recoveryVMSubnetNameValue4 = vmNicsValue4["recoveryVMSubnetName"];
                                                        if (recoveryVMSubnetNameValue4 != null && recoveryVMSubnetNameValue4.Type != JTokenType.Null)
                                                        {
                                                            string recoveryVMSubnetNameInstance4 = ((string)recoveryVMSubnetNameValue4);
                                                            vMNicDetailsInstance4.RecoveryVMSubnetName = recoveryVMSubnetNameInstance4;
                                                        }
                                                        
                                                        JToken ipAddressTypeValue4 = vmNicsValue4["ipAddressType"];
                                                        if (ipAddressTypeValue4 != null && ipAddressTypeValue4.Type != JTokenType.Null)
                                                        {
                                                            string ipAddressTypeInstance4 = ((string)ipAddressTypeValue4);
                                                            vMNicDetailsInstance4.IpAddressType = ipAddressTypeInstance4;
                                                        }
                                                        
                                                        JToken replicaNicStaticIPAddressValue4 = vmNicsValue4["replicaNicStaticIPAddress"];
                                                        if (replicaNicStaticIPAddressValue4 != null && replicaNicStaticIPAddressValue4.Type != JTokenType.Null)
                                                        {
                                                            string replicaNicStaticIPAddressInstance4 = ((string)replicaNicStaticIPAddressValue4);
                                                            vMNicDetailsInstance4.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance4;
                                                        }
                                                        
                                                        JToken selectionTypeValue4 = vmNicsValue4["selectionType"];
                                                        if (selectionTypeValue4 != null && selectionTypeValue4.Type != JTokenType.Null)
                                                        {
                                                            string selectionTypeInstance4 = ((string)selectionTypeValue4);
                                                            vMNicDetailsInstance4.SelectionType = selectionTypeInstance4;
                                                        }
                                                    }
                                                }
                                                
                                                JToken selectedRecoveryAzureNetworkIdValue2 = providerSpecificDetailsValue["selectedRecoveryAzureNetworkId"];
                                                if (selectedRecoveryAzureNetworkIdValue2 != null && selectedRecoveryAzureNetworkIdValue2.Type != JTokenType.Null)
                                                {
                                                    string selectedRecoveryAzureNetworkIdInstance2 = ((string)selectedRecoveryAzureNetworkIdValue2);
                                                    hyperVReplicaAzureReplicationDetailsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance2;
                                                }
                                                
                                                JToken encryptionValue = providerSpecificDetailsValue["encryption"];
                                                if (encryptionValue != null && encryptionValue.Type != JTokenType.Null)
                                                {
                                                    string encryptionInstance = ((string)encryptionValue);
                                                    hyperVReplicaAzureReplicationDetailsInstance.Encryption = encryptionInstance;
                                                }
                                                
                                                JToken oSDetailsValue = providerSpecificDetailsValue["oSDetails"];
                                                if (oSDetailsValue != null && oSDetailsValue.Type != JTokenType.Null)
                                                {
                                                    OSDetails oSDetailsInstance = new OSDetails();
                                                    hyperVReplicaAzureReplicationDetailsInstance.OSDetails = oSDetailsInstance;
                                                    
                                                    JToken osTypeValue2 = oSDetailsValue["osType"];
                                                    if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                                    {
                                                        string osTypeInstance2 = ((string)osTypeValue2);
                                                        oSDetailsInstance.OsType = osTypeInstance2;
                                                    }
                                                    
                                                    JToken productTypeValue = oSDetailsValue["productType"];
                                                    if (productTypeValue != null && productTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string productTypeInstance = ((string)productTypeValue);
                                                        oSDetailsInstance.ProductType = productTypeInstance;
                                                    }
                                                    
                                                    JToken osEditionValue = oSDetailsValue["osEdition"];
                                                    if (osEditionValue != null && osEditionValue.Type != JTokenType.Null)
                                                    {
                                                        string osEditionInstance = ((string)osEditionValue);
                                                        oSDetailsInstance.OSEdition = osEditionInstance;
                                                    }
                                                    
                                                    JToken oSVersionValue = oSDetailsValue["oSVersion"];
                                                    if (oSVersionValue != null && oSVersionValue.Type != JTokenType.Null)
                                                    {
                                                        string oSVersionInstance = ((string)oSVersionValue);
                                                        oSDetailsInstance.OSVersion = oSVersionInstance;
                                                    }
                                                    
                                                    JToken oSMajorVersionValue = oSDetailsValue["oSMajorVersion"];
                                                    if (oSMajorVersionValue != null && oSMajorVersionValue.Type != JTokenType.Null)
                                                    {
                                                        string oSMajorVersionInstance = ((string)oSMajorVersionValue);
                                                        oSDetailsInstance.OSMajorVersion = oSMajorVersionInstance;
                                                    }
                                                    
                                                    JToken oSMinorVersionValue = oSDetailsValue["oSMinorVersion"];
                                                    if (oSMinorVersionValue != null && oSMinorVersionValue.Type != JTokenType.Null)
                                                    {
                                                        string oSMinorVersionInstance = ((string)oSMinorVersionValue);
                                                        oSDetailsInstance.OSMinorVersion = oSMinorVersionInstance;
                                                    }
                                                }
                                                
                                                JToken sourceVmRAMSizeInMBValue2 = providerSpecificDetailsValue["sourceVmRAMSizeInMB"];
                                                if (sourceVmRAMSizeInMBValue2 != null && sourceVmRAMSizeInMBValue2.Type != JTokenType.Null)
                                                {
                                                    int sourceVmRAMSizeInMBInstance2 = ((int)sourceVmRAMSizeInMBValue2);
                                                    hyperVReplicaAzureReplicationDetailsInstance.SourceVmRAMSizeInMB = sourceVmRAMSizeInMBInstance2;
                                                }
                                                
                                                JToken sourceVmCPUCountValue2 = providerSpecificDetailsValue["sourceVmCPUCount"];
                                                if (sourceVmCPUCountValue2 != null && sourceVmCPUCountValue2.Type != JTokenType.Null)
                                                {
                                                    int sourceVmCPUCountInstance2 = ((int)sourceVmCPUCountValue2);
                                                    hyperVReplicaAzureReplicationDetailsInstance.SourceVmCPUCount = sourceVmCPUCountInstance2;
                                                }
                                                
                                                JToken instanceTypeValue4 = providerSpecificDetailsValue["instanceType"];
                                                if (instanceTypeValue4 != null && instanceTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance4 = ((string)instanceTypeValue4);
                                                    hyperVReplicaAzureReplicationDetailsInstance.InstanceType = instanceTypeInstance4;
                                                }
                                                propertiesInstance.ProviderSpecificDetails = hyperVReplicaAzureReplicationDetailsInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        replicationProtectedItemInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue2 = valueValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        replicationProtectedItemInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        replicationProtectedItemInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        replicationProtectedItemInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            replicationProtectedItemInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get subsequent page data for replication protected items under
        /// vault.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The url to the next protected items page.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list replicated protected items.
        /// </returns>
        public async Task<ReplicationProtectedItemListResponse> ListAllNextAsync(string nextLink, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAllNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ReplicationProtectedItemListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ReplicationProtectedItemListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ReplicationProtectedItem replicationProtectedItemInstance = new ReplicationProtectedItem();
                                    result.ReplicationProtectedItems.Add(replicationProtectedItemInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        ReplicationProtectedItemProperties propertiesInstance = new ReplicationProtectedItemProperties();
                                        replicationProtectedItemInstance.Properties = propertiesInstance;
                                        
                                        JToken friendlyNameValue = propertiesValue["friendlyName"];
                                        if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string friendlyNameInstance = ((string)friendlyNameValue);
                                            propertiesInstance.FriendlyName = friendlyNameInstance;
                                        }
                                        
                                        JToken protectedItemTypeValue = propertiesValue["protectedItemType"];
                                        if (protectedItemTypeValue != null && protectedItemTypeValue.Type != JTokenType.Null)
                                        {
                                            string protectedItemTypeInstance = ((string)protectedItemTypeValue);
                                            propertiesInstance.ProtectedItemType = protectedItemTypeInstance;
                                        }
                                        
                                        JToken protectableItemIdValue = propertiesValue["protectableItemId"];
                                        if (protectableItemIdValue != null && protectableItemIdValue.Type != JTokenType.Null)
                                        {
                                            string protectableItemIdInstance = ((string)protectableItemIdValue);
                                            propertiesInstance.ProtectableItemId = protectableItemIdInstance;
                                        }
                                        
                                        JToken recoveryServicesProviderIdValue = propertiesValue["recoveryServicesProviderId"];
                                        if (recoveryServicesProviderIdValue != null && recoveryServicesProviderIdValue.Type != JTokenType.Null)
                                        {
                                            string recoveryServicesProviderIdInstance = ((string)recoveryServicesProviderIdValue);
                                            propertiesInstance.RecoveryServicesProviderId = recoveryServicesProviderIdInstance;
                                        }
                                        
                                        JToken primaryFabricFriendlyNameValue = propertiesValue["primaryFabricFriendlyName"];
                                        if (primaryFabricFriendlyNameValue != null && primaryFabricFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string primaryFabricFriendlyNameInstance = ((string)primaryFabricFriendlyNameValue);
                                            propertiesInstance.PrimaryFabricFriendlyName = primaryFabricFriendlyNameInstance;
                                        }
                                        
                                        JToken recoveryFabricFriendlyNameValue = propertiesValue["recoveryFabricFriendlyName"];
                                        if (recoveryFabricFriendlyNameValue != null && recoveryFabricFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string recoveryFabricFriendlyNameInstance = ((string)recoveryFabricFriendlyNameValue);
                                            propertiesInstance.RecoveryFabricFriendlyName = recoveryFabricFriendlyNameInstance;
                                        }
                                        
                                        JToken recoveryFabricIdValue = propertiesValue["recoveryFabricId"];
                                        if (recoveryFabricIdValue != null && recoveryFabricIdValue.Type != JTokenType.Null)
                                        {
                                            string recoveryFabricIdInstance = ((string)recoveryFabricIdValue);
                                            propertiesInstance.RecoveryFabricId = recoveryFabricIdInstance;
                                        }
                                        
                                        JToken primaryProtectionContainerFriendlyNameValue = propertiesValue["primaryProtectionContainerFriendlyName"];
                                        if (primaryProtectionContainerFriendlyNameValue != null && primaryProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string primaryProtectionContainerFriendlyNameInstance = ((string)primaryProtectionContainerFriendlyNameValue);
                                            propertiesInstance.PrimaryProtectionContainerFriendlyName = primaryProtectionContainerFriendlyNameInstance;
                                        }
                                        
                                        JToken recoveryProtectionContainerFriendlyNameValue = propertiesValue["recoveryProtectionContainerFriendlyName"];
                                        if (recoveryProtectionContainerFriendlyNameValue != null && recoveryProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProtectionContainerFriendlyNameInstance = ((string)recoveryProtectionContainerFriendlyNameValue);
                                            propertiesInstance.RecoveryProtectionContainerFriendlyName = recoveryProtectionContainerFriendlyNameInstance;
                                        }
                                        
                                        JToken protectionStateValue = propertiesValue["protectionState"];
                                        if (protectionStateValue != null && protectionStateValue.Type != JTokenType.Null)
                                        {
                                            string protectionStateInstance = ((string)protectionStateValue);
                                            propertiesInstance.ProtectionState = protectionStateInstance;
                                        }
                                        
                                        JToken protectionStateDescriptionValue = propertiesValue["protectionStateDescription"];
                                        if (protectionStateDescriptionValue != null && protectionStateDescriptionValue.Type != JTokenType.Null)
                                        {
                                            string protectionStateDescriptionInstance = ((string)protectionStateDescriptionValue);
                                            propertiesInstance.ProtectionStateDescription = protectionStateDescriptionInstance;
                                        }
                                        
                                        JToken activeLocationValue = propertiesValue["activeLocation"];
                                        if (activeLocationValue != null && activeLocationValue.Type != JTokenType.Null)
                                        {
                                            string activeLocationInstance = ((string)activeLocationValue);
                                            propertiesInstance.ActiveLocation = activeLocationInstance;
                                        }
                                        
                                        JToken testFailoverStateValue = propertiesValue["testFailoverState"];
                                        if (testFailoverStateValue != null && testFailoverStateValue.Type != JTokenType.Null)
                                        {
                                            string testFailoverStateInstance = ((string)testFailoverStateValue);
                                            propertiesInstance.TestFailoverState = testFailoverStateInstance;
                                        }
                                        
                                        JToken testFailoverStateDescriptionValue = propertiesValue["testFailoverStateDescription"];
                                        if (testFailoverStateDescriptionValue != null && testFailoverStateDescriptionValue.Type != JTokenType.Null)
                                        {
                                            string testFailoverStateDescriptionInstance = ((string)testFailoverStateDescriptionValue);
                                            propertiesInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                                        }
                                        
                                        JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                        if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                            {
                                                propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                            }
                                        }
                                        
                                        JToken replicationHealthValue = propertiesValue["replicationHealth"];
                                        if (replicationHealthValue != null && replicationHealthValue.Type != JTokenType.Null)
                                        {
                                            string replicationHealthInstance = ((string)replicationHealthValue);
                                            propertiesInstance.ReplicationHealth = replicationHealthInstance;
                                        }
                                        
                                        JToken replicationHealthErrorsArray = propertiesValue["replicationHealthErrors"];
                                        if (replicationHealthErrorsArray != null && replicationHealthErrorsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken replicationHealthErrorsValue in ((JArray)replicationHealthErrorsArray))
                                            {
                                                HealthError healthErrorInstance = new HealthError();
                                                propertiesInstance.ReplicationHealthErrors.Add(healthErrorInstance);
                                                
                                                JToken errorLevelValue = replicationHealthErrorsValue["errorLevel"];
                                                if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                                {
                                                    string errorLevelInstance = ((string)errorLevelValue);
                                                    healthErrorInstance.ErrorLevel = errorLevelInstance;
                                                }
                                                
                                                JToken errorCodeValue = replicationHealthErrorsValue["errorCode"];
                                                if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                                {
                                                    string errorCodeInstance = ((string)errorCodeValue);
                                                    healthErrorInstance.ErrorCode = errorCodeInstance;
                                                }
                                                
                                                JToken errorMessageValue = replicationHealthErrorsValue["errorMessage"];
                                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                                {
                                                    string errorMessageInstance = ((string)errorMessageValue);
                                                    healthErrorInstance.ErrorMessage = errorMessageInstance;
                                                }
                                                
                                                JToken possibleCausesValue = replicationHealthErrorsValue["possibleCauses"];
                                                if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                                {
                                                    string possibleCausesInstance = ((string)possibleCausesValue);
                                                    healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                                }
                                                
                                                JToken recommendedActionValue = replicationHealthErrorsValue["recommendedAction"];
                                                if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                                {
                                                    string recommendedActionInstance = ((string)recommendedActionValue);
                                                    healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                                }
                                                
                                                JToken creationTimeUtcValue = replicationHealthErrorsValue["creationTimeUtc"];
                                                if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                                {
                                                    string creationTimeUtcInstance = ((string)creationTimeUtcValue);
                                                    healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                                }
                                                
                                                JToken recoveryProviderErrorMessageValue = replicationHealthErrorsValue["recoveryProviderErrorMessage"];
                                                if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                                    healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                                }
                                                
                                                JToken entityIdValue = replicationHealthErrorsValue["entityId"];
                                                if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                                {
                                                    string entityIdInstance = ((string)entityIdValue);
                                                    healthErrorInstance.EntityId = entityIdInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken policyIdValue = propertiesValue["policyId"];
                                        if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                        {
                                            string policyIdInstance = ((string)policyIdValue);
                                            propertiesInstance.PolicyID = policyIdInstance;
                                        }
                                        
                                        JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                        if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                            propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                        }
                                        
                                        JToken lastSuccessfulFailoverTimeValue = propertiesValue["lastSuccessfulFailoverTime"];
                                        if (lastSuccessfulFailoverTimeValue != null && lastSuccessfulFailoverTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastSuccessfulFailoverTimeInstance = ((DateTime)lastSuccessfulFailoverTimeValue);
                                            propertiesInstance.LastSuccessfulFailoverTime = lastSuccessfulFailoverTimeInstance;
                                        }
                                        
                                        JToken lastSuccessfulTestFailoverTimeValue = propertiesValue["lastSuccessfulTestFailoverTime"];
                                        if (lastSuccessfulTestFailoverTimeValue != null && lastSuccessfulTestFailoverTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastSuccessfulTestFailoverTimeInstance = ((DateTime)lastSuccessfulTestFailoverTimeValue);
                                            propertiesInstance.LastSuccessfulTestFailoverTime = lastSuccessfulTestFailoverTimeInstance;
                                        }
                                        
                                        JToken currentScenarioValue = propertiesValue["currentScenario"];
                                        if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                        {
                                            CurrentScenarioDetails currentScenarioInstance = new CurrentScenarioDetails();
                                            propertiesInstance.CurrentScenario = currentScenarioInstance;
                                            
                                            JToken scenarioNameValue = currentScenarioValue["scenarioName"];
                                            if (scenarioNameValue != null && scenarioNameValue.Type != JTokenType.Null)
                                            {
                                                string scenarioNameInstance = ((string)scenarioNameValue);
                                                currentScenarioInstance.ScenarioName = scenarioNameInstance;
                                            }
                                            
                                            JToken jobIdValue = currentScenarioValue["jobId"];
                                            if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                            {
                                                string jobIdInstance = ((string)jobIdValue);
                                                currentScenarioInstance.JobId = jobIdInstance;
                                            }
                                            
                                            JToken startTimeValue = currentScenarioValue["startTime"];
                                            if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime startTimeInstance = ((DateTime)startTimeValue);
                                                currentScenarioInstance.StartTime = startTimeInstance;
                                            }
                                        }
                                        
                                        JToken failoverRecoveryPointIdValue = propertiesValue["failoverRecoveryPointId"];
                                        if (failoverRecoveryPointIdValue != null && failoverRecoveryPointIdValue.Type != JTokenType.Null)
                                        {
                                            string failoverRecoveryPointIdInstance = ((string)failoverRecoveryPointIdValue);
                                            propertiesInstance.FailoverRecoveryPointId = failoverRecoveryPointIdInstance;
                                        }
                                        
                                        JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                        if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                        {
                                            string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                            if (typeName == "HyperVReplica2012")
                                            {
                                                HyperVReplica2012ReplicationDetails hyperVReplica2012ReplicationDetailsInstance = new HyperVReplica2012ReplicationDetails();
                                                
                                                JToken lastReplicatedTimeValue = providerSpecificDetailsValue["lastReplicatedTime"];
                                                if (lastReplicatedTimeValue != null && lastReplicatedTimeValue.Type != JTokenType.Null)
                                                {
                                                    string lastReplicatedTimeInstance = ((string)lastReplicatedTimeValue);
                                                    hyperVReplica2012ReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance;
                                                }
                                                
                                                JToken vmNicsArray = providerSpecificDetailsValue["vmNics"];
                                                if (vmNicsArray != null && vmNicsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken vmNicsValue in ((JArray)vmNicsArray))
                                                    {
                                                        VMNicDetails vMNicDetailsInstance = new VMNicDetails();
                                                        hyperVReplica2012ReplicationDetailsInstance.VmNics.Add(vMNicDetailsInstance);
                                                        
                                                        JToken nicIdValue = vmNicsValue["nicId"];
                                                        if (nicIdValue != null && nicIdValue.Type != JTokenType.Null)
                                                        {
                                                            string nicIdInstance = ((string)nicIdValue);
                                                            vMNicDetailsInstance.NicId = nicIdInstance;
                                                        }
                                                        
                                                        JToken vMSubnetNameValue = vmNicsValue["vMSubnetName"];
                                                        if (vMSubnetNameValue != null && vMSubnetNameValue.Type != JTokenType.Null)
                                                        {
                                                            string vMSubnetNameInstance = ((string)vMSubnetNameValue);
                                                            vMNicDetailsInstance.VMSubnetName = vMSubnetNameInstance;
                                                        }
                                                        
                                                        JToken vMNetworkNameValue = vmNicsValue["vMNetworkName"];
                                                        if (vMNetworkNameValue != null && vMNetworkNameValue.Type != JTokenType.Null)
                                                        {
                                                            string vMNetworkNameInstance = ((string)vMNetworkNameValue);
                                                            vMNicDetailsInstance.VMNetworkName = vMNetworkNameInstance;
                                                        }
                                                        
                                                        JToken recoveryVMNetworkIdValue = vmNicsValue["recoveryVMNetworkId"];
                                                        if (recoveryVMNetworkIdValue != null && recoveryVMNetworkIdValue.Type != JTokenType.Null)
                                                        {
                                                            string recoveryVMNetworkIdInstance = ((string)recoveryVMNetworkIdValue);
                                                            vMNicDetailsInstance.RecoveryVMNetworkId = recoveryVMNetworkIdInstance;
                                                        }
                                                        
                                                        JToken recoveryVMSubnetNameValue = vmNicsValue["recoveryVMSubnetName"];
                                                        if (recoveryVMSubnetNameValue != null && recoveryVMSubnetNameValue.Type != JTokenType.Null)
                                                        {
                                                            string recoveryVMSubnetNameInstance = ((string)recoveryVMSubnetNameValue);
                                                            vMNicDetailsInstance.RecoveryVMSubnetName = recoveryVMSubnetNameInstance;
                                                        }
                                                        
                                                        JToken ipAddressTypeValue = vmNicsValue["ipAddressType"];
                                                        if (ipAddressTypeValue != null && ipAddressTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string ipAddressTypeInstance = ((string)ipAddressTypeValue);
                                                            vMNicDetailsInstance.IpAddressType = ipAddressTypeInstance;
                                                        }
                                                        
                                                        JToken replicaNicStaticIPAddressValue = vmNicsValue["replicaNicStaticIPAddress"];
                                                        if (replicaNicStaticIPAddressValue != null && replicaNicStaticIPAddressValue.Type != JTokenType.Null)
                                                        {
                                                            string replicaNicStaticIPAddressInstance = ((string)replicaNicStaticIPAddressValue);
                                                            vMNicDetailsInstance.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance;
                                                        }
                                                        
                                                        JToken selectionTypeValue = vmNicsValue["selectionType"];
                                                        if (selectionTypeValue != null && selectionTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string selectionTypeInstance = ((string)selectionTypeValue);
                                                            vMNicDetailsInstance.SelectionType = selectionTypeInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken initialReplicationDetailsValue = providerSpecificDetailsValue["initialReplicationDetails"];
                                                if (initialReplicationDetailsValue != null && initialReplicationDetailsValue.Type != JTokenType.Null)
                                                {
                                                    InitialReplicationDetails initialReplicationDetailsInstance = new InitialReplicationDetails();
                                                    hyperVReplica2012ReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance;
                                                    
                                                    JToken initialReplicationTypeValue = initialReplicationDetailsValue["initialReplicationType"];
                                                    if (initialReplicationTypeValue != null && initialReplicationTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string initialReplicationTypeInstance = ((string)initialReplicationTypeValue);
                                                        initialReplicationDetailsInstance.InitialReplicationType = initialReplicationTypeInstance;
                                                    }
                                                    
                                                    JToken initialReplicationProgressPercentageValue = initialReplicationDetailsValue["initialReplicationProgressPercentage"];
                                                    if (initialReplicationProgressPercentageValue != null && initialReplicationProgressPercentageValue.Type != JTokenType.Null)
                                                    {
                                                        string initialReplicationProgressPercentageInstance = ((string)initialReplicationProgressPercentageValue);
                                                        initialReplicationDetailsInstance.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance;
                                                    }
                                                }
                                                
                                                JToken vMDiskDetailsArray = providerSpecificDetailsValue["vMDiskDetails"];
                                                if (vMDiskDetailsArray != null && vMDiskDetailsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken vMDiskDetailsValue in ((JArray)vMDiskDetailsArray))
                                                    {
                                                        DiskDetails diskDetailsInstance = new DiskDetails();
                                                        hyperVReplica2012ReplicationDetailsInstance.VMDiskDetails.Add(diskDetailsInstance);
                                                        
                                                        JToken maxSizeMBValue = vMDiskDetailsValue["maxSizeMB"];
                                                        if (maxSizeMBValue != null && maxSizeMBValue.Type != JTokenType.Null)
                                                        {
                                                            ulong maxSizeMBInstance = ((ulong)maxSizeMBValue);
                                                            diskDetailsInstance.MaxSizeMB = maxSizeMBInstance;
                                                        }
                                                        
                                                        JToken vhdTypeValue = vMDiskDetailsValue["vhdType"];
                                                        if (vhdTypeValue != null && vhdTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string vhdTypeInstance = ((string)vhdTypeValue);
                                                            diskDetailsInstance.VhdType = vhdTypeInstance;
                                                        }
                                                        
                                                        JToken vhdIdValue = vMDiskDetailsValue["vhdId"];
                                                        if (vhdIdValue != null && vhdIdValue.Type != JTokenType.Null)
                                                        {
                                                            string vhdIdInstance = ((string)vhdIdValue);
                                                            diskDetailsInstance.VhdId = vhdIdInstance;
                                                        }
                                                        
                                                        JToken vhdNameValue = vMDiskDetailsValue["vhdName"];
                                                        if (vhdNameValue != null && vhdNameValue.Type != JTokenType.Null)
                                                        {
                                                            string vhdNameInstance = ((string)vhdNameValue);
                                                            diskDetailsInstance.VhdName = vhdNameInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                                if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance = ((string)instanceTypeValue);
                                                    hyperVReplica2012ReplicationDetailsInstance.InstanceType = instanceTypeInstance;
                                                }
                                                propertiesInstance.ProviderSpecificDetails = hyperVReplica2012ReplicationDetailsInstance;
                                            }
                                            if (typeName == "HyperVReplica2012R2")
                                            {
                                                HyperVReplica2012R2ReplicationDetails hyperVReplica2012R2ReplicationDetailsInstance = new HyperVReplica2012R2ReplicationDetails();
                                                
                                                JToken lastReplicatedTimeValue2 = providerSpecificDetailsValue["lastReplicatedTime"];
                                                if (lastReplicatedTimeValue2 != null && lastReplicatedTimeValue2.Type != JTokenType.Null)
                                                {
                                                    string lastReplicatedTimeInstance2 = ((string)lastReplicatedTimeValue2);
                                                    hyperVReplica2012R2ReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance2;
                                                }
                                                
                                                JToken vmNicsArray2 = providerSpecificDetailsValue["vmNics"];
                                                if (vmNicsArray2 != null && vmNicsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken vmNicsValue2 in ((JArray)vmNicsArray2))
                                                    {
                                                        VMNicDetails vMNicDetailsInstance2 = new VMNicDetails();
                                                        hyperVReplica2012R2ReplicationDetailsInstance.VmNics.Add(vMNicDetailsInstance2);
                                                        
                                                        JToken nicIdValue2 = vmNicsValue2["nicId"];
                                                        if (nicIdValue2 != null && nicIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string nicIdInstance2 = ((string)nicIdValue2);
                                                            vMNicDetailsInstance2.NicId = nicIdInstance2;
                                                        }
                                                        
                                                        JToken vMSubnetNameValue2 = vmNicsValue2["vMSubnetName"];
                                                        if (vMSubnetNameValue2 != null && vMSubnetNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string vMSubnetNameInstance2 = ((string)vMSubnetNameValue2);
                                                            vMNicDetailsInstance2.VMSubnetName = vMSubnetNameInstance2;
                                                        }
                                                        
                                                        JToken vMNetworkNameValue2 = vmNicsValue2["vMNetworkName"];
                                                        if (vMNetworkNameValue2 != null && vMNetworkNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string vMNetworkNameInstance2 = ((string)vMNetworkNameValue2);
                                                            vMNicDetailsInstance2.VMNetworkName = vMNetworkNameInstance2;
                                                        }
                                                        
                                                        JToken recoveryVMNetworkIdValue2 = vmNicsValue2["recoveryVMNetworkId"];
                                                        if (recoveryVMNetworkIdValue2 != null && recoveryVMNetworkIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string recoveryVMNetworkIdInstance2 = ((string)recoveryVMNetworkIdValue2);
                                                            vMNicDetailsInstance2.RecoveryVMNetworkId = recoveryVMNetworkIdInstance2;
                                                        }
                                                        
                                                        JToken recoveryVMSubnetNameValue2 = vmNicsValue2["recoveryVMSubnetName"];
                                                        if (recoveryVMSubnetNameValue2 != null && recoveryVMSubnetNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string recoveryVMSubnetNameInstance2 = ((string)recoveryVMSubnetNameValue2);
                                                            vMNicDetailsInstance2.RecoveryVMSubnetName = recoveryVMSubnetNameInstance2;
                                                        }
                                                        
                                                        JToken ipAddressTypeValue2 = vmNicsValue2["ipAddressType"];
                                                        if (ipAddressTypeValue2 != null && ipAddressTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string ipAddressTypeInstance2 = ((string)ipAddressTypeValue2);
                                                            vMNicDetailsInstance2.IpAddressType = ipAddressTypeInstance2;
                                                        }
                                                        
                                                        JToken replicaNicStaticIPAddressValue2 = vmNicsValue2["replicaNicStaticIPAddress"];
                                                        if (replicaNicStaticIPAddressValue2 != null && replicaNicStaticIPAddressValue2.Type != JTokenType.Null)
                                                        {
                                                            string replicaNicStaticIPAddressInstance2 = ((string)replicaNicStaticIPAddressValue2);
                                                            vMNicDetailsInstance2.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance2;
                                                        }
                                                        
                                                        JToken selectionTypeValue2 = vmNicsValue2["selectionType"];
                                                        if (selectionTypeValue2 != null && selectionTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string selectionTypeInstance2 = ((string)selectionTypeValue2);
                                                            vMNicDetailsInstance2.SelectionType = selectionTypeInstance2;
                                                        }
                                                    }
                                                }
                                                
                                                JToken initialReplicationDetailsValue2 = providerSpecificDetailsValue["initialReplicationDetails"];
                                                if (initialReplicationDetailsValue2 != null && initialReplicationDetailsValue2.Type != JTokenType.Null)
                                                {
                                                    InitialReplicationDetails initialReplicationDetailsInstance2 = new InitialReplicationDetails();
                                                    hyperVReplica2012R2ReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance2;
                                                    
                                                    JToken initialReplicationTypeValue2 = initialReplicationDetailsValue2["initialReplicationType"];
                                                    if (initialReplicationTypeValue2 != null && initialReplicationTypeValue2.Type != JTokenType.Null)
                                                    {
                                                        string initialReplicationTypeInstance2 = ((string)initialReplicationTypeValue2);
                                                        initialReplicationDetailsInstance2.InitialReplicationType = initialReplicationTypeInstance2;
                                                    }
                                                    
                                                    JToken initialReplicationProgressPercentageValue2 = initialReplicationDetailsValue2["initialReplicationProgressPercentage"];
                                                    if (initialReplicationProgressPercentageValue2 != null && initialReplicationProgressPercentageValue2.Type != JTokenType.Null)
                                                    {
                                                        string initialReplicationProgressPercentageInstance2 = ((string)initialReplicationProgressPercentageValue2);
                                                        initialReplicationDetailsInstance2.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance2;
                                                    }
                                                }
                                                
                                                JToken vMDiskDetailsArray2 = providerSpecificDetailsValue["vMDiskDetails"];
                                                if (vMDiskDetailsArray2 != null && vMDiskDetailsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken vMDiskDetailsValue2 in ((JArray)vMDiskDetailsArray2))
                                                    {
                                                        DiskDetails diskDetailsInstance2 = new DiskDetails();
                                                        hyperVReplica2012R2ReplicationDetailsInstance.VMDiskDetails.Add(diskDetailsInstance2);
                                                        
                                                        JToken maxSizeMBValue2 = vMDiskDetailsValue2["maxSizeMB"];
                                                        if (maxSizeMBValue2 != null && maxSizeMBValue2.Type != JTokenType.Null)
                                                        {
                                                            ulong maxSizeMBInstance2 = ((ulong)maxSizeMBValue2);
                                                            diskDetailsInstance2.MaxSizeMB = maxSizeMBInstance2;
                                                        }
                                                        
                                                        JToken vhdTypeValue2 = vMDiskDetailsValue2["vhdType"];
                                                        if (vhdTypeValue2 != null && vhdTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string vhdTypeInstance2 = ((string)vhdTypeValue2);
                                                            diskDetailsInstance2.VhdType = vhdTypeInstance2;
                                                        }
                                                        
                                                        JToken vhdIdValue2 = vMDiskDetailsValue2["vhdId"];
                                                        if (vhdIdValue2 != null && vhdIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string vhdIdInstance2 = ((string)vhdIdValue2);
                                                            diskDetailsInstance2.VhdId = vhdIdInstance2;
                                                        }
                                                        
                                                        JToken vhdNameValue2 = vMDiskDetailsValue2["vhdName"];
                                                        if (vhdNameValue2 != null && vhdNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string vhdNameInstance2 = ((string)vhdNameValue2);
                                                            diskDetailsInstance2.VhdName = vhdNameInstance2;
                                                        }
                                                    }
                                                }
                                                
                                                JToken instanceTypeValue2 = providerSpecificDetailsValue["instanceType"];
                                                if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                                    hyperVReplica2012R2ReplicationDetailsInstance.InstanceType = instanceTypeInstance2;
                                                }
                                                propertiesInstance.ProviderSpecificDetails = hyperVReplica2012R2ReplicationDetailsInstance;
                                            }
                                            if (typeName == "VMwareAzureV2")
                                            {
                                                VMwareAzureV2ProviderSpecificSettings vMwareAzureV2ProviderSpecificSettingsInstance = new VMwareAzureV2ProviderSpecificSettings();
                                                
                                                JToken infrastructureVmIdValue = providerSpecificDetailsValue["infrastructureVmId"];
                                                if (infrastructureVmIdValue != null && infrastructureVmIdValue.Type != JTokenType.Null)
                                                {
                                                    string infrastructureVmIdInstance = ((string)infrastructureVmIdValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.InfrastructureVmId = infrastructureVmIdInstance;
                                                }
                                                
                                                JToken vCenterInfrastructureIdValue = providerSpecificDetailsValue["vCenterInfrastructureId"];
                                                if (vCenterInfrastructureIdValue != null && vCenterInfrastructureIdValue.Type != JTokenType.Null)
                                                {
                                                    string vCenterInfrastructureIdInstance = ((string)vCenterInfrastructureIdValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.VCenterInfrastructureId = vCenterInfrastructureIdInstance;
                                                }
                                                
                                                JToken protectionStageValue = providerSpecificDetailsValue["protectionStage"];
                                                if (protectionStageValue != null && protectionStageValue.Type != JTokenType.Null)
                                                {
                                                    string protectionStageInstance = ((string)protectionStageValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.ProtectionStage = protectionStageInstance;
                                                }
                                                
                                                JToken healthErrorCodeValue = providerSpecificDetailsValue["healthErrorCode"];
                                                if (healthErrorCodeValue != null && healthErrorCodeValue.Type != JTokenType.Null)
                                                {
                                                    string healthErrorCodeInstance = ((string)healthErrorCodeValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.HealthErrorCode = healthErrorCodeInstance;
                                                }
                                                
                                                JToken resyncRequiredValue = providerSpecificDetailsValue["resyncRequired"];
                                                if (resyncRequiredValue != null && resyncRequiredValue.Type != JTokenType.Null)
                                                {
                                                    bool resyncRequiredInstance = ((bool)resyncRequiredValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.ResyncRequired = resyncRequiredInstance;
                                                }
                                                
                                                JToken resyncProgressPercentageValue = providerSpecificDetailsValue["resyncProgressPercentage"];
                                                if (resyncProgressPercentageValue != null && resyncProgressPercentageValue.Type != JTokenType.Null)
                                                {
                                                    int resyncProgressPercentageInstance = ((int)resyncProgressPercentageValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.ResyncProgressPercentage = resyncProgressPercentageInstance;
                                                }
                                                
                                                JToken rpoInSecondsValue = providerSpecificDetailsValue["rpoInSeconds"];
                                                if (rpoInSecondsValue != null && rpoInSecondsValue.Type != JTokenType.Null)
                                                {
                                                    long rpoInSecondsInstance = ((long)rpoInSecondsValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.RpoInSeconds = rpoInSecondsInstance;
                                                }
                                                
                                                JToken compressedDataRateInMBValue = providerSpecificDetailsValue["compressedDataRateInMB"];
                                                if (compressedDataRateInMBValue != null && compressedDataRateInMBValue.Type != JTokenType.Null)
                                                {
                                                    double compressedDataRateInMBInstance = ((double)compressedDataRateInMBValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.CompressedDataRateInMB = compressedDataRateInMBInstance;
                                                }
                                                
                                                JToken uncompressedDataRateInMBValue = providerSpecificDetailsValue["uncompressedDataRateInMB"];
                                                if (uncompressedDataRateInMBValue != null && uncompressedDataRateInMBValue.Type != JTokenType.Null)
                                                {
                                                    double uncompressedDataRateInMBInstance = ((double)uncompressedDataRateInMBValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.UncompressedDataRateInMB = uncompressedDataRateInMBInstance;
                                                }
                                                
                                                JToken ipAddressValue = providerSpecificDetailsValue["ipAddress"];
                                                if (ipAddressValue != null && ipAddressValue.Type != JTokenType.Null)
                                                {
                                                    string ipAddressInstance = ((string)ipAddressValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.IpAddress = ipAddressInstance;
                                                }
                                                
                                                JToken agentVersionValue = providerSpecificDetailsValue["agentVersion"];
                                                if (agentVersionValue != null && agentVersionValue.Type != JTokenType.Null)
                                                {
                                                    string agentVersionInstance = ((string)agentVersionValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.AgentVersion = agentVersionInstance;
                                                }
                                                
                                                JToken latestUpdateVersionValue = providerSpecificDetailsValue["latestUpdateVersion"];
                                                if (latestUpdateVersionValue != null && latestUpdateVersionValue.Type != JTokenType.Null)
                                                {
                                                    string latestUpdateVersionInstance = ((string)latestUpdateVersionValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.LatestUpdateVersion = latestUpdateVersionInstance;
                                                }
                                                
                                                JToken isAgentUpdateRequiredValue = providerSpecificDetailsValue["isAgentUpdateRequired"];
                                                if (isAgentUpdateRequiredValue != null && isAgentUpdateRequiredValue.Type != JTokenType.Null)
                                                {
                                                    bool isAgentUpdateRequiredInstance = ((bool)isAgentUpdateRequiredValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.IsAgentUpdateRequired = isAgentUpdateRequiredInstance;
                                                }
                                                
                                                JToken isRebootAfterUpdateRequiredValue = providerSpecificDetailsValue["isRebootAfterUpdateRequired"];
                                                if (isRebootAfterUpdateRequiredValue != null && isRebootAfterUpdateRequiredValue.Type != JTokenType.Null)
                                                {
                                                    bool isRebootAfterUpdateRequiredInstance = ((bool)isRebootAfterUpdateRequiredValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.IsRebootAfterUpdateRequired = isRebootAfterUpdateRequiredInstance;
                                                }
                                                
                                                JToken lastHeartbeatValue = providerSpecificDetailsValue["lastHeartbeat"];
                                                if (lastHeartbeatValue != null && lastHeartbeatValue.Type != JTokenType.Null)
                                                {
                                                    DateTime lastHeartbeatInstance = ((DateTime)lastHeartbeatValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.LastHeartbeat = lastHeartbeatInstance;
                                                }
                                                
                                                JToken processServerIdValue = providerSpecificDetailsValue["processServerId"];
                                                if (processServerIdValue != null && processServerIdValue.Type != JTokenType.Null)
                                                {
                                                    string processServerIdInstance = ((string)processServerIdValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.ProcessServerId = processServerIdInstance;
                                                }
                                                
                                                JToken multiVmGroupIdValue = providerSpecificDetailsValue["multiVmGroupId"];
                                                if (multiVmGroupIdValue != null && multiVmGroupIdValue.Type != JTokenType.Null)
                                                {
                                                    string multiVmGroupIdInstance = ((string)multiVmGroupIdValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.MultiVmGroupId = multiVmGroupIdInstance;
                                                }
                                                
                                                JToken multiVmGroupNameValue = providerSpecificDetailsValue["multiVmGroupName"];
                                                if (multiVmGroupNameValue != null && multiVmGroupNameValue.Type != JTokenType.Null)
                                                {
                                                    string multiVmGroupNameInstance = ((string)multiVmGroupNameValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.MultiVmGroupName = multiVmGroupNameInstance;
                                                }
                                                
                                                JToken protectedVolumesArray = providerSpecificDetailsValue["protectedVolumes"];
                                                if (protectedVolumesArray != null && protectedVolumesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken protectedVolumesValue in ((JArray)protectedVolumesArray))
                                                    {
                                                        VMwareAzureV2ProtectedVolumeDetails vMwareAzureV2ProtectedVolumeDetailsInstance = new VMwareAzureV2ProtectedVolumeDetails();
                                                        vMwareAzureV2ProviderSpecificSettingsInstance.ProtectedVolumes.Add(vMwareAzureV2ProtectedVolumeDetailsInstance);
                                                        
                                                        JToken nameValue = protectedVolumesValue["name"];
                                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance = ((string)nameValue);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.Name = nameInstance;
                                                        }
                                                        
                                                        JToken protectionStageValue2 = protectedVolumesValue["protectionStage"];
                                                        if (protectionStageValue2 != null && protectionStageValue2.Type != JTokenType.Null)
                                                        {
                                                            string protectionStageInstance2 = ((string)protectionStageValue2);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.ProtectionStage = protectionStageInstance2;
                                                        }
                                                        
                                                        JToken healthErrorCodeValue2 = protectedVolumesValue["healthErrorCode"];
                                                        if (healthErrorCodeValue2 != null && healthErrorCodeValue2.Type != JTokenType.Null)
                                                        {
                                                            string healthErrorCodeInstance2 = ((string)healthErrorCodeValue2);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.HealthErrorCode = healthErrorCodeInstance2;
                                                        }
                                                        
                                                        JToken rpoInSecondsValue2 = protectedVolumesValue["rpoInSeconds"];
                                                        if (rpoInSecondsValue2 != null && rpoInSecondsValue2.Type != JTokenType.Null)
                                                        {
                                                            long rpoInSecondsInstance2 = ((long)rpoInSecondsValue2);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.RpoInSeconds = rpoInSecondsInstance2;
                                                        }
                                                        
                                                        JToken resyncRequiredValue2 = protectedVolumesValue["resyncRequired"];
                                                        if (resyncRequiredValue2 != null && resyncRequiredValue2.Type != JTokenType.Null)
                                                        {
                                                            bool resyncRequiredInstance2 = ((bool)resyncRequiredValue2);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncRequired = resyncRequiredInstance2;
                                                        }
                                                        
                                                        JToken resyncProgressPercentageValue2 = protectedVolumesValue["resyncProgressPercentage"];
                                                        if (resyncProgressPercentageValue2 != null && resyncProgressPercentageValue2.Type != JTokenType.Null)
                                                        {
                                                            int resyncProgressPercentageInstance2 = ((int)resyncProgressPercentageValue2);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncProgressPercentage = resyncProgressPercentageInstance2;
                                                        }
                                                        
                                                        JToken resyncDurationInSecondsValue = protectedVolumesValue["resyncDurationInSeconds"];
                                                        if (resyncDurationInSecondsValue != null && resyncDurationInSecondsValue.Type != JTokenType.Null)
                                                        {
                                                            long resyncDurationInSecondsInstance = ((long)resyncDurationInSecondsValue);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.ResyncDurationInSeconds = resyncDurationInSecondsInstance;
                                                        }
                                                        
                                                        JToken volumeCapacityInBytesValue = protectedVolumesValue["volumeCapacityInBytes"];
                                                        if (volumeCapacityInBytesValue != null && volumeCapacityInBytesValue.Type != JTokenType.Null)
                                                        {
                                                            long volumeCapacityInBytesInstance = ((long)volumeCapacityInBytesValue);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.VolumeCapacityInBytes = volumeCapacityInBytesInstance;
                                                        }
                                                        
                                                        JToken fileSystemCapacityInBytesValue = protectedVolumesValue["fileSystemCapacityInBytes"];
                                                        if (fileSystemCapacityInBytesValue != null && fileSystemCapacityInBytesValue.Type != JTokenType.Null)
                                                        {
                                                            long fileSystemCapacityInBytesInstance = ((long)fileSystemCapacityInBytesValue);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.FileSystemCapacityInBytes = fileSystemCapacityInBytesInstance;
                                                        }
                                                        
                                                        JToken sourceDataInMBValue = protectedVolumesValue["sourceDataInMB"];
                                                        if (sourceDataInMBValue != null && sourceDataInMBValue.Type != JTokenType.Null)
                                                        {
                                                            double sourceDataInMBInstance = ((double)sourceDataInMBValue);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.SourceDataInMB = sourceDataInMBInstance;
                                                        }
                                                        
                                                        JToken psDataInMBValue = protectedVolumesValue["psDataInMB"];
                                                        if (psDataInMBValue != null && psDataInMBValue.Type != JTokenType.Null)
                                                        {
                                                            double psDataInMBInstance = ((double)psDataInMBValue);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.PSDataInMB = psDataInMBInstance;
                                                        }
                                                        
                                                        JToken targetDataInMBValue = protectedVolumesValue["targetDataInMB"];
                                                        if (targetDataInMBValue != null && targetDataInMBValue.Type != JTokenType.Null)
                                                        {
                                                            double targetDataInMBInstance = ((double)targetDataInMBValue);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.TargetDataInMB = targetDataInMBInstance;
                                                        }
                                                        
                                                        JToken volumeResizedValue = protectedVolumesValue["volumeResized"];
                                                        if (volumeResizedValue != null && volumeResizedValue.Type != JTokenType.Null)
                                                        {
                                                            bool volumeResizedInstance = ((bool)volumeResizedValue);
                                                            vMwareAzureV2ProtectedVolumeDetailsInstance.VolumeResized = volumeResizedInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken volumeResizedValue2 = providerSpecificDetailsValue["volumeResized"];
                                                if (volumeResizedValue2 != null && volumeResizedValue2.Type != JTokenType.Null)
                                                {
                                                    bool volumeResizedInstance2 = ((bool)volumeResizedValue2);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.VolumeResized = volumeResizedInstance2;
                                                }
                                                
                                                JToken masterTargetIdValue = providerSpecificDetailsValue["masterTargetId"];
                                                if (masterTargetIdValue != null && masterTargetIdValue.Type != JTokenType.Null)
                                                {
                                                    string masterTargetIdInstance = ((string)masterTargetIdValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.MasterTargetId = masterTargetIdInstance;
                                                }
                                                
                                                JToken sourceVmCPUCountValue = providerSpecificDetailsValue["sourceVmCPUCount"];
                                                if (sourceVmCPUCountValue != null && sourceVmCPUCountValue.Type != JTokenType.Null)
                                                {
                                                    int sourceVmCPUCountInstance = ((int)sourceVmCPUCountValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.SourceVmCPUCount = sourceVmCPUCountInstance;
                                                }
                                                
                                                JToken sourceVmRAMSizeInMBValue = providerSpecificDetailsValue["sourceVmRAMSizeInMB"];
                                                if (sourceVmRAMSizeInMBValue != null && sourceVmRAMSizeInMBValue.Type != JTokenType.Null)
                                                {
                                                    int sourceVmRAMSizeInMBInstance = ((int)sourceVmRAMSizeInMBValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.SourceVmRAMSizeInMB = sourceVmRAMSizeInMBInstance;
                                                }
                                                
                                                JToken osTypeValue = providerSpecificDetailsValue["osType"];
                                                if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance = ((string)osTypeValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.OSType = osTypeInstance;
                                                }
                                                
                                                JToken vhdNameValue3 = providerSpecificDetailsValue["vhdName"];
                                                if (vhdNameValue3 != null && vhdNameValue3.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance3 = ((string)vhdNameValue3);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.VHDName = vhdNameInstance3;
                                                }
                                                
                                                JToken osDiskIdValue = providerSpecificDetailsValue["osDiskId"];
                                                if (osDiskIdValue != null && osDiskIdValue.Type != JTokenType.Null)
                                                {
                                                    string osDiskIdInstance = ((string)osDiskIdValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.OSDiskId = osDiskIdInstance;
                                                }
                                                
                                                JToken azureVMDiskDetailsArray = providerSpecificDetailsValue["azureVMDiskDetails"];
                                                if (azureVMDiskDetailsArray != null && azureVMDiskDetailsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken azureVMDiskDetailsValue in ((JArray)azureVMDiskDetailsArray))
                                                    {
                                                        AzureVmDiskDetails azureVmDiskDetailsInstance = new AzureVmDiskDetails();
                                                        vMwareAzureV2ProviderSpecificSettingsInstance.AzureVMDiskDetails.Add(azureVmDiskDetailsInstance);
                                                        
                                                        JToken vhdTypeValue3 = azureVMDiskDetailsValue["vhdType"];
                                                        if (vhdTypeValue3 != null && vhdTypeValue3.Type != JTokenType.Null)
                                                        {
                                                            string vhdTypeInstance3 = ((string)vhdTypeValue3);
                                                            azureVmDiskDetailsInstance.VhdType = vhdTypeInstance3;
                                                        }
                                                        
                                                        JToken vhdIdValue3 = azureVMDiskDetailsValue["vhdId"];
                                                        if (vhdIdValue3 != null && vhdIdValue3.Type != JTokenType.Null)
                                                        {
                                                            string vhdIdInstance3 = ((string)vhdIdValue3);
                                                            azureVmDiskDetailsInstance.VhdId = vhdIdInstance3;
                                                        }
                                                        
                                                        JToken vhdNameValue4 = azureVMDiskDetailsValue["vhdName"];
                                                        if (vhdNameValue4 != null && vhdNameValue4.Type != JTokenType.Null)
                                                        {
                                                            string vhdNameInstance4 = ((string)vhdNameValue4);
                                                            azureVmDiskDetailsInstance.VhdName = vhdNameInstance4;
                                                        }
                                                        
                                                        JToken maxSizeMBValue3 = azureVMDiskDetailsValue["maxSizeMB"];
                                                        if (maxSizeMBValue3 != null && maxSizeMBValue3.Type != JTokenType.Null)
                                                        {
                                                            string maxSizeMBInstance3 = ((string)maxSizeMBValue3);
                                                            azureVmDiskDetailsInstance.MaxSizeMB = maxSizeMBInstance3;
                                                        }
                                                        
                                                        JToken targetDiskLocationValue = azureVMDiskDetailsValue["targetDiskLocation"];
                                                        if (targetDiskLocationValue != null && targetDiskLocationValue.Type != JTokenType.Null)
                                                        {
                                                            string targetDiskLocationInstance = ((string)targetDiskLocationValue);
                                                            azureVmDiskDetailsInstance.TargetDiskLocation = targetDiskLocationInstance;
                                                        }
                                                        
                                                        JToken lunIdValue = azureVMDiskDetailsValue["lunId"];
                                                        if (lunIdValue != null && lunIdValue.Type != JTokenType.Null)
                                                        {
                                                            string lunIdInstance = ((string)lunIdValue);
                                                            azureVmDiskDetailsInstance.LunId = lunIdInstance;
                                                        }
                                                        
                                                        JToken targetDiskNameValue = azureVMDiskDetailsValue["targetDiskName"];
                                                        if (targetDiskNameValue != null && targetDiskNameValue.Type != JTokenType.Null)
                                                        {
                                                            string targetDiskNameInstance = ((string)targetDiskNameValue);
                                                            azureVmDiskDetailsInstance.TargetDiskName = targetDiskNameInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken recoveryAzureVMNameValue = providerSpecificDetailsValue["recoveryAzureVMName"];
                                                if (recoveryAzureVMNameValue != null && recoveryAzureVMNameValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryAzureVMNameInstance = ((string)recoveryAzureVMNameValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance;
                                                }
                                                
                                                JToken recoveryAzureVMSizeValue = providerSpecificDetailsValue["recoveryAzureVMSize"];
                                                if (recoveryAzureVMSizeValue != null && recoveryAzureVMSizeValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryAzureVMSizeInstance = ((string)recoveryAzureVMSizeValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance;
                                                }
                                                
                                                JToken recoveryAzureStorageAccountValue = providerSpecificDetailsValue["recoveryAzureStorageAccount"];
                                                if (recoveryAzureStorageAccountValue != null && recoveryAzureStorageAccountValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryAzureStorageAccountInstance = ((string)recoveryAzureStorageAccountValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.RecoveryAzureStorageAccount = recoveryAzureStorageAccountInstance;
                                                }
                                                
                                                JToken vmNicsArray3 = providerSpecificDetailsValue["vmNics"];
                                                if (vmNicsArray3 != null && vmNicsArray3.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken vmNicsValue3 in ((JArray)vmNicsArray3))
                                                    {
                                                        VMNicDetails vMNicDetailsInstance3 = new VMNicDetails();
                                                        vMwareAzureV2ProviderSpecificSettingsInstance.VMNics.Add(vMNicDetailsInstance3);
                                                        
                                                        JToken nicIdValue3 = vmNicsValue3["nicId"];
                                                        if (nicIdValue3 != null && nicIdValue3.Type != JTokenType.Null)
                                                        {
                                                            string nicIdInstance3 = ((string)nicIdValue3);
                                                            vMNicDetailsInstance3.NicId = nicIdInstance3;
                                                        }
                                                        
                                                        JToken vMSubnetNameValue3 = vmNicsValue3["vMSubnetName"];
                                                        if (vMSubnetNameValue3 != null && vMSubnetNameValue3.Type != JTokenType.Null)
                                                        {
                                                            string vMSubnetNameInstance3 = ((string)vMSubnetNameValue3);
                                                            vMNicDetailsInstance3.VMSubnetName = vMSubnetNameInstance3;
                                                        }
                                                        
                                                        JToken vMNetworkNameValue3 = vmNicsValue3["vMNetworkName"];
                                                        if (vMNetworkNameValue3 != null && vMNetworkNameValue3.Type != JTokenType.Null)
                                                        {
                                                            string vMNetworkNameInstance3 = ((string)vMNetworkNameValue3);
                                                            vMNicDetailsInstance3.VMNetworkName = vMNetworkNameInstance3;
                                                        }
                                                        
                                                        JToken recoveryVMNetworkIdValue3 = vmNicsValue3["recoveryVMNetworkId"];
                                                        if (recoveryVMNetworkIdValue3 != null && recoveryVMNetworkIdValue3.Type != JTokenType.Null)
                                                        {
                                                            string recoveryVMNetworkIdInstance3 = ((string)recoveryVMNetworkIdValue3);
                                                            vMNicDetailsInstance3.RecoveryVMNetworkId = recoveryVMNetworkIdInstance3;
                                                        }
                                                        
                                                        JToken recoveryVMSubnetNameValue3 = vmNicsValue3["recoveryVMSubnetName"];
                                                        if (recoveryVMSubnetNameValue3 != null && recoveryVMSubnetNameValue3.Type != JTokenType.Null)
                                                        {
                                                            string recoveryVMSubnetNameInstance3 = ((string)recoveryVMSubnetNameValue3);
                                                            vMNicDetailsInstance3.RecoveryVMSubnetName = recoveryVMSubnetNameInstance3;
                                                        }
                                                        
                                                        JToken ipAddressTypeValue3 = vmNicsValue3["ipAddressType"];
                                                        if (ipAddressTypeValue3 != null && ipAddressTypeValue3.Type != JTokenType.Null)
                                                        {
                                                            string ipAddressTypeInstance3 = ((string)ipAddressTypeValue3);
                                                            vMNicDetailsInstance3.IpAddressType = ipAddressTypeInstance3;
                                                        }
                                                        
                                                        JToken replicaNicStaticIPAddressValue3 = vmNicsValue3["replicaNicStaticIPAddress"];
                                                        if (replicaNicStaticIPAddressValue3 != null && replicaNicStaticIPAddressValue3.Type != JTokenType.Null)
                                                        {
                                                            string replicaNicStaticIPAddressInstance3 = ((string)replicaNicStaticIPAddressValue3);
                                                            vMNicDetailsInstance3.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance3;
                                                        }
                                                        
                                                        JToken selectionTypeValue3 = vmNicsValue3["selectionType"];
                                                        if (selectionTypeValue3 != null && selectionTypeValue3.Type != JTokenType.Null)
                                                        {
                                                            string selectionTypeInstance3 = ((string)selectionTypeValue3);
                                                            vMNicDetailsInstance3.SelectionType = selectionTypeInstance3;
                                                        }
                                                    }
                                                }
                                                
                                                JToken selectedRecoveryAzureNetworkIdValue = providerSpecificDetailsValue["selectedRecoveryAzureNetworkId"];
                                                if (selectedRecoveryAzureNetworkIdValue != null && selectedRecoveryAzureNetworkIdValue.Type != JTokenType.Null)
                                                {
                                                    string selectedRecoveryAzureNetworkIdInstance = ((string)selectedRecoveryAzureNetworkIdValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance;
                                                }
                                                
                                                JToken discoveryTypeValue = providerSpecificDetailsValue["discoveryType"];
                                                if (discoveryTypeValue != null && discoveryTypeValue.Type != JTokenType.Null)
                                                {
                                                    string discoveryTypeInstance = ((string)discoveryTypeValue);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.DiscoveryType = discoveryTypeInstance;
                                                }
                                                
                                                JToken instanceTypeValue3 = providerSpecificDetailsValue["instanceType"];
                                                if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                                    vMwareAzureV2ProviderSpecificSettingsInstance.InstanceType = instanceTypeInstance3;
                                                }
                                                propertiesInstance.ProviderSpecificDetails = vMwareAzureV2ProviderSpecificSettingsInstance;
                                            }
                                            if (typeName == "HyperVReplicaAzure")
                                            {
                                                HyperVReplicaAzureReplicationDetails hyperVReplicaAzureReplicationDetailsInstance = new HyperVReplicaAzureReplicationDetails();
                                                
                                                JToken azureVMDiskDetailsArray2 = providerSpecificDetailsValue["azureVMDiskDetails"];
                                                if (azureVMDiskDetailsArray2 != null && azureVMDiskDetailsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken azureVMDiskDetailsValue2 in ((JArray)azureVMDiskDetailsArray2))
                                                    {
                                                        AzureVmDiskDetails azureVmDiskDetailsInstance2 = new AzureVmDiskDetails();
                                                        hyperVReplicaAzureReplicationDetailsInstance.AzureVMDiskDetails.Add(azureVmDiskDetailsInstance2);
                                                        
                                                        JToken vhdTypeValue4 = azureVMDiskDetailsValue2["vhdType"];
                                                        if (vhdTypeValue4 != null && vhdTypeValue4.Type != JTokenType.Null)
                                                        {
                                                            string vhdTypeInstance4 = ((string)vhdTypeValue4);
                                                            azureVmDiskDetailsInstance2.VhdType = vhdTypeInstance4;
                                                        }
                                                        
                                                        JToken vhdIdValue4 = azureVMDiskDetailsValue2["vhdId"];
                                                        if (vhdIdValue4 != null && vhdIdValue4.Type != JTokenType.Null)
                                                        {
                                                            string vhdIdInstance4 = ((string)vhdIdValue4);
                                                            azureVmDiskDetailsInstance2.VhdId = vhdIdInstance4;
                                                        }
                                                        
                                                        JToken vhdNameValue5 = azureVMDiskDetailsValue2["vhdName"];
                                                        if (vhdNameValue5 != null && vhdNameValue5.Type != JTokenType.Null)
                                                        {
                                                            string vhdNameInstance5 = ((string)vhdNameValue5);
                                                            azureVmDiskDetailsInstance2.VhdName = vhdNameInstance5;
                                                        }
                                                        
                                                        JToken maxSizeMBValue4 = azureVMDiskDetailsValue2["maxSizeMB"];
                                                        if (maxSizeMBValue4 != null && maxSizeMBValue4.Type != JTokenType.Null)
                                                        {
                                                            string maxSizeMBInstance4 = ((string)maxSizeMBValue4);
                                                            azureVmDiskDetailsInstance2.MaxSizeMB = maxSizeMBInstance4;
                                                        }
                                                        
                                                        JToken targetDiskLocationValue2 = azureVMDiskDetailsValue2["targetDiskLocation"];
                                                        if (targetDiskLocationValue2 != null && targetDiskLocationValue2.Type != JTokenType.Null)
                                                        {
                                                            string targetDiskLocationInstance2 = ((string)targetDiskLocationValue2);
                                                            azureVmDiskDetailsInstance2.TargetDiskLocation = targetDiskLocationInstance2;
                                                        }
                                                        
                                                        JToken lunIdValue2 = azureVMDiskDetailsValue2["lunId"];
                                                        if (lunIdValue2 != null && lunIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string lunIdInstance2 = ((string)lunIdValue2);
                                                            azureVmDiskDetailsInstance2.LunId = lunIdInstance2;
                                                        }
                                                        
                                                        JToken targetDiskNameValue2 = azureVMDiskDetailsValue2["targetDiskName"];
                                                        if (targetDiskNameValue2 != null && targetDiskNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string targetDiskNameInstance2 = ((string)targetDiskNameValue2);
                                                            azureVmDiskDetailsInstance2.TargetDiskName = targetDiskNameInstance2;
                                                        }
                                                    }
                                                }
                                                
                                                JToken recoveryAzureVMNameValue2 = providerSpecificDetailsValue["recoveryAzureVMName"];
                                                if (recoveryAzureVMNameValue2 != null && recoveryAzureVMNameValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryAzureVMNameInstance2 = ((string)recoveryAzureVMNameValue2);
                                                    hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance2;
                                                }
                                                
                                                JToken recoveryAzureVMSizeValue2 = providerSpecificDetailsValue["recoveryAzureVMSize"];
                                                if (recoveryAzureVMSizeValue2 != null && recoveryAzureVMSizeValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryAzureVMSizeInstance2 = ((string)recoveryAzureVMSizeValue2);
                                                    hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance2;
                                                }
                                                
                                                JToken recoveryAzureStorageAccountValue2 = providerSpecificDetailsValue["recoveryAzureStorageAccount"];
                                                if (recoveryAzureStorageAccountValue2 != null && recoveryAzureStorageAccountValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryAzureStorageAccountInstance2 = ((string)recoveryAzureStorageAccountValue2);
                                                    hyperVReplicaAzureReplicationDetailsInstance.RecoveryAzureStorageAccount = recoveryAzureStorageAccountInstance2;
                                                }
                                                
                                                JToken lastReplicatedTimeValue3 = providerSpecificDetailsValue["lastReplicatedTime"];
                                                if (lastReplicatedTimeValue3 != null && lastReplicatedTimeValue3.Type != JTokenType.Null)
                                                {
                                                    string lastReplicatedTimeInstance3 = ((string)lastReplicatedTimeValue3);
                                                    hyperVReplicaAzureReplicationDetailsInstance.LastReplicatedTime = lastReplicatedTimeInstance3;
                                                }
                                                
                                                JToken initialReplicationDetailsValue3 = providerSpecificDetailsValue["initialReplicationDetails"];
                                                if (initialReplicationDetailsValue3 != null && initialReplicationDetailsValue3.Type != JTokenType.Null)
                                                {
                                                    InitialReplicationDetails initialReplicationDetailsInstance3 = new InitialReplicationDetails();
                                                    hyperVReplicaAzureReplicationDetailsInstance.InitialReplicationDetails = initialReplicationDetailsInstance3;
                                                    
                                                    JToken initialReplicationTypeValue3 = initialReplicationDetailsValue3["initialReplicationType"];
                                                    if (initialReplicationTypeValue3 != null && initialReplicationTypeValue3.Type != JTokenType.Null)
                                                    {
                                                        string initialReplicationTypeInstance3 = ((string)initialReplicationTypeValue3);
                                                        initialReplicationDetailsInstance3.InitialReplicationType = initialReplicationTypeInstance3;
                                                    }
                                                    
                                                    JToken initialReplicationProgressPercentageValue3 = initialReplicationDetailsValue3["initialReplicationProgressPercentage"];
                                                    if (initialReplicationProgressPercentageValue3 != null && initialReplicationProgressPercentageValue3.Type != JTokenType.Null)
                                                    {
                                                        string initialReplicationProgressPercentageInstance3 = ((string)initialReplicationProgressPercentageValue3);
                                                        initialReplicationDetailsInstance3.InitialReplicationProgressPercentage = initialReplicationProgressPercentageInstance3;
                                                    }
                                                }
                                                
                                                JToken vmNicsArray4 = providerSpecificDetailsValue["vmNics"];
                                                if (vmNicsArray4 != null && vmNicsArray4.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken vmNicsValue4 in ((JArray)vmNicsArray4))
                                                    {
                                                        VMNicDetails vMNicDetailsInstance4 = new VMNicDetails();
                                                        hyperVReplicaAzureReplicationDetailsInstance.VMNics.Add(vMNicDetailsInstance4);
                                                        
                                                        JToken nicIdValue4 = vmNicsValue4["nicId"];
                                                        if (nicIdValue4 != null && nicIdValue4.Type != JTokenType.Null)
                                                        {
                                                            string nicIdInstance4 = ((string)nicIdValue4);
                                                            vMNicDetailsInstance4.NicId = nicIdInstance4;
                                                        }
                                                        
                                                        JToken vMSubnetNameValue4 = vmNicsValue4["vMSubnetName"];
                                                        if (vMSubnetNameValue4 != null && vMSubnetNameValue4.Type != JTokenType.Null)
                                                        {
                                                            string vMSubnetNameInstance4 = ((string)vMSubnetNameValue4);
                                                            vMNicDetailsInstance4.VMSubnetName = vMSubnetNameInstance4;
                                                        }
                                                        
                                                        JToken vMNetworkNameValue4 = vmNicsValue4["vMNetworkName"];
                                                        if (vMNetworkNameValue4 != null && vMNetworkNameValue4.Type != JTokenType.Null)
                                                        {
                                                            string vMNetworkNameInstance4 = ((string)vMNetworkNameValue4);
                                                            vMNicDetailsInstance4.VMNetworkName = vMNetworkNameInstance4;
                                                        }
                                                        
                                                        JToken recoveryVMNetworkIdValue4 = vmNicsValue4["recoveryVMNetworkId"];
                                                        if (recoveryVMNetworkIdValue4 != null && recoveryVMNetworkIdValue4.Type != JTokenType.Null)
                                                        {
                                                            string recoveryVMNetworkIdInstance4 = ((string)recoveryVMNetworkIdValue4);
                                                            vMNicDetailsInstance4.RecoveryVMNetworkId = recoveryVMNetworkIdInstance4;
                                                        }
                                                        
                                                        JToken recoveryVMSubnetNameValue4 = vmNicsValue4["recoveryVMSubnetName"];
                                                        if (recoveryVMSubnetNameValue4 != null && recoveryVMSubnetNameValue4.Type != JTokenType.Null)
                                                        {
                                                            string recoveryVMSubnetNameInstance4 = ((string)recoveryVMSubnetNameValue4);
                                                            vMNicDetailsInstance4.RecoveryVMSubnetName = recoveryVMSubnetNameInstance4;
                                                        }
                                                        
                                                        JToken ipAddressTypeValue4 = vmNicsValue4["ipAddressType"];
                                                        if (ipAddressTypeValue4 != null && ipAddressTypeValue4.Type != JTokenType.Null)
                                                        {
                                                            string ipAddressTypeInstance4 = ((string)ipAddressTypeValue4);
                                                            vMNicDetailsInstance4.IpAddressType = ipAddressTypeInstance4;
                                                        }
                                                        
                                                        JToken replicaNicStaticIPAddressValue4 = vmNicsValue4["replicaNicStaticIPAddress"];
                                                        if (replicaNicStaticIPAddressValue4 != null && replicaNicStaticIPAddressValue4.Type != JTokenType.Null)
                                                        {
                                                            string replicaNicStaticIPAddressInstance4 = ((string)replicaNicStaticIPAddressValue4);
                                                            vMNicDetailsInstance4.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance4;
                                                        }
                                                        
                                                        JToken selectionTypeValue4 = vmNicsValue4["selectionType"];
                                                        if (selectionTypeValue4 != null && selectionTypeValue4.Type != JTokenType.Null)
                                                        {
                                                            string selectionTypeInstance4 = ((string)selectionTypeValue4);
                                                            vMNicDetailsInstance4.SelectionType = selectionTypeInstance4;
                                                        }
                                                    }
                                                }
                                                
                                                JToken selectedRecoveryAzureNetworkIdValue2 = providerSpecificDetailsValue["selectedRecoveryAzureNetworkId"];
                                                if (selectedRecoveryAzureNetworkIdValue2 != null && selectedRecoveryAzureNetworkIdValue2.Type != JTokenType.Null)
                                                {
                                                    string selectedRecoveryAzureNetworkIdInstance2 = ((string)selectedRecoveryAzureNetworkIdValue2);
                                                    hyperVReplicaAzureReplicationDetailsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance2;
                                                }
                                                
                                                JToken encryptionValue = providerSpecificDetailsValue["encryption"];
                                                if (encryptionValue != null && encryptionValue.Type != JTokenType.Null)
                                                {
                                                    string encryptionInstance = ((string)encryptionValue);
                                                    hyperVReplicaAzureReplicationDetailsInstance.Encryption = encryptionInstance;
                                                }
                                                
                                                JToken oSDetailsValue = providerSpecificDetailsValue["oSDetails"];
                                                if (oSDetailsValue != null && oSDetailsValue.Type != JTokenType.Null)
                                                {
                                                    OSDetails oSDetailsInstance = new OSDetails();
                                                    hyperVReplicaAzureReplicationDetailsInstance.OSDetails = oSDetailsInstance;
                                                    
                                                    JToken osTypeValue2 = oSDetailsValue["osType"];
                                                    if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                                    {
                                                        string osTypeInstance2 = ((string)osTypeValue2);
                                                        oSDetailsInstance.OsType = osTypeInstance2;
                                                    }
                                                    
                                                    JToken productTypeValue = oSDetailsValue["productType"];
                                                    if (productTypeValue != null && productTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string productTypeInstance = ((string)productTypeValue);
                                                        oSDetailsInstance.ProductType = productTypeInstance;
                                                    }
                                                    
                                                    JToken osEditionValue = oSDetailsValue["osEdition"];
                                                    if (osEditionValue != null && osEditionValue.Type != JTokenType.Null)
                                                    {
                                                        string osEditionInstance = ((string)osEditionValue);
                                                        oSDetailsInstance.OSEdition = osEditionInstance;
                                                    }
                                                    
                                                    JToken oSVersionValue = oSDetailsValue["oSVersion"];
                                                    if (oSVersionValue != null && oSVersionValue.Type != JTokenType.Null)
                                                    {
                                                        string oSVersionInstance = ((string)oSVersionValue);
                                                        oSDetailsInstance.OSVersion = oSVersionInstance;
                                                    }
                                                    
                                                    JToken oSMajorVersionValue = oSDetailsValue["oSMajorVersion"];
                                                    if (oSMajorVersionValue != null && oSMajorVersionValue.Type != JTokenType.Null)
                                                    {
                                                        string oSMajorVersionInstance = ((string)oSMajorVersionValue);
                                                        oSDetailsInstance.OSMajorVersion = oSMajorVersionInstance;
                                                    }
                                                    
                                                    JToken oSMinorVersionValue = oSDetailsValue["oSMinorVersion"];
                                                    if (oSMinorVersionValue != null && oSMinorVersionValue.Type != JTokenType.Null)
                                                    {
                                                        string oSMinorVersionInstance = ((string)oSMinorVersionValue);
                                                        oSDetailsInstance.OSMinorVersion = oSMinorVersionInstance;
                                                    }
                                                }
                                                
                                                JToken sourceVmRAMSizeInMBValue2 = providerSpecificDetailsValue["sourceVmRAMSizeInMB"];
                                                if (sourceVmRAMSizeInMBValue2 != null && sourceVmRAMSizeInMBValue2.Type != JTokenType.Null)
                                                {
                                                    int sourceVmRAMSizeInMBInstance2 = ((int)sourceVmRAMSizeInMBValue2);
                                                    hyperVReplicaAzureReplicationDetailsInstance.SourceVmRAMSizeInMB = sourceVmRAMSizeInMBInstance2;
                                                }
                                                
                                                JToken sourceVmCPUCountValue2 = providerSpecificDetailsValue["sourceVmCPUCount"];
                                                if (sourceVmCPUCountValue2 != null && sourceVmCPUCountValue2.Type != JTokenType.Null)
                                                {
                                                    int sourceVmCPUCountInstance2 = ((int)sourceVmCPUCountValue2);
                                                    hyperVReplicaAzureReplicationDetailsInstance.SourceVmCPUCount = sourceVmCPUCountInstance2;
                                                }
                                                
                                                JToken instanceTypeValue4 = providerSpecificDetailsValue["instanceType"];
                                                if (instanceTypeValue4 != null && instanceTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance4 = ((string)instanceTypeValue4);
                                                    hyperVReplicaAzureReplicationDetailsInstance.InstanceType = instanceTypeInstance4;
                                                }
                                                propertiesInstance.ProviderSpecificDetails = hyperVReplicaAzureReplicationDetailsInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        replicationProtectedItemInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue2 = valueValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        replicationProtectedItemInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        replicationProtectedItemInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        replicationProtectedItemInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            replicationProtectedItemInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets list of recovery azure vm sizes for a replication protected
        /// item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric unique name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container unique name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item unique name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list of recovery azure vm sizes.
        /// </returns>
        public async Task<TargetComputeSizeResponse> ListTargetComputeSizesAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (replicationProtectedItemName == null)
            {
                throw new ArgumentNullException("replicationProtectedItemName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListTargetComputeSizesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/replicationProtectedItems/";
            url = url + Uri.EscapeDataString(replicationProtectedItemName);
            url = url + "/targetComputeSizes";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TargetComputeSizeResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TargetComputeSizeResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    TargetComputeSize targetComputeSizeInstance = new TargetComputeSize();
                                    result.TargetComputeSizes.Add(targetComputeSizeInstance);
                                    
                                    JToken nameValue = valueValue["Name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        targetComputeSizeInstance.Name = nameInstance;
                                    }
                                    
                                    JToken friendlyNameValue = valueValue["FriendlyName"];
                                    if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance = ((string)friendlyNameValue);
                                        targetComputeSizeInstance.FriendlyName = friendlyNameInstance;
                                    }
                                    
                                    JToken cpuCoresCountValue = valueValue["cpuCoresCount"];
                                    if (cpuCoresCountValue != null && cpuCoresCountValue.Type != JTokenType.Null)
                                    {
                                        int cpuCoresCountInstance = ((int)cpuCoresCountValue);
                                        targetComputeSizeInstance.CpuCoresCount = cpuCoresCountInstance;
                                    }
                                    
                                    JToken memoryInGBValue = valueValue["memoryInGB"];
                                    if (memoryInGBValue != null && memoryInGBValue.Type != JTokenType.Null)
                                    {
                                        double memoryInGBInstance = ((double)memoryInGBValue);
                                        targetComputeSizeInstance.MemoryInGB = memoryInGBInstance;
                                    }
                                    
                                    JToken maxDataDiskCountValue = valueValue["maxDataDiskCount"];
                                    if (maxDataDiskCountValue != null && maxDataDiskCountValue.Type != JTokenType.Null)
                                    {
                                        int maxDataDiskCountInstance = ((int)maxDataDiskCountValue);
                                        targetComputeSizeInstance.MaxDataDiskCount = maxDataDiskCountInstance;
                                    }
                                    
                                    JToken maxNicsCountValue = valueValue["maxNicsCount"];
                                    if (maxNicsCountValue != null && maxNicsCountValue.Type != JTokenType.Null)
                                    {
                                        int maxNicsCountInstance = ((int)maxNicsCountValue);
                                        targetComputeSizeInstance.MaxNicsCount = maxNicsCountInstance;
                                    }
                                    
                                    JToken highIopsSupportedValue = valueValue["highIopsSupported"];
                                    if (highIopsSupportedValue != null && highIopsSupportedValue.Type != JTokenType.Null)
                                    {
                                        string highIopsSupportedInstance = ((string)highIopsSupportedValue);
                                        targetComputeSizeInstance.HighIopsSupported = highIopsSupportedInstance;
                                    }
                                    
                                }
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Execute planned failover for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item name.
        /// </param>
        /// <param name='input'>
        /// Required. Planned failover input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> PlannedFailoverAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, PlannedFailoverInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "PlannedFailoverAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.ReplicationProtectedItem.BeginPlannedFailoverAsync(fabricName, protectionContainerName, replicationProtectedItemName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            ReplicationProtectedItemOperationResponse result = await client.ReplicationProtectedItem.GetPlannedFailoverStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ReplicationProtectedItem.GetPlannedFailoverStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Purge Protection for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item unique name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> PurgeProtectionAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "PurgeProtectionAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.ReplicationProtectedItem.BeginPurgeProtectionAsync(fabricName, protectionContainerName, replicationProtectedItemName, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse result = await client.ReplicationProtectedItem.GetPurgeStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ReplicationProtectedItem.GetPurgeStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Executes repair VM replication for the given Replication protected
        /// item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> RepairVMReplicationAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "RepairVMReplicationAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.ReplicationProtectedItem.BeginRepairVMReplicationAsync(fabricName, protectionContainerName, replicationProtectedItemName, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            ReplicationProtectedItemOperationResponse result = await client.ReplicationProtectedItem.GetRepairVMReplicationStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ReplicationProtectedItem.GetRepairVMReplicationStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Execute reprotect for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item name.
        /// </param>
        /// <param name='input'>
        /// Required. Reprotect input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> ReprotectAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, ReverseReplicationInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ReprotectAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.ReplicationProtectedItem.BeginReprotectAsync(fabricName, protectionContainerName, replicationProtectedItemName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            ReplicationProtectedItemOperationResponse result = await client.ReplicationProtectedItem.GetReprotectStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ReplicationProtectedItem.GetReprotectStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Execute Test failover for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item name.
        /// </param>
        /// <param name='input'>
        /// Required. Test failover input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> TestFailoverAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, TestFailoverInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "TestFailoverAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.ReplicationProtectedItem.BeginTestFailoverAsync(fabricName, protectionContainerName, replicationProtectedItemName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            ReplicationProtectedItemOperationResponse result = await client.ReplicationProtectedItem.GetTestFailoverStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ReplicationProtectedItem.GetTestFailoverStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Execute unplanned failover for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item name.
        /// </param>
        /// <param name='input'>
        /// Required. Unplanned failover input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> UnplannedFailoverAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, UnplannedFailoverInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "UnplannedFailoverAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.ReplicationProtectedItem.BeginUnplannedFailoverAsync(fabricName, protectionContainerName, replicationProtectedItemName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            ReplicationProtectedItemOperationResponse result = await client.ReplicationProtectedItem.GetUnplannedFailoverStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ReplicationProtectedItem.GetUnplannedFailoverStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Update mobility service for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item name.
        /// </param>
        /// <param name='input'>
        /// Required. Update mobility service input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> UpdateMobilityServiceAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, UpdateMobilityServiceRequest input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "UpdateMobilityServiceAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.ReplicationProtectedItem.BeginUpdateMobilityServiceAsync(fabricName, protectionContainerName, replicationProtectedItemName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            ReplicationProtectedItemOperationResponse result = await client.ReplicationProtectedItem.GetUpdateMobilityServiceStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ReplicationProtectedItem.GetUpdateMobilityServiceStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Updates the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item name.
        /// </param>
        /// <param name='input'>
        /// Required. Updation input
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> UpdateProtectionAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, UpdateReplicationProtectedItemInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "UpdateProtectionAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.ReplicationProtectedItem.BeginUpdateProtectionAsync(fabricName, protectionContainerName, replicationProtectedItemName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            ReplicationProtectedItemOperationResponse result = await client.ReplicationProtectedItem.GetUpdateProtectionStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ReplicationProtectedItem.GetUpdateProtectionStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
    }
}
